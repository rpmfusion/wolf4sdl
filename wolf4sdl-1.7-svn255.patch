diff -urN --exclude .git Wolf4SDL-1.6-src/Changes-dc.txt wolf4sdl/Changes-dc.txt
--- Wolf4SDL-1.6-src/Changes-dc.txt	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/Changes-dc.txt	2011-04-27 19:58:18.540203098 +0200
@@ -0,0 +1,17 @@
+1.7 <February 01, 2009>
+- Saved game description saved to VMS header
+- Adjustments made to LCD
+- VMU loading code improved
+- Miscellaneous code clean ups
+- Work started on new disc check code
+
+1.6 <October 04, 2008>
+- Getting the DC port up-to-date
+
+1.5 <May 25, 2008>
+- Mouse support
+- Weapon switch support
+- Controllers with C & Z button support
+- Command line parameters via 'params.txt' support
+- SOD mission pack support via menu
+- Commercial CD-ROM swap support
diff -urN --exclude .git Wolf4SDL-1.6-src/Changes.txt wolf4sdl/Changes.txt
--- Wolf4SDL-1.6-src/Changes.txt	2008-09-01 02:32:04.000000000 +0200
+++ wolf4sdl/Changes.txt	2011-04-27 19:58:18.540203098 +0200
@@ -1,3 +1,30 @@
+Wolf4SDL v1.7
+ - Added support for .sd1 SOD game files as delivered by Steam
+   by changing --mission parameter slightly
+   (thanks to Pickle)
+ - Added --windowed-mouse parameter to start windowed mode with grabbed mouse
+   (thanks to Jared Breland)
+ - Rain and snow speed fix (thanks to Tricob)
+ - Floor/ceiling fix (thanks to Tricob / Adam Biser)
+ - Fixed moon out of screen bug (thanks to Tricob)
+ - Rain/snow leaking ceilings fix (thanks to Adam Biser / Tricob)
+ - Per-user configuration/savegame directories (~/.wolf4sdl) on
+   Linux like systems per default (thanks to Jared Breland)
+ - Added --configdir parameter
+ - Use SDL_DOUBLEBUF for vsync to avoid or at least reduce flickering
+   (thanks to Greg Ayrton for the hint, use --nodblbuf to disable it)
+ - Removed remainings of the frame rate counter on screen, when disabled
+ - Don't quit game when using TAB+E with --tedlevel
+ - Added --extravbls parameter
+ - Changed default for "extra VBLs" from 1 to 0
+ - Fixed missing umask parameter for open with O_CREAT
+   (bug reported by Daniel Fass)
+ - Fixed support for 1.0 shareware data files
+   (bug reported by Marcus Naylor)
+ - Fixed xtile and ytile not being valid in HitHorizWall and HitVertWall,
+   respectively. This caused problems with some tutorials.
+ - Removed unused HitHorizPWall and HitVertPWall.
+
 Wolf4SDL v1.6 (released 2008-09-01, revision 233)
  - Fixed songs not really supporting more than 64kb
  - Try to recognize whether data files don't fit to program version
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl.cpp wolf4sdl/GP2X/fmopl.cpp
--- Wolf4SDL-1.6-src/GP2X/fmopl.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl.cpp	2011-04-27 19:58:18.541203098 +0200
@@ -0,0 +1,818 @@
+/*
+** based on:
+**
+** File: fmopl.c - software implementation of FM sound generator
+**                                            types OPL and OPL2
+**
+** Copyright (C) 2002,2003 Jarek Burczynski (bujar at mame dot net)
+** Copyright (C) 1999,2000 Tatsuyuki Satoh , MultiArcadeMachineEmulator development
+**
+** Version 0.70
+**
+** from the dosbox 0.72 source
+*/
+
+#define LOG_MSG printf
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <math.h>
+#include <sys/mman.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include "fmopl.h"
+#include "fmopl_940/fmopl_shared.h"
+
+#ifndef PI
+#define PI 3.14159265358979323846
+#endif
+
+/* output final shift */
+#if (OPL_SAMPLE_BITS==16)
+	#define FINAL_SH	(0)
+	#define MAXOUT		(+32767)
+	#define MINOUT		(-32768)
+#else
+	#define FINAL_SH	(8)
+	#define MAXOUT		(+127)
+	#define MINOUT		(-128)
+#endif
+
+
+#define FREQ_SH			16  /* 16.16 fixed point (frequency calculations) */
+#define EG_SH			16  /* 16.16 fixed point (EG timing)              */
+#define LFO_SH			24  /*  8.24 fixed point (LFO calculations)       */
+#define TIMER_SH		16  /* 16.16 fixed point (timers calculations)    */
+
+#define FREQ_MASK		((1<<FREQ_SH)-1)
+
+/* envelope output entries */
+#define ENV_BITS		10
+#define ENV_LEN			(1<<ENV_BITS)
+#define ENV_STEP		(128.0/ENV_LEN)
+
+#define MAX_ATT_INDEX	((1<<(ENV_BITS-1))-1) /*511*/
+#define MIN_ATT_INDEX	(0)
+
+/* register number to channel number , slot offset */
+#define SLOT1 0
+#define SLOT2 1
+
+/* Envelope Generator phases */
+
+#define EG_ATT			4
+#define EG_DEC			3
+#define EG_SUS			2
+#define EG_REL			1
+#define EG_OFF			0
+
+#define OPL_TYPE_WAVESEL   0x01  /* waveform select		*/
+#define OPL_TYPE_ADPCM     0x02  /* DELTA-T ADPCM unit	*/
+#define OPL_TYPE_KEYBOARD  0x04  /* keyboard interface	*/
+#define OPL_TYPE_IO        0x08  /* I/O port			*/
+
+/* ---------- Generic interface section ---------- */
+#define OPL_TYPE_YM3526 (0)
+#define OPL_TYPE_YM3812 (OPL_TYPE_WAVESEL)
+#define OPL_TYPE_Y8950  (OPL_TYPE_ADPCM|OPL_TYPE_KEYBOARD|OPL_TYPE_IO)
+
+#define WAIT_IF_MSG_BUF_FULL while( *NSubmittedMessages - *NExecutedMessages>= MSG_BUF_SIZE){};
+
+#define WAIT_FOR_SYNC \
+ while( (*NSubmittedMessages - *NExecutedMessages) % (int) MSG_BUF_SIZE !=0 ){};
+
+#define ADD_MESSAGE(mtype, i,j,k) \
+ { \
+ int n = ((*NSubmittedMessages)+1) % ((int) MSG_BUF_SIZE); \
+ MessageBuffer[n].type=mtype;  \
+ MessageBuffer[n].data1=i;  \
+ MessageBuffer[n].data2=j;  \
+ MessageBuffer[n].data3=k; \
+ (*NSubmittedMessages)++; \
+ }
+ //if((*NSubmittedMessages) % (int) 500 ==0)
+// LOG_MSG("OPL2: %d %d %d\n",*NSubmittedMessages,*NExecutedMessages,*NSubmittedMessages-*NExecutedMessages);
+
+
+
+
+
+typedef struct fm_opl_lite {
+	int               T[2];            /* timer counters				*/
+	int               TC[2];
+	UINT8             st[2];           /* timer enable					*/
+
+	UINT32            *fn_tab;
+
+	/* external event callback handlers */
+	OPL_TIMERHANDLER  TimerHandler;    /* TIMER handler				*/
+	int               TimerParam;      /* TIMER parameter				*/
+	OPL_IRQHANDLER    IRQHandler;      /* IRQ handler					*/
+	int               IRQParam;        /* IRQ parameter				*/
+	OPL_UPDATEHANDLER UpdateHandler;   /* stream update handler		*/
+	int               UpdateParam;     /* stream update parameter		*/
+
+	UINT8             type;            /* chip type					*/
+	UINT8             address;         /* address register				*/
+	UINT8             status;          /* status flag					*/
+	UINT8             statusmask;      /* status mask					*/
+	UINT8             mode;            /* Reg.08 : CSM,notesel,etc.	*/
+
+	int               clock;           /* master clock  (Hz)			*/
+	int               rate;            /* sampling rate (Hz)			*/
+	double           freqbase;        /* frequency base				*/
+	double           TimerBase;       /* Timer base time (==sampling time)*/
+} FM_OPLlite;
+
+/* status set and IRQ handling */
+inline void OPL_STATUS_SET(FM_OPLlite *OPL,int flag)
+{
+	/* set status flag */
+	OPL->status |= flag;
+	if(!(OPL->status & 0x80))
+	{
+		if(OPL->status & OPL->statusmask)
+		{	/* IRQ on */
+			OPL->status |= 0x80;
+			/* callback user interrupt handler (IRQ is OFF to ON) */
+			if(OPL->IRQHandler) (OPL->IRQHandler)(OPL->IRQParam,1);
+		}
+	}
+}
+
+/* status reset and IRQ handling */
+inline void OPL_STATUS_RESET(FM_OPLlite *OPL,int flag)
+{
+	/* reset status flag */
+	OPL->status &=~flag;
+	if((OPL->status & 0x80))
+	{
+		if (!(OPL->status & OPL->statusmask) )
+		{
+			OPL->status &= 0x7f;
+			/* callback user interrupt handler (IRQ is ON to OFF) */
+			if(OPL->IRQHandler) (OPL->IRQHandler)(OPL->IRQParam,0);
+		}
+	}
+}
+
+/* IRQ mask set */
+inline void OPL_STATUSMASK_SET(FM_OPLlite *OPL,int flag)
+{
+	OPL->statusmask = flag;
+	/* IRQ handling check */
+	OPL_STATUS_SET(OPL,0);
+	OPL_STATUS_RESET(OPL,0);
+}
+
+/* generic table initialize */
+static int init_tables(void)
+{
+	signed int i,x;
+	signed int n;
+	double o,m;
+
+
+	for (x=0; x<TL_RES_LEN; x++)
+	{
+		m = (1<<16) / pow(2.0, (x+1) * (ENV_STEP/4.0) / 8.0);
+		m = floor(m);
+
+		/* we never reach (1<<16) here due to the (x+1) */
+		/* result fits within 16 bits at maximum */
+
+		n = (int)m;		/* 16 bits here */
+		n >>= 4;		/* 12 bits here */
+		if (n&1)		/* round to nearest */
+			n = (n>>1)+1;
+		else
+			n = n>>1;
+						/* 11 bits here (rounded) */
+		n <<= 1;		/* 12 bits here (as in real chip) */
+		tl_tab[ x*2 + 0 ] = n;
+		tl_tab[ x*2 + 1 ] = -tl_tab[ x*2 + 0 ];
+
+		for (i=1; i<12; i++)
+		{
+			tl_tab[ x*2+0 + i*2*TL_RES_LEN ] =  tl_tab[ x*2+0 ]>>i;
+			tl_tab[ x*2+1 + i*2*TL_RES_LEN ] = -tl_tab[ x*2+0 + i*2*TL_RES_LEN ];
+		}
+	}
+
+
+	for (i=0; i<SIN_LEN; i++)
+	{
+		/* non-standard sinus */
+		m = sin( ((i*2)+1) * PI / SIN_LEN ); /* checked against the real chip */
+
+		/* we never reach zero here due to ((i*2)+1) */
+
+		if (m>0.0)
+			o = 8*log(1.0/m)/log(2.0);	/* convert to 'decibels' */
+		else
+			o = 8*log(-1.0/m)/log(2.0);	/* convert to 'decibels' */
+
+		o = o / (ENV_STEP/4);
+
+		n = (int)(2.0*o);
+		if (n&1)						/* round to nearest */
+			n = (n>>1)+1;
+		else
+			n = n>>1;
+
+		sin_tab[ i ] = n*2 + (m>=0.0? 0: 1 );
+
+	}
+
+	for (i=0; i<SIN_LEN; i++)
+	{
+		/* waveform 1:  __      __     */
+		/*             /  \____/  \____*/
+		/* output only first half of the sinus waveform (positive one) */
+
+		if (i & (1<<(SIN_BITS-1)) )
+			sin_tab[1*SIN_LEN+i] = TL_TAB_LEN;
+		else
+			sin_tab[1*SIN_LEN+i] = sin_tab[i];
+
+		/* waveform 2:  __  __  __  __ */
+		/*             /  \/  \/  \/  \*/
+		/* abs(sin) */
+
+		sin_tab[2*SIN_LEN+i] = sin_tab[i & (SIN_MASK>>1) ];
+
+		/* waveform 3:  _   _   _   _  */
+		/*             / |_/ |_/ |_/ |_*/
+		/* abs(output only first quarter of the sinus waveform) */
+
+		if (i & (1<<(SIN_BITS-2)) )
+			sin_tab[3*SIN_LEN+i] = TL_TAB_LEN;
+		else
+			sin_tab[3*SIN_LEN+i] = sin_tab[i & (SIN_MASK>>2)];
+	}
+
+	return 1;
+}
+
+static void OPL_initalize(FM_OPLlite *OPL, FM_OPL *OPLs)
+{
+	int i;
+
+	/* frequency base */
+	OPL->freqbase  = (OPL->rate) ? ((double)OPL->clock / 72.0) / OPL->rate  : 0;
+
+	/* Timer base time */
+	OPL->TimerBase = 1.0 / ((double)OPL->clock / 72.0 );
+
+	/* make fnumber -> increment counter table */
+	for( i=0 ; i < 1024 ; i++ )
+	{
+		/* opn phase increment counter = 20bit */
+		OPL->fn_tab[i] = (UINT32)( (double)i * 64 * OPL->freqbase * (1<<(FREQ_SH-10)) );
+		/* -10 because chip works with 10.10 fixed point, while we use 16.16 */
+	}
+
+	/* Amplitude modulation: 27 output levels (triangle waveform); 1 level takes one of: 192, 256 or 448 samples */
+	/* One entry from LFO_AM_TABLE lasts for 64 samples */
+	OPLs->lfo_am_inc = (UINT32)((1.0 / 64.0 ) * (1<<LFO_SH) * OPL->freqbase);
+
+	/* Vibrato: 8 output levels (triangle waveform); 1 level takes 1024 samples */
+	OPLs->lfo_pm_inc = (UINT32)((1.0 / 1024.0) * (1<<LFO_SH) * OPL->freqbase);
+
+	/* Noise generator: a step takes 1 sample */
+	OPLs->noise_f = (UINT32)((1.0 / 1.0) * (1<<FREQ_SH) * OPL->freqbase);
+
+	OPLs->eg_timer_add  = (UINT32)((1<<EG_SH)  * OPL->freqbase);
+	OPLs->eg_timer_overflow = ( 1 ) * (1<<EG_SH);
+
+}
+
+/* write a value v to register r on OPL chip */
+static void OPLWriteReg(FM_OPLlite *OPL, int r, int v)
+{
+	/* adjust bus to 8 bits */
+	r &= 0xff;
+	v &= 0xff;
+
+	switch(r&0xe0)
+	{
+	case 0x00:	/* 00-1f:control */
+		switch(r&0x1f)
+		{
+		case 0x01:	/* waveform select enable */
+			break;
+		case 0x02:	/* Timer 1 */
+			OPL->T[0] = (256-v)*4;
+			break;
+		case 0x03:	/* Timer 2 */
+			OPL->T[1] = (256-v)*16;
+			break;
+		case 0x04:	/* IRQ clear / mask and Timer enable */
+			if(v&0x80)
+			{	/* IRQ flag clear */
+				OPL_STATUS_RESET(OPL,0x7f);
+			}
+			else
+			{	/* set IRQ mask ,timer enable*/
+				OPL->st[0] = v&1;
+				OPL->st[1] = (v>>1)&1;
+
+				/* IRQRST,T1MSK,t2MSK,EOSMSK,BRMSK,x,ST2,ST1 */
+				OPL_STATUS_RESET(OPL, v & 0x78 );
+				OPL_STATUSMASK_SET(OPL, (~v) & 0x78 );
+
+				/* timer 1 */
+				if(OPL->st[0])
+				{
+					OPL->TC[0]=OPL->T[0]*20;
+					double interval = (double)OPL->T[0]*OPL->TimerBase;
+					if (OPL->TimerHandler) (OPL->TimerHandler)(OPL->TimerParam+0,interval);
+				}
+				/* timer 2 */
+				if(OPL->st[1])
+				{
+					OPL->TC[1]=OPL->T[1]*20;
+					double interval =(double)OPL->T[1]*OPL->TimerBase;
+					if (OPL->TimerHandler) (OPL->TimerHandler)(OPL->TimerParam+1,interval);
+				}
+			}
+			break;
+		case 0x08:	/* MODE,DELTA-T control 2 : CSM,NOTESEL,x,x,smpl,da/ad,64k,rom */
+			OPL->mode = v;
+			break;
+
+		default:
+			//logerror("FMOPL.C: write to unknown register: %02x\n",r);
+			break;
+		}
+		break;
+	case 0x20:	/* am ON, vib ON, ksr, eg_type, mul */
+		break;
+	case 0x40:
+		break;
+	case 0x60:
+		break;
+	case 0x80:
+		break;
+	case 0xa0:
+		break;
+	case 0xc0:
+		break;
+	case 0xe0: /* waveform select */
+		break;
+	}
+}
+
+static void OPLResetChip(FM_OPLlite *OPL)
+{
+	int c,s;
+	int i;
+
+	OPL->mode   = 0;	/* normal mode */
+	OPL_STATUS_RESET(OPL,0x7f);
+
+	/* reset with register write */
+	OPLWriteReg(OPL,0x01,0); /* wavesel disable */
+	OPLWriteReg(OPL,0x02,0); /* Timer1 */
+	OPLWriteReg(OPL,0x03,0); /* Timer2 */
+	OPLWriteReg(OPL,0x04,0); /* IRQ mask clear */
+	for(i = 0xff ; i >= 0x20 ; i-- ) OPLWriteReg(OPL,i,0);
+}
+
+/* Create one of virtual YM3812/YM3526/Y8950 */
+/* 'clock' is chip clock in Hz  */
+/* 'rate'  is sampling rate  */
+void OPLCreate(int type, int clock, int rate, FM_OPLlite* OPL, FM_OPL* OPLs)
+{
+	OPL->type  = type;
+	OPL->clock = clock;
+	OPL->rate  = rate;
+
+	/* init global tables */
+	OPL_initalize(OPL,OPLs);
+}
+
+/* Destroy one of virtual YM3812 */
+static void OPLDestroy(FM_OPLlite *OPL)
+{
+	free(OPL);
+}
+
+/* Optional handlers */
+
+static void OPLSetTimerHandler(FM_OPLlite *OPL,OPL_TIMERHANDLER TimerHandler,int channelOffset)
+{
+	OPL->TimerHandler = TimerHandler;
+	OPL->TimerParam   = channelOffset;
+}
+static void OPLSetIRQHandler(FM_OPLlite *OPL,OPL_IRQHANDLER IRQHandler,int param)
+{
+	OPL->IRQHandler = IRQHandler;
+	OPL->IRQParam   = param;
+}
+static void OPLSetUpdateHandler(FM_OPLlite *OPL,OPL_UPDATEHANDLER UpdateHandler,int param)
+{
+	OPL->UpdateHandler = UpdateHandler;
+	OPL->UpdateParam   = param;
+}
+
+static int OPLWrite(FM_OPLlite *OPL,int a,int v)
+{
+	if( !(a&1) )
+	{	/* address port */
+		OPL->address = v & 0xff;
+	}
+	else
+	{	/* data port */
+		if(OPL->UpdateHandler) OPL->UpdateHandler(OPL->UpdateParam,0);
+		OPLWriteReg(OPL,OPL->address,v);
+	}
+	return OPL->status>>7;
+}
+
+static unsigned char OPLRead(FM_OPLlite *OPL,int a)
+{
+	if( !(a&1) )
+	{
+		/* status port */
+
+		if (OPL->st[0]) {
+			if (OPL->TC[0]) OPL->TC[0]--;
+			else {
+				OPL->TC[0]=OPL->T[0]*20;
+				OPL_STATUS_SET(OPL,0x40);
+			}
+		}
+		if (OPL->st[1]) {
+			if (OPL->TC[1]) OPL->TC[1]--;
+			else {
+				OPL->TC[1]=OPL->T[1]*20;
+				OPL_STATUS_SET(OPL,0x40);
+			}
+		}
+		return OPL->status & (OPL->statusmask|0x80);
+	}
+	return 0xff;
+}
+
+static int OPLTimerOver(FM_OPLlite *OPL,int c)
+{
+	if( c )
+	{	/* Timer B */
+		OPL_STATUS_SET(OPL,0x20);
+	}
+	else
+	{	/* Timer A */
+		OPL_STATUS_SET(OPL,0x40);
+		/* CSM mode key,TL controll */
+		if( OPL->mode & 0x80 )
+		{	/* CSM mode total level latch and auto key on */
+			int ch;
+			if(OPL->UpdateHandler) OPL->UpdateHandler(OPL->UpdateParam,0);
+		}
+	}
+	return OPL->status>>7;
+}
+
+
+#define MAX_OPL_CHIPS 2
+
+#if (BUILD_YM3812)
+
+static FM_OPLlite *OPLlite_YM3812[MAX_OPL_CHIPS];
+
+extern "C" {
+	static int Status940=0;
+	static int g_hMemory=0;
+	static volatile unsigned short *g_pusRegs;
+	static unsigned char *g_pSharedMemory = 0;
+	void UpdateThreadEntry(void);
+	void Pause940(int n);
+	void Reset940(int yes);
+	void Startup940();
+	void Shutdown940();
+	void CleanUp(void);
+	void InitSharedMemory();
+}
+
+void Pause940(int n)
+{
+	if(n)
+		g_pusRegs[0x0904>>1] &= 0xFFFE;
+	else
+		g_pusRegs[0x0904>>1] |= 1;
+}
+
+void Reset940(int yes)
+{
+	g_pusRegs[0x3B48>>1] = ((yes&1) << 7) | (0x03);
+}
+
+void Startup940()
+{
+	int nLen, nRead;
+	FILE *fp;
+	unsigned char ucData[1000];
+
+	Reset940(1);
+	Pause940(1);
+	g_pusRegs[0x3B40>>1] = 0;
+	g_pusRegs[0x3B42>>1] = 0;
+	g_pusRegs[0x3B44>>1] = 0xffff;
+	g_pusRegs[0x3B46>>1] = 0xffff;
+
+	// load code940.bin
+	nLen = 0;
+	fp = fopen("code940.bin", "r");
+	if(!fp) {
+		LOG_MSG("no 940 core found\n");
+		return;
+	} else
+	{
+		LOG_MSG("940 core found\n");
+	}
+	while(1)
+	{
+		nRead = fread(ucData, 1, 1000, fp);
+		if(nRead <= 0)
+			break;
+		memcpy(g_pSharedMemory + nLen, ucData, nRead);
+		nLen += nRead;
+	}
+	fclose(fp);
+
+	Reset940(0);
+	Pause940(0);
+
+	usleep(10000);
+}
+
+void Shutdown940()
+{
+	Reset940(1);
+	Pause940(1);
+}
+
+void CleanUp(void)
+{
+	Status940--;
+	//if(Status940>0) return;
+
+	//if(g_pSharedMemory)
+	//	munmap(g_pSharedMemory, 0xF80000);
+	g_pSharedMemory  = 0;
+	Shutdown940();
+	close(g_hMemory);
+	printf("Core shutdown\n");
+}
+
+void InitSharedMemory()
+{
+	if(g_hMemory) return;
+	LOG_MSG("Once?\n");
+	g_hMemory = open("/dev/mem", O_RDWR);
+	g_pusRegs = (unsigned short *) mmap(0, 0x10000,
+			PROT_READ|PROT_WRITE, MAP_SHARED, g_hMemory, 0xc0000000);
+
+	g_pSharedMemory = (unsigned char *) mmap(0, 0xF80000,
+			PROT_READ|PROT_WRITE, MAP_SHARED, g_hMemory, 0x3000000);
+	memset(g_pSharedMemory,0,0x400000);
+}
+
+void UpdateThreadEntry(void)
+{
+	Status940++;
+	if(Status940==1) Startup940();
+}
+
+static void InitMemory()
+{
+	SharedBuff_ptr = (char *) (g_pSharedMemory + BUFF_BASE_ADDRESS);
+	SharedData_ptr = (char *) (g_pSharedMemory + DATA_BASE_ADDRESS);
+	memset(SharedBuff_ptr,0, END_OFFSET);
+	memset(SharedData_ptr,0, END_OFFSET2);
+}
+
+int YM3812Init(int num, int clock, int rate)
+{
+	int i;
+	char *ptr;
+
+	if (YM3812NumChips)
+		return -1;	/* duplicate init. */
+
+	if(END_OFFSET>OPL2_MSG_SIZE ||
+			END_OFFSET2>OPL2_DAT_SIZE) {
+		LOG_MSG("OPL2 memory data error\n");
+		return -1;
+	}
+
+	InitSharedMemory();
+	InitMemory();
+
+	LOG_MSG("OPL2 reports\n");
+	LOG_MSG("OPL2 mem: %d %d %d %d\n", sizeof(OPL_SLOT),
+		sizeof(OPL_CH),sizeof(FM_OPL),OPL_SIZE);
+
+
+	ptr=(SharedData_ptr + NUMCHIP_OFFSET);
+	YM3812NumChips=(int *) ptr;
+	*YM3812NumChips = num;
+
+	ptr=(SharedBuff_ptr + NSUB_OFFSET);
+	NSubmittedMessages=(int *) ptr;
+	*NSubmittedMessages=-1;
+
+	ptr=(SharedBuff_ptr + NEX_OFFSET);
+	NExecutedMessages=(int *) ptr;
+	*NExecutedMessages=-1;
+
+	ptr=(SharedBuff_ptr + MSG_BUF_OFFSET);
+	MessageBuffer=(CoreMessage *) ptr;
+
+	ptr=(SharedBuff_ptr + TL_TAB_OFFSET);
+	tl_tab=(signed int *) ptr;
+	ptr=(SharedBuff_ptr + SIN_TAB_OFFSET);
+	sin_tab=(unsigned int *) ptr;
+
+	init_tables();
+
+	for (i = 0;i < *YM3812NumChips; i++)
+	{
+		ptr=(SharedBuff_ptr + BUFPOS_OFFSET+ i*sizeof(int));
+		BufWritePos[i]=(int *) ptr;
+		*BufWritePos[i]=0;
+
+		ptr=(SharedBuff_ptr + READPOS_OFFSET +i*sizeof(int));
+		BufReadPos[i]=(int *) ptr;
+		*BufReadPos[i]=0;
+
+		ptr=(SharedBuff_ptr + DATA_OFFSET + i * SHARED_BUF_SIZE * sizeof(INT16));
+		SharedBuffer[i]=(INT16 *) ptr;
+
+		ptr=(SharedData_ptr + OPL_OFFSET + i*OPL_SIZE);
+		OPL_YM3812[i] = (FM_OPL*) ptr;
+
+		ptr = (char *) malloc(sizeof(FM_OPLlite));
+		memset(ptr , 0, sizeof(FM_OPLlite));
+		OPLlite_YM3812[i] = (FM_OPLlite *) ptr;
+
+		ptr=(SharedBuff_ptr + FNTAB_OFFSET+i*1024*sizeof(UINT32));
+		OPLlite_YM3812[i]->fn_tab=(UINT32 *) ptr;
+
+		OPLCreate(OPL_TYPE_YM3812,clock,rate,OPLlite_YM3812[i],OPL_YM3812[i]);
+	}
+
+	UpdateThreadEntry();
+
+	ADD_MESSAGE(INIT ,num ,clock ,rate );
+
+	for (i = 0;i < *YM3812NumChips; i++)
+	{
+		YM3812ResetChip(i);
+	}
+
+
+	return 0;
+}
+
+void YM3812Shutdown(void)
+{
+	int i;
+
+	LOG_MSG("OPL2 ...\n");
+	ADD_MESSAGE(SHUTDOWN,0,0,0);
+	WAIT_FOR_SYNC;
+	LOG_MSG("OPL2 end\n");
+	for (i = 0;i < *YM3812NumChips; i++)
+	{
+		/* emulator shutdown */
+		OPLDestroy(OPLlite_YM3812[i]);
+		OPL_YM3812[i] = NULL;
+		OPLlite_YM3812[i] = NULL;
+	}
+	*YM3812NumChips = 0;
+	CleanUp();
+}
+void YM3812ResetChip(int which)
+{
+	ADD_MESSAGE(RESET,which,0,0);
+	OPLResetChip(OPLlite_YM3812[which]);
+}
+
+int YM3812Write(int which, int a, int v)
+{
+	ADD_MESSAGE(WRITE,which,0,a);
+	ADD_MESSAGE(WRITE,which,1,v);
+	OPLWriteReg(OPLlite_YM3812[which], a, v);
+	return (OPLlite_YM3812[which]->status>>7);
+}
+
+unsigned char YM3812Read(int which, int a)
+{
+	ADD_MESSAGE(READ,which,a,0);
+	/* YM3812 always returns bit2 and bit1 in HIGH state */
+	return OPLRead(OPLlite_YM3812[which], a) | 0x06 ;
+}
+
+int YM3812TimerOver(int which, int c)
+{
+	ADD_MESSAGE(TIMEROVER,which,c,0);
+	return OPLTimerOver(OPLlite_YM3812[which], c);
+}
+
+void YM3812SetTimerHandler(int which, OPL_TIMERHANDLER TimerHandler, int channelOffset)
+{
+	OPLSetTimerHandler(OPLlite_YM3812[which], TimerHandler, channelOffset);
+}
+void YM3812SetIRQHandler(int which,OPL_IRQHANDLER IRQHandler,int param)
+{
+	OPLSetIRQHandler(OPLlite_YM3812[which], IRQHandler, param);
+}
+void YM3812SetUpdateHandler(int which,OPL_UPDATEHANDLER UpdateHandler,int param)
+{
+	OPLSetUpdateHandler(OPLlite_YM3812[which], UpdateHandler, param);
+}
+
+void YM3812UpdateOne(int which, INT16 *buffer, int length)
+{
+	int i,ncopy,nfree,nbuff,d,bufpos;
+	INT16 lt;
+	static int warn=1;
+
+	d=*NSubmittedMessages-*NExecutedMessages;
+	if(warn && d>MSG_BUF_SIZE)
+	{
+		LOG_MSG("OPL2: buffer running full");
+		warn=0;
+	}
+	else
+	{
+		if(d<MSG_BUF_SIZE) warn=1;
+	}
+
+	bufpos=*BufReadPos[which];
+	d=*BufWritePos[which]- bufpos;
+	nbuff=WRAPPED(d,SHARED_BUF_SIZE);
+	ncopy=MIN(length, nbuff);
+	nfree=SHARED_BUF_SIZE - bufpos;
+	if(ncopy < nfree)
+	{
+		for(i=0;i<ncopy;i++)
+		{
+			lt=Amp( SharedBuffer[which][ bufpos+i ] );
+
+			buffer[2*i]=lt;
+			buffer[2*i+1]=lt; //for stereo
+		}
+		(*BufReadPos[which])+=ncopy;
+	}
+	else
+	{
+		for(i=0;i<nfree;i++)
+		{
+			lt=Amp( SharedBuffer[which][ bufpos+i ] );
+			buffer[2*i]=lt;
+			buffer[2*i+1]=lt;
+		}
+
+		for(i=0;i<ncopy-nfree;i++)
+		{
+			lt=Amp( SharedBuffer[which][i] );
+			buffer[2*i+2*nfree]=lt;
+			buffer[2*i+2*nfree+1]=lt;
+		}
+		*BufReadPos[which]=ncopy-nfree;
+	}
+
+	if(ncopy < length)
+	{
+		bufpos=*BufReadPos[which];
+		lt=Amp( SharedBuffer[which][WRAPPED(bufpos-1,SHARED_BUF_SIZE)] );
+		for(i=ncopy;i<length;i++)
+		{
+			buffer[2*i]=lt;
+			buffer[2*i+1]=lt;
+		}
+	}
+
+	ADD_MESSAGE(UPDATE, which, length, 0);
+}
+
+INT16 Amp( INT16 value )
+{
+	INT32 temp;
+	int offset = 2;
+
+	temp = value;
+	temp <<= offset;
+
+	if( temp > MAXOUT ) temp = MAXOUT;
+	if( temp < MINOUT ) temp = MINOUT;
+
+	return (INT16)temp;
+}
+
+#endif /* BUILD_YM3812 */
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl.h wolf4sdl/GP2X/fmopl.h
--- Wolf4SDL-1.6-src/GP2X/fmopl.h	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl.h	2011-04-27 19:58:18.541203098 +0200
@@ -0,0 +1,58 @@
+#ifndef __FMOPL_H_
+#define __FMOPL_H_
+
+#define HAS_YM3812 1
+
+/* --- select emulation chips --- */
+#define BUILD_YM3812 (HAS_YM3812)
+#define BUILD_YM3526 (HAS_YM3526)
+#define BUILD_Y8950  (HAS_Y8950)
+
+/* select output bits size of output : 8 or 16 */
+#define OPL_SAMPLE_BITS 16
+
+/* compiler dependence */
+#ifndef OSD_CPU_H
+#define OSD_CPU_H
+typedef unsigned char  UINT8;   /* unsigned  8bit */
+typedef unsigned short UINT16;  /* unsigned 16bit */
+typedef unsigned int   UINT32;  /* unsigned 32bit */
+typedef signed char    INT8;    /* signed  8bit   */
+typedef signed short   INT16;   /* signed 16bit   */
+typedef signed int     INT32;   /* signed 32bit   */
+#endif
+
+#if (OPL_SAMPLE_BITS==16)
+typedef INT16 OPLSAMPLE;
+#endif
+#if (OPL_SAMPLE_BITS==8)
+typedef INT8 OPLSAMPLE;
+#endif
+
+
+typedef void (*OPL_TIMERHANDLER)(int channel,double interval_Sec);
+typedef void (*OPL_IRQHANDLER)(int param,int irq);
+typedef void (*OPL_UPDATEHANDLER)(int param,int min_interval_us);
+typedef void (*OPL_PORTHANDLER_W)(int param,unsigned char data);
+typedef unsigned char (*OPL_PORTHANDLER_R)(int param);
+
+
+#if BUILD_YM3812
+
+int  YM3812Init(int num, int clock, int rate);
+void YM3812Shutdown(void);
+void YM3812ResetChip(int which);
+int  YM3812Write(int which, int a, int v);
+unsigned char YM3812Read(int which, int a);
+int  YM3812TimerOver(int which, int c);
+void YM3812UpdateOne(int which, INT16 *buffer, int length);
+
+void YM3812SetTimerHandler(int which, OPL_TIMERHANDLER TimerHandler, int channelOffset);
+void YM3812SetIRQHandler(int which, OPL_IRQHANDLER IRQHandler, int param);
+void YM3812SetUpdateHandler(int which, OPL_UPDATEHANDLER UpdateHandler, int param);
+
+INT16 Amp( INT16 );
+
+#endif
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl_940/Makefile wolf4sdl/GP2X/fmopl_940/Makefile
--- Wolf4SDL-1.6-src/GP2X/fmopl_940/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl_940/Makefile	2011-04-27 19:58:18.541203098 +0200
@@ -0,0 +1,27 @@
+
+CROSS_COMPILE = /mythtv/media/devel/toolchains/open2x/gcc-4.1.1-glibc-2.3.6/bin/arm-open2x-linux-
+LDFLAGS = -static
+
+CXX = $(CROSS_COMPILE)gcc
+CPP = $(CROSS_COMPILE)g++
+LD = $(CROSS_COMPILE)ld
+STRIP = $(CROSS_COMPILE)strip
+
+CXXFLAGS = -I/opt/open2x/gcc-4.1.1-glibc-2.3.6/include -Wall -Werror -Os -fomit-frame-pointer
+LIBS = -L/opt/open2x/gcc-4.1.1-glibc-2.3.6/lib
+
+CODE940_TARGET = code940.gpe
+CODE940_OBJS = main.o fmopl_core.o
+
+all : $(CODE940_TARGET)
+
+$(CODE940_TARGET) : $(CODE940_OBJS)
+	$(LD) -marmelf -e code940 -Ttext 0x0 $(CODE940_OBJS)  -o $(CODE940_TARGET)
+	$(CROSS_COMPILE)objcopy -O binary code940.gpe code940.bin
+	ls -l code940.bin
+
+main.o: main.c
+	$(CXX) $(CXXFLAGS) -O0 -c main.c
+
+fmopl_core.o: fmopl_core.c fmopl_core.h fmopl_shared.h memory_layout.h
+	$(CPP) $(CXXFLAGS) -Os -c fmopl_core.c
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl_940/fmopl_core.c wolf4sdl/GP2X/fmopl_940/fmopl_core.c
--- Wolf4SDL-1.6-src/GP2X/fmopl_940/fmopl_core.c	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl_940/fmopl_core.c	2011-04-27 19:58:18.542203098 +0200
@@ -0,0 +1,1532 @@
+#include "fmopl_core.h"
+#include "fmopl_shared.h"
+
+#define INLINE static
+#define NOINLINE
+
+/* output final shift */
+#if (OPL_SAMPLE_BITS==16)
+	#define FINAL_SH	(0)
+	#define MAXOUT		(+32767)
+	#define MINOUT		(-32768)
+#else
+	#define FINAL_SH	(8)
+	#define MAXOUT		(+127)
+	#define MINOUT		(-128)
+#endif
+
+
+#define FREQ_SH			16  /* 16.16 fixed point (frequency calculations) */
+#define EG_SH			16  /* 16.16 fixed point (EG timing)              */
+#define LFO_SH			24  /*  8.24 fixed point (LFO calculations)       */
+#define TIMER_SH		16  /* 16.16 fixed point (timers calculations)    */
+
+#define FREQ_MASK		((1<<FREQ_SH)-1)
+
+/* envelope output entries */
+#define ENV_BITS		10
+#define ENV_LEN			(1<<ENV_BITS)
+#define ENV_STEP		(128.0/ENV_LEN)
+
+#define MAX_ATT_INDEX	((1<<(ENV_BITS-1))-1) /*511*/
+#define MIN_ATT_INDEX	(0)
+
+/* register number to channel number , slot offset */
+#define SLOT1 0
+#define SLOT2 1
+
+/* Envelope Generator phases */
+
+#define EG_ATT			4
+#define EG_DEC			3
+#define EG_SUS			2
+#define EG_REL			1
+#define EG_OFF			0
+
+
+#define OPL_TYPE_WAVESEL   0x01  /* waveform select		*/
+#define OPL_TYPE_ADPCM     0x02  /* DELTA-T ADPCM unit	*/
+#define OPL_TYPE_KEYBOARD  0x04  /* keyboard interface	*/
+#define OPL_TYPE_IO        0x08  /* I/O port			*/
+
+/* ---------- Generic interface section ---------- */
+#define OPL_TYPE_YM3526 (0)
+#define OPL_TYPE_YM3812 (OPL_TYPE_WAVESEL)
+#define OPL_TYPE_Y8950  (OPL_TYPE_ADPCM|OPL_TYPE_KEYBOARD|OPL_TYPE_IO)
+
+/* mapping of register number (offset) to slot number used by the emulator */
+static const int slot_array[32]=
+{
+	 0, 2, 4, 1, 3, 5,-1,-1,
+	 6, 8,10, 7, 9,11,-1,-1,
+	12,14,16,13,15,17,-1,-1,
+	-1,-1,-1,-1,-1,-1,-1,-1
+};
+
+/* key scale level */
+/* table is 3dB/octave , DV converts this into 6dB/octave */
+/* 0.1875 is bit 0 weight of the envelope counter (volume) expressed in the 'decibel' scale */
+#define SC(x) ((UINT32)((x)/(0.1875/2.0)))
+static const UINT32 ksl_tab[8*16]=
+{
+	/* OCT 0 */
+	 SC(0.000), SC(0.000), SC(0.000), SC(0.000),
+	 SC(0.000), SC(0.000), SC(0.000), SC(0.000),
+	 SC(0.000), SC(0.000), SC(0.000), SC(0.000),
+	 SC(0.000), SC(0.000), SC(0.000), SC(0.000),
+	/* OCT 1 */
+	 SC(0.000), SC(0.000), SC(0.000), SC(0.000),
+	 SC(0.000), SC(0.000), SC(0.000), SC(0.000),
+	 SC(0.000), SC(0.750), SC(1.125), SC(1.500),
+	 SC(1.875), SC(2.250), SC(2.625), SC(3.000),
+	/* OCT 2 */
+	 SC(0.000), SC(0.000), SC(0.000), SC(0.000),
+	 SC(0.000), SC(1.125), SC(1.875), SC(2.625),
+	 SC(3.000), SC(3.750), SC(4.125), SC(4.500),
+	 SC(4.875), SC(5.250), SC(5.625), SC(6.000),
+	/* OCT 3 */
+	 SC(0.000), SC(0.000), SC(0.000), SC(1.875),
+	 SC(3.000), SC(4.125), SC(4.875), SC(5.625),
+	 SC(6.000), SC(6.750), SC(7.125), SC(7.500),
+	 SC(7.875), SC(8.250), SC(8.625), SC(9.000),
+	/* OCT 4 */
+	 SC(0.000), SC(0.000), SC(3.000), SC(4.875),
+	 SC(6.000), SC(7.125), SC(7.875), SC(8.625),
+	 SC(9.000), SC(9.750),SC(10.125),SC(10.500),
+	SC(10.875),SC(11.250),SC(11.625),SC(12.000),
+	/* OCT 5 */
+	 SC(0.000), SC(3.000), SC(6.000), SC(7.875),
+	 SC(9.000),SC(10.125),SC(10.875),SC(11.625),
+	SC(12.000),SC(12.750),SC(13.125),SC(13.500),
+	SC(13.875),SC(14.250),SC(14.625),SC(15.000),
+	/* OCT 6 */
+	 SC(0.000), SC(6.000), SC(9.000),SC(10.875),
+	SC(12.000),SC(13.125),SC(13.875),SC(14.625),
+	SC(15.000),SC(15.750),SC(16.125),SC(16.500),
+	SC(16.875),SC(17.250),SC(17.625),SC(18.000),
+	/* OCT 7 */
+	 SC(0.000), SC(9.000),SC(12.000),SC(13.875),
+	SC(15.000),SC(16.125),SC(16.875),SC(17.625),
+	SC(18.000),SC(18.750),SC(19.125),SC(19.500),
+	SC(19.875),SC(20.250),SC(20.625),SC(21.000)
+};
+#undef SC
+
+/* sustain level table (3dB per step) */
+/* 0 - 15: 0, 3, 6, 9,12,15,18,21,24,27,30,33,36,39,42,93 (dB)*/
+#define SC(db) (UINT32) ( db * (2.0/ENV_STEP) )
+static const UINT32 sl_tab[16]={
+ SC( 0),SC( 1),SC( 2),SC(3 ),SC(4 ),SC(5 ),SC(6 ),SC( 7),
+ SC( 8),SC( 9),SC(10),SC(11),SC(12),SC(13),SC(14),SC(31)
+};
+#undef SC
+
+#define RATE_STEPS (8)
+static const unsigned char eg_inc[15*RATE_STEPS]={
+
+/*cycle:0 1  2 3  4 5  6 7*/
+
+/* 0 */ 0,1, 0,1, 0,1, 0,1, /* rates 00..12 0 (increment by 0 or 1) */
+/* 1 */ 0,1, 0,1, 1,1, 0,1, /* rates 00..12 1 */
+/* 2 */ 0,1, 1,1, 0,1, 1,1, /* rates 00..12 2 */
+/* 3 */ 0,1, 1,1, 1,1, 1,1, /* rates 00..12 3 */
+
+/* 4 */ 1,1, 1,1, 1,1, 1,1, /* rate 13 0 (increment by 1) */
+/* 5 */ 1,1, 1,2, 1,1, 1,2, /* rate 13 1 */
+/* 6 */ 1,2, 1,2, 1,2, 1,2, /* rate 13 2 */
+/* 7 */ 1,2, 2,2, 1,2, 2,2, /* rate 13 3 */
+
+/* 8 */ 2,2, 2,2, 2,2, 2,2, /* rate 14 0 (increment by 2) */
+/* 9 */ 2,2, 2,4, 2,2, 2,4, /* rate 14 1 */
+/*10 */ 2,4, 2,4, 2,4, 2,4, /* rate 14 2 */
+/*11 */ 2,4, 4,4, 2,4, 4,4, /* rate 14 3 */
+
+/*12 */ 4,4, 4,4, 4,4, 4,4, /* rates 15 0, 15 1, 15 2, 15 3 (increment by 4) */
+/*13 */ 8,8, 8,8, 8,8, 8,8, /* rates 15 2, 15 3 for attack */
+/*14 */ 0,0, 0,0, 0,0, 0,0, /* infinity rates for attack and decay(s) */
+};
+
+
+#define O(a) (a*RATE_STEPS)
+
+/*note that there is no O(13) in this table - it's directly in the code */
+static const unsigned char eg_rate_select[16+64+16]={	/* Envelope Generator rates (16 + 64 rates + 16 RKS) */
+/* 16 infinite time rates */
+O(14),O(14),O(14),O(14),O(14),O(14),O(14),O(14),
+O(14),O(14),O(14),O(14),O(14),O(14),O(14),O(14),
+
+/* rates 00-12 */
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+O( 0),O( 1),O( 2),O( 3),
+
+/* rate 13 */
+O( 4),O( 5),O( 6),O( 7),
+
+/* rate 14 */
+O( 8),O( 9),O(10),O(11),
+
+/* rate 15 */
+O(12),O(12),O(12),O(12),
+
+/* 16 dummy rates (same as 15 3) */
+O(12),O(12),O(12),O(12),O(12),O(12),O(12),O(12),
+O(12),O(12),O(12),O(12),O(12),O(12),O(12),O(12),
+
+};
+#undef O
+
+/*rate  0,    1,    2,    3,   4,   5,   6,  7,  8,  9,  10, 11, 12, 13, 14, 15 */
+/*shift 12,   11,   10,   9,   8,   7,   6,  5,  4,  3,  2,  1,  0,  0,  0,  0  */
+/*mask  4095, 2047, 1023, 511, 255, 127, 63, 31, 15, 7,  3,  1,  0,  0,  0,  0  */
+
+#define O(a) (a*1)
+static const unsigned char eg_rate_shift[16+64+16]={	/* Envelope Generator counter shifts (16 + 64 rates + 16 RKS) */
+/* 16 infinite time rates */
+O(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0),
+O(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0),
+
+/* rates 00-12 */
+O(12),O(12),O(12),O(12),
+O(11),O(11),O(11),O(11),
+O(10),O(10),O(10),O(10),
+O( 9),O( 9),O( 9),O( 9),
+O( 8),O( 8),O( 8),O( 8),
+O( 7),O( 7),O( 7),O( 7),
+O( 6),O( 6),O( 6),O( 6),
+O( 5),O( 5),O( 5),O( 5),
+O( 4),O( 4),O( 4),O( 4),
+O( 3),O( 3),O( 3),O( 3),
+O( 2),O( 2),O( 2),O( 2),
+O( 1),O( 1),O( 1),O( 1),
+O( 0),O( 0),O( 0),O( 0),
+
+/* rate 13 */
+O( 0),O( 0),O( 0),O( 0),
+
+/* rate 14 */
+O( 0),O( 0),O( 0),O( 0),
+
+/* rate 15 */
+O( 0),O( 0),O( 0),O( 0),
+
+/* 16 dummy rates (same as 15 3) */
+O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),
+O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),
+
+};
+#undef O
+
+/* multiple table */
+#define SC(x) ((UINT32)((x)*2))
+static const UINT8 mul_tab[16]= {
+/* 1/2, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,10,12,12,15,15 */
+   SC(0.50), SC(1.00), SC(2.00), SC(3.00), SC(4.00), SC(5.00), SC(6.00), SC(7.00),
+   SC(8.00), SC(9.00),SC(10.00),SC(10.00),SC(12.00),SC(12.00),SC(15.00),SC(15.00)
+};
+#undef SC
+
+#define ENV_QUIET		(TL_TAB_LEN>>4)
+
+/* LFO Amplitude Modulation table (verified on real YM3812)
+   27 output levels (triangle waveform); 1 level takes one of: 192, 256 or 448 samples
+
+   Length: 210 elements.
+
+	Each of the elements has to be repeated
+	exactly 64 times (on 64 consecutive samples).
+	The whole table takes: 64 * 210 = 13440 samples.
+
+	When AM = 1 data is used directly
+	When AM = 0 data is divided by 4 before being used (loosing precision is important)
+*/
+
+#define LFO_AM_TAB_ELEMENTS 210
+
+static const UINT8 lfo_am_table[LFO_AM_TAB_ELEMENTS] = {
+0,0,0,0,0,0,0,
+1,1,1,1,
+2,2,2,2,
+3,3,3,3,
+4,4,4,4,
+5,5,5,5,
+6,6,6,6,
+7,7,7,7,
+8,8,8,8,
+9,9,9,9,
+10,10,10,10,
+11,11,11,11,
+12,12,12,12,
+13,13,13,13,
+14,14,14,14,
+15,15,15,15,
+16,16,16,16,
+17,17,17,17,
+18,18,18,18,
+19,19,19,19,
+20,20,20,20,
+21,21,21,21,
+22,22,22,22,
+23,23,23,23,
+24,24,24,24,
+25,25,25,25,
+26,26,26,
+25,25,25,25,
+24,24,24,24,
+23,23,23,23,
+22,22,22,22,
+21,21,21,21,
+20,20,20,20,
+19,19,19,19,
+18,18,18,18,
+17,17,17,17,
+16,16,16,16,
+15,15,15,15,
+14,14,14,14,
+13,13,13,13,
+12,12,12,12,
+11,11,11,11,
+10,10,10,10,
+9,9,9,9,
+8,8,8,8,
+7,7,7,7,
+6,6,6,6,
+5,5,5,5,
+4,4,4,4,
+3,3,3,3,
+2,2,2,2,
+1,1,1,1
+};
+
+/* LFO Phase Modulation table (verified on real YM3812) */
+static const INT8 lfo_pm_table[8*8*2] = {
+
+/* FNUM2/FNUM = 00 0xxxxxxx (0x0000) */
+0, 0, 0, 0, 0, 0, 0, 0,	/*LFO PM depth = 0*/
+0, 0, 0, 0, 0, 0, 0, 0,	/*LFO PM depth = 1*/
+
+/* FNUM2/FNUM = 00 1xxxxxxx (0x0080) */
+0, 0, 0, 0, 0, 0, 0, 0,	/*LFO PM depth = 0*/
+1, 0, 0, 0,-1, 0, 0, 0,	/*LFO PM depth = 1*/
+
+/* FNUM2/FNUM = 01 0xxxxxxx (0x0100) */
+1, 0, 0, 0,-1, 0, 0, 0,	/*LFO PM depth = 0*/
+2, 1, 0,-1,-2,-1, 0, 1,	/*LFO PM depth = 1*/
+
+/* FNUM2/FNUM = 01 1xxxxxxx (0x0180) */
+1, 0, 0, 0,-1, 0, 0, 0,	/*LFO PM depth = 0*/
+3, 1, 0,-1,-3,-1, 0, 1,	/*LFO PM depth = 1*/
+
+/* FNUM2/FNUM = 10 0xxxxxxx (0x0200) */
+2, 1, 0,-1,-2,-1, 0, 1,	/*LFO PM depth = 0*/
+4, 2, 0,-2,-4,-2, 0, 2,	/*LFO PM depth = 1*/
+
+/* FNUM2/FNUM = 10 1xxxxxxx (0x0280) */
+2, 1, 0,-1,-2,-1, 0, 1,	/*LFO PM depth = 0*/
+5, 2, 0,-2,-5,-2, 0, 2,	/*LFO PM depth = 1*/
+
+/* FNUM2/FNUM = 11 0xxxxxxx (0x0300) */
+3, 1, 0,-1,-3,-1, 0, 1,	/*LFO PM depth = 0*/
+6, 3, 0,-3,-6,-3, 0, 3,	/*LFO PM depth = 1*/
+
+/* FNUM2/FNUM = 11 1xxxxxxx (0x0380) */
+3, 1, 0,-1,-3,-1, 0, 1,	/*LFO PM depth = 0*/
+7, 3, 0,-3,-7,-3, 0, 3	/*LFO PM depth = 1*/
+};
+
+static int cur_chip = -1;	/* current chip pointer */
+static OPL_SLOT *SLOT7_1, *SLOT7_2, *SLOT8_1, *SLOT8_2;
+
+static signed int phase_modulation[1];	/* phase modulation input (SLOT 2) */
+static signed int output[1];
+
+static UINT32	LFO_AM;
+static INT32	LFO_PM;
+
+INLINE int limit( int val, int max, int min ) {
+	if ( val > max )
+		val = max;
+	else if ( val < min )
+		val = min;
+
+	return val;
+}
+
+
+/* status set and IRQ handling */
+INLINE void OPL_STATUS_SET(FM_OPL *OPL,int flag)
+{
+	/* set status flag */
+	OPL->status |= flag;
+	if(!(OPL->status & 0x80))
+	{
+		if(OPL->status & OPL->statusmask)
+		{	/* IRQ on */
+			OPL->status |= 0x80;
+			/* callback user interrupt handler (IRQ is OFF to ON) */
+		}
+	}
+}
+
+/* status reset and IRQ handling */
+INLINE void OPL_STATUS_RESET(FM_OPL *OPL,int flag)
+{
+	/* reset status flag */
+	OPL->status &=~flag;
+	if((OPL->status & 0x80))
+	{
+		if (!(OPL->status & OPL->statusmask) )
+		{
+			OPL->status &= 0x7f;
+			/* callback user interrupt handler (IRQ is ON to OFF) */
+		}
+	}
+}
+
+/* IRQ mask set */
+INLINE void OPL_STATUSMASK_SET(FM_OPL *OPL,int flag)
+{
+	OPL->statusmask = flag;
+	/* IRQ handling check */
+	OPL_STATUS_SET(OPL,0);
+	OPL_STATUS_RESET(OPL,0);
+}
+
+/* advance LFO to next sample */
+INLINE void advance_lfo(FM_OPL *OPL)
+{
+	UINT8 tmp;
+
+	/* LFO */
+	OPL->lfo_am_cnt += OPL->lfo_am_inc;
+	if( (int) OPL->lfo_am_cnt >= (LFO_AM_TAB_ELEMENTS<<LFO_SH) )	/* lfo_am_table is 210 elements long */
+		OPL->lfo_am_cnt -= (LFO_AM_TAB_ELEMENTS<<LFO_SH);
+
+	tmp = lfo_am_table[ OPL->lfo_am_cnt >> LFO_SH ];
+
+	if (OPL->lfo_am_depth)
+		LFO_AM = tmp;
+	else
+		LFO_AM = tmp>>2;
+
+	OPL->lfo_pm_cnt += OPL->lfo_pm_inc;
+	LFO_PM = ((OPL->lfo_pm_cnt>>LFO_SH) & 7) | OPL->lfo_pm_depth_range;
+}
+
+/* advance to next sample */
+INLINE void advance(FM_OPL *OPL)
+{
+	OPL_CH *CH;
+	OPL_SLOT *op;
+	int i;
+
+	OPL->eg_timer += OPL->eg_timer_add;
+
+	while (OPL->eg_timer >= OPL->eg_timer_overflow)
+	{
+		OPL->eg_timer -= OPL->eg_timer_overflow;
+
+		OPL->eg_cnt++;
+
+		for (i=0; i<9*2; i++)
+		{
+			CH  = &OPL->P_CH[i/2];
+			op  = &CH->SLOT[i&1];
+
+			/* Envelope Generator */
+			switch(op->state)
+			{
+			case EG_ATT:		/* attack phase */
+				if ( !(OPL->eg_cnt & ((1<<op->eg_sh_ar)-1) ) )
+				{
+					op->volume += (~op->volume *
+	                        		           (eg_inc[op->eg_sel_ar + ((OPL->eg_cnt>>op->eg_sh_ar)&7)])
+        			                          ) >>3;
+
+					if (op->volume <= MIN_ATT_INDEX)
+					{
+						op->volume = MIN_ATT_INDEX;
+						op->state = EG_DEC;
+					}
+
+				}
+			break;
+
+			case EG_DEC:	/* decay phase */
+				if ( !(OPL->eg_cnt & ((1<<op->eg_sh_dr)-1) ) )
+				{
+					op->volume += eg_inc[op->eg_sel_dr + ((OPL->eg_cnt>>op->eg_sh_dr)&7)];
+
+					if ( (UINT32) op->volume >= op->sl )
+						op->state = EG_SUS;
+
+				}
+			break;
+
+			case EG_SUS:	/* sustain phase */
+
+				/* this is important behaviour:
+				one can change percusive/non-percussive modes on the fly and
+				the chip will remain in sustain phase - verified on real YM3812 */
+
+				if(op->eg_type)		/* non-percussive mode */
+				{
+									/* do nothing */
+				}
+				else				/* percussive mode */
+				{
+					/* during sustain phase chip adds Release Rate (in percussive mode) */
+					if ( !(OPL->eg_cnt & ((1<<op->eg_sh_rr)-1) ) )
+					{
+						op->volume += eg_inc[op->eg_sel_rr + ((OPL->eg_cnt>>op->eg_sh_rr)&7)];
+
+						if ( op->volume >= MAX_ATT_INDEX )
+							op->volume = MAX_ATT_INDEX;
+					}
+					/* else do nothing in sustain phase */
+				}
+			break;
+
+			case EG_REL:	/* release phase */
+				if ( !(OPL->eg_cnt & ((1<<op->eg_sh_rr)-1) ) )
+				{
+					op->volume += eg_inc[op->eg_sel_rr + ((OPL->eg_cnt>>op->eg_sh_rr)&7)];
+
+					if ( op->volume >= MAX_ATT_INDEX )
+					{
+						op->volume = MAX_ATT_INDEX;
+						op->state = EG_OFF;
+					}
+
+				}
+			break;
+
+			default:
+			break;
+			}
+		}
+	}
+
+	for (i=0; i<9*2; i++)
+	{
+		CH  = &OPL->P_CH[i/2];
+		op  = &CH->SLOT[i&1];
+
+		/* Phase Generator */
+		if(op->vib)
+		{
+			UINT8 block;
+			unsigned int block_fnum = CH->block_fnum;
+
+			unsigned int fnum_lfo   = (block_fnum&0x0380) >> 7;
+
+			signed int lfo_fn_table_index_offset = lfo_pm_table[LFO_PM + 16*fnum_lfo ];
+
+			if (lfo_fn_table_index_offset)	/* LFO phase modulation active */
+			{
+				block_fnum += lfo_fn_table_index_offset;
+				block = (block_fnum&0x1c00) >> 10;
+				op->Cnt += (OPL->fn_tab[block_fnum&0x03ff] >> (7-block)) * op->mul;
+			}
+			else	/* LFO phase modulation  = zero */
+			{
+				op->Cnt += op->Incr;
+			}
+		}
+		else	/* LFO phase modulation disabled for this operator */
+		{
+			op->Cnt += op->Incr;
+		}
+	}
+
+	/*	The Noise Generator of the YM3812 is 23-bit shift register.
+	*	Period is equal to 2^23-2 samples.
+	*	Register works at sampling frequency of the chip, so output
+	*	can change on every sample.
+	*
+	*	Output of the register and input to the bit 22 is:
+	*	bit0 XOR bit14 XOR bit15 XOR bit22
+	*
+	*	Simply use bit 22 as the noise output.
+	*/
+
+	OPL->noise_p += OPL->noise_f;
+	i = OPL->noise_p >> FREQ_SH;		/* number of events (shifts of the shift register) */
+	OPL->noise_p &= FREQ_MASK;
+	while (i)
+	{
+		/*
+		UINT32 j;
+		j = ( (OPL->noise_rng) ^ (OPL->noise_rng>>14) ^ (OPL->noise_rng>>15) ^ (OPL->noise_rng>>22) ) & 1;
+		OPL->noise_rng = (j<<22) | (OPL->noise_rng>>1);
+		*/
+
+		/*
+			Instead of doing all the logic operations above, we
+			use a trick here (and use bit 0 as the noise output).
+			The difference is only that the noise bit changes one
+			step ahead. This doesn't matter since we don't know
+			what is real state of the noise_rng after the reset.
+		*/
+
+		if (OPL->noise_rng & 1) OPL->noise_rng ^= 0x800302;
+		OPL->noise_rng >>= 1;
+
+		i--;
+	}
+}
+
+
+INLINE signed int op_calc(UINT32 phase, unsigned int env, signed int pm, unsigned int wave_tab)
+{
+	UINT32 p;
+
+	p = (env<<4) + sin_tab[wave_tab + ((((signed int)((phase & ~FREQ_MASK) + (pm<<16))) >> FREQ_SH ) & SIN_MASK) ];
+
+	if (p >= TL_TAB_LEN)
+		return 0;
+	return tl_tab[p];
+}
+
+INLINE signed int op_calc1(UINT32 phase, unsigned int env, signed int pm, unsigned int wave_tab)
+{
+	UINT32 p;
+
+	p = (env<<4) + sin_tab[wave_tab + ((((signed int)((phase & ~FREQ_MASK) + pm      )) >> FREQ_SH ) & SIN_MASK) ];
+
+	if (p >= TL_TAB_LEN)
+		return 0;
+	return tl_tab[p];
+}
+
+
+#define volume_calc(OP) ((OP)->TLL + ((UINT32)(OP)->volume) + (LFO_AM & (OP)->AMmask))
+
+/* calculate output */
+INLINE void OPL_CALC_CH( OPL_CH *CH )
+{
+	OPL_SLOT *SLOT;
+	unsigned int env;
+	signed int out;
+
+	phase_modulation[0] = 0;
+
+	/* SLOT 1 */
+	SLOT = &CH->SLOT[SLOT1];
+	env  = volume_calc(SLOT);
+	out  = SLOT->op1_out[0] + SLOT->op1_out[1];
+	SLOT->op1_out[0] = SLOT->op1_out[1];
+	*SLOT->connect1 += SLOT->op1_out[0];
+	SLOT->op1_out[1] = 0;
+	if( env < ENV_QUIET )
+	{
+		if (!SLOT->FB)
+			out = 0;
+		SLOT->op1_out[1] = op_calc1(SLOT->Cnt, env, (out<<SLOT->FB), SLOT->wavetable );
+	}
+
+	/* SLOT 2 */
+	SLOT++;
+	env = volume_calc(SLOT);
+	if( env < ENV_QUIET )
+		output[0] += op_calc(SLOT->Cnt, env, phase_modulation[0], SLOT->wavetable);
+}
+
+/*
+	operators used in the rhythm sounds generation process:
+
+	Envelope Generator:
+
+channel  operator  register number   Bass  High  Snare Tom  Top
+/ slot   number    TL ARDR SLRR Wave Drum  Hat   Drum  Tom  Cymbal
+ 6 / 0   12        50  70   90   f0  +
+ 6 / 1   15        53  73   93   f3  +
+ 7 / 0   13        51  71   91   f1        +
+ 7 / 1   16        54  74   94   f4              +
+ 8 / 0   14        52  72   92   f2                    +
+ 8 / 1   17        55  75   95   f5                          +
+
+	Phase Generator:
+
+channel  operator  register number   Bass  High  Snare Tom  Top
+/ slot   number    MULTIPLE          Drum  Hat   Drum  Tom  Cymbal
+ 6 / 0   12        30                +
+ 6 / 1   15        33                +
+ 7 / 0   13        31                      +     +           +
+ 7 / 1   16        34                -----  n o t  u s e d -----
+ 8 / 0   14        32                                  +
+ 8 / 1   17        35                      +                 +
+
+channel  operator  register number   Bass  High  Snare Tom  Top
+number   number    BLK/FNUM2 FNUM    Drum  Hat   Drum  Tom  Cymbal
+   6     12,15     B6        A6      +
+
+   7     13,16     B7        A7            +     +           +
+
+   8     14,17     B8        A8            +           +     +
+
+*/
+
+/* calculate rhythm */
+
+INLINE void OPL_CALC_RH( OPL_CH *CH, unsigned int noise )
+{
+	OPL_SLOT *SLOT;
+	signed int out;
+	unsigned int env;
+
+
+	/* Bass Drum (verified on real YM3812):
+	  - depends on the channel 6 'connect' register:
+	      when connect = 0 it works the same as in normal (non-rhythm) mode (op1->op2->out)
+	      when connect = 1 _only_ operator 2 is present on output (op2->out), operator 1 is ignored
+	  - output sample always is multiplied by 2
+	*/
+
+	phase_modulation[0] = 0;
+	/* SLOT 1 */
+	SLOT = &CH[6].SLOT[SLOT1];
+	env = volume_calc(SLOT);
+
+	out = SLOT->op1_out[0] + SLOT->op1_out[1];
+	SLOT->op1_out[0] = SLOT->op1_out[1];
+
+	if (!SLOT->CON)
+		phase_modulation[0] = SLOT->op1_out[0];
+	/* else ignore output of operator 1 */
+
+	SLOT->op1_out[1] = 0;
+	if( env < ENV_QUIET )
+	{
+		if (!SLOT->FB)
+			out = 0;
+		SLOT->op1_out[1] = op_calc1(SLOT->Cnt, env, (out<<SLOT->FB), SLOT->wavetable );
+	}
+
+	/* SLOT 2 */
+	SLOT++;
+	env = volume_calc(SLOT);
+	if( env < ENV_QUIET )
+		output[0] += op_calc(SLOT->Cnt, env, phase_modulation[0], SLOT->wavetable) * 2;
+
+
+	/* Phase generation is based on: */
+	/* HH  (13) channel 7->slot 1 combined with channel 8->slot 2 (same combination as TOP CYMBAL but different output phases) */
+	/* SD  (16) channel 7->slot 1 */
+	/* TOM (14) channel 8->slot 1 */
+	/* TOP (17) channel 7->slot 1 combined with channel 8->slot 2 (same combination as HIGH HAT but different output phases) */
+
+	/* Envelope generation based on: */
+	/* HH  channel 7->slot1 */
+	/* SD  channel 7->slot2 */
+	/* TOM channel 8->slot1 */
+	/* TOP channel 8->slot2 */
+
+
+	/* The following formulas can be well optimized.
+	   I leave them in direct form for now (in case I've missed something).
+	*/
+
+	/* High Hat (verified on real YM3812) */
+	env = volume_calc(SLOT7_1);
+	if( env < ENV_QUIET )
+	{
+
+		/* high hat phase generation:
+			phase = d0 or 234 (based on frequency only)
+			phase = 34 or 2d0 (based on noise)
+		*/
+
+		/* base frequency derived from operator 1 in channel 7 */
+		unsigned char bit7 = ((SLOT7_1->Cnt>>FREQ_SH)>>7)&1;
+		unsigned char bit3 = ((SLOT7_1->Cnt>>FREQ_SH)>>3)&1;
+		unsigned char bit2 = ((SLOT7_1->Cnt>>FREQ_SH)>>2)&1;
+
+		unsigned char res1 = (bit2 ^ bit7) | bit3;
+
+		/* when res1 = 0 phase = 0x000 | 0xd0; */
+		/* when res1 = 1 phase = 0x200 | (0xd0>>2); */
+		UINT32 phase = res1 ? (0x200|(0xd0>>2)) : 0xd0;
+
+		/* enable gate based on frequency of operator 2 in channel 8 */
+		unsigned char bit5e= ((SLOT8_2->Cnt>>FREQ_SH)>>5)&1;
+		unsigned char bit3e= ((SLOT8_2->Cnt>>FREQ_SH)>>3)&1;
+
+		unsigned char res2 = (bit3e ^ bit5e);
+
+		/* when res2 = 0 pass the phase from calculation above (res1); */
+		/* when res2 = 1 phase = 0x200 | (0xd0>>2); */
+		if (res2)
+			phase = (0x200|(0xd0>>2));
+
+
+		/* when phase & 0x200 is set and noise=1 then phase = 0x200|0xd0 */
+		/* when phase & 0x200 is set and noise=0 then phase = 0x200|(0xd0>>2), ie no change */
+		if (phase&0x200)
+		{
+			if (noise)
+				phase = 0x200|0xd0;
+		}
+		else
+		/* when phase & 0x200 is clear and noise=1 then phase = 0xd0>>2 */
+		/* when phase & 0x200 is clear and noise=0 then phase = 0xd0, ie no change */
+		{
+			if (noise)
+				phase = 0xd0>>2;
+		}
+
+		output[0] += op_calc(phase<<FREQ_SH, env, 0, SLOT7_1->wavetable) * 2;
+	}
+
+	/* Snare Drum (verified on real YM3812) */
+	env = volume_calc(SLOT7_2);
+	if( env < ENV_QUIET )
+	{
+		/* base frequency derived from operator 1 in channel 7 */
+		unsigned char bit8 = ((SLOT7_1->Cnt>>FREQ_SH)>>8)&1;
+
+		/* when bit8 = 0 phase = 0x100; */
+		/* when bit8 = 1 phase = 0x200; */
+		UINT32 phase = bit8 ? 0x200 : 0x100;
+
+		/* Noise bit XOR'es phase by 0x100 */
+		/* when noisebit = 0 pass the phase from calculation above */
+		/* when noisebit = 1 phase ^= 0x100; */
+		/* in other words: phase ^= (noisebit<<8); */
+		if (noise)
+			phase ^= 0x100;
+
+		output[0] += op_calc(phase<<FREQ_SH, env, 0, SLOT7_2->wavetable) * 2;
+	}
+
+	/* Tom Tom (verified on real YM3812) */
+	env = volume_calc(SLOT8_1);
+	if( env < ENV_QUIET )
+		output[0] += op_calc(SLOT8_1->Cnt, env, 0, SLOT8_1->wavetable) * 2;
+
+	/* Top Cymbal (verified on real YM3812) */
+	env = volume_calc(SLOT8_2);
+	if( env < ENV_QUIET )
+	{
+		/* base frequency derived from operator 1 in channel 7 */
+		unsigned char bit7 = ((SLOT7_1->Cnt>>FREQ_SH)>>7)&1;
+		unsigned char bit3 = ((SLOT7_1->Cnt>>FREQ_SH)>>3)&1;
+		unsigned char bit2 = ((SLOT7_1->Cnt>>FREQ_SH)>>2)&1;
+
+		unsigned char res1 = (bit2 ^ bit7) | bit3;
+
+		/* when res1 = 0 phase = 0x000 | 0x100; */
+		/* when res1 = 1 phase = 0x200 | 0x100; */
+		UINT32 phase = res1 ? 0x300 : 0x100;
+
+		/* enable gate based on frequency of operator 2 in channel 8 */
+		unsigned char bit5e= ((SLOT8_2->Cnt>>FREQ_SH)>>5)&1;
+		unsigned char bit3e= ((SLOT8_2->Cnt>>FREQ_SH)>>3)&1;
+
+		unsigned char res2 = (bit3e ^ bit5e);
+		/* when res2 = 0 pass the phase from calculation above (res1); */
+		/* when res2 = 1 phase = 0x200 | 0x100; */
+		if (res2)
+			phase = 0x300;
+
+		output[0] += op_calc(phase<<FREQ_SH, env, 0, SLOT8_2->wavetable) * 2;
+	}
+
+}
+
+INLINE void FM_KEYON(OPL_SLOT *SLOT, UINT32 key_set)
+{
+	if( !SLOT->key )
+	{
+		/* restart Phase Generator */
+		SLOT->Cnt = 0;
+		/* phase -> Attack */
+		SLOT->state = EG_ATT;
+	}
+	SLOT->key |= key_set;
+}
+
+INLINE void FM_KEYOFF(OPL_SLOT *SLOT, UINT32 key_clr)
+{
+	if( SLOT->key )
+	{
+		SLOT->key &= key_clr;
+
+		if( !SLOT->key )
+		{
+			/* phase -> Release */
+			if (SLOT->state>EG_REL)
+				SLOT->state = EG_REL;
+		}
+	}
+}
+
+/* update phase increment counter of operator (also update the EG rates if necessary) */
+INLINE void CALC_FCSLOT(OPL_CH *CH,OPL_SLOT *SLOT)
+{
+	int ksr;
+
+	/* (frequency) phase increment counter */
+	SLOT->Incr = CH->fc * SLOT->mul;
+	ksr = CH->kcode >> SLOT->KSR;
+
+	if( SLOT->ksr != ksr )
+	{
+		SLOT->ksr = ksr;
+
+		/* calculate envelope generator rates */
+		if ((SLOT->ar + SLOT->ksr) < 16+62)
+		{
+			SLOT->eg_sh_ar  = eg_rate_shift [SLOT->ar + SLOT->ksr ];
+			SLOT->eg_sel_ar = eg_rate_select[SLOT->ar + SLOT->ksr ];
+		}
+		else
+		{
+			SLOT->eg_sh_ar  = 0;
+			SLOT->eg_sel_ar = 13*RATE_STEPS;
+		}
+		SLOT->eg_sh_dr  = eg_rate_shift [SLOT->dr + SLOT->ksr ];
+		SLOT->eg_sel_dr = eg_rate_select[SLOT->dr + SLOT->ksr ];
+		SLOT->eg_sh_rr  = eg_rate_shift [SLOT->rr + SLOT->ksr ];
+		SLOT->eg_sel_rr = eg_rate_select[SLOT->rr + SLOT->ksr ];
+	}
+}
+
+/* set multi,am,vib,EG-TYP,KSR,mul */
+INLINE void set_mul(FM_OPL *OPL,int slot,int v)
+{
+	OPL_CH   *CH   = &OPL->P_CH[slot/2];
+	OPL_SLOT *SLOT = &CH->SLOT[slot&1];
+
+	SLOT->mul     = mul_tab[v&0x0f];
+	SLOT->KSR     = (v&0x10) ? 0 : 2;
+	SLOT->eg_type = (v&0x20);
+	SLOT->vib     = (v&0x40);
+	SLOT->AMmask  = (v&0x80) ? ~0 : 0;
+	CALC_FCSLOT(CH,SLOT);
+}
+
+/* set ksl & tl */
+INLINE void set_ksl_tl(FM_OPL *OPL,int slot,int v)
+{
+	OPL_CH   *CH   = &OPL->P_CH[slot/2];
+	OPL_SLOT *SLOT = &CH->SLOT[slot&1];
+	int ksl = v>>6; /* 0 / 1.5 / 3.0 / 6.0 dB/OCT */
+
+	SLOT->ksl = ksl ? 3-ksl : 31;
+	SLOT->TL  = (v&0x3f)<<(ENV_BITS-1-7); /* 7 bits TL (bit 6 = always 0) */
+
+	SLOT->TLL = SLOT->TL + (CH->ksl_base>>SLOT->ksl);
+}
+
+/* set attack rate & decay rate  */
+INLINE void set_ar_dr(FM_OPL *OPL,int slot,int v)
+{
+	OPL_CH   *CH   = &OPL->P_CH[slot/2];
+	OPL_SLOT *SLOT = &CH->SLOT[slot&1];
+
+	SLOT->ar = (v>>4)  ? 16 + ((v>>4)  <<2) : 0;
+
+	if ((SLOT->ar + SLOT->ksr) < 16+62)
+	{
+		SLOT->eg_sh_ar  = eg_rate_shift [SLOT->ar + SLOT->ksr ];
+		SLOT->eg_sel_ar = eg_rate_select[SLOT->ar + SLOT->ksr ];
+	}
+	else
+	{
+		SLOT->eg_sh_ar  = 0;
+		SLOT->eg_sel_ar = 13*RATE_STEPS;
+	}
+
+	SLOT->dr    = (v&0x0f)? 16 + ((v&0x0f)<<2) : 0;
+	SLOT->eg_sh_dr  = eg_rate_shift [SLOT->dr + SLOT->ksr ];
+	SLOT->eg_sel_dr = eg_rate_select[SLOT->dr + SLOT->ksr ];
+}
+
+/* set sustain level & release rate */
+INLINE void set_sl_rr(FM_OPL *OPL,int slot,int v)
+{
+	OPL_CH   *CH   = &OPL->P_CH[slot/2];
+	OPL_SLOT *SLOT = &CH->SLOT[slot&1];
+
+	SLOT->sl  = sl_tab[ v>>4 ];
+
+	SLOT->rr  = (v&0x0f)? 16 + ((v&0x0f)<<2) : 0;
+	SLOT->eg_sh_rr  = eg_rate_shift [SLOT->rr + SLOT->ksr ];
+	SLOT->eg_sel_rr = eg_rate_select[SLOT->rr + SLOT->ksr ];
+}
+
+
+/* write a value v to register r on OPL chip */
+static void OPLWriteReg(FM_OPL *OPL, int r, int v)
+{
+	OPL_CH *CH;
+	int slot;
+	int block_fnum;
+
+	/* adjust bus to 8 bits */
+	r &= 0xff;
+	v &= 0xff;
+
+	switch(r&0xe0)
+	{
+	case 0x00:	/* 00-1f:control */
+		switch(r&0x1f)
+		{
+		case 0x01:	/* waveform select enable */
+			if(OPL->type&OPL_TYPE_WAVESEL)
+			{
+				OPL->wavesel = v&0x20;
+				/* do not change the waveform previously selected */
+			}
+			break;
+		case 0x02:	/* Timer 1 */
+			OPL->T[0] = (256-v)*4;
+			break;
+		case 0x03:	/* Timer 2 */
+			OPL->T[1] = (256-v)*16;
+			break;
+		case 0x04:	/* IRQ clear / mask and Timer enable */
+			if(v&0x80)
+			{	/* IRQ flag clear */
+				//OPL_STATUS_RESET(OPL,0x7f);
+
+				OPL_STATUS_RESET(OPL,0x7f-0x08); /* don't reset BFRDY flag or we will have to call deltat module to set the flag */
+			}
+			else
+			{	/* set IRQ mask ,timer enable*/
+#if 0
+				OPL->st[0] = v&1;
+				OPL->st[1] = (v>>1)&1;
+
+				/* IRQRST,T1MSK,t2MSK,EOSMSK,BRMSK,x,ST2,ST1 */
+				OPL_STATUS_RESET(OPL, v & 0x78 );
+				OPL_STATUSMASK_SET(OPL, (~v) & 0x78 );
+
+				/* timer 1 */
+				if(OPL->st[0])
+				{
+					OPL->TC[0]=OPL->T[0]*20;
+				}
+				/* timer 2 */
+				if(OPL->st[1])
+				{
+					OPL->TC[1]=OPL->T[1]*20;
+				}
+#endif
+				/* set IRQ mask ,timer enable*/
+				UINT8 st1 = v&1;
+				UINT8 st2 = (v>>1)&1;
+
+				/* IRQRST,T1MSK,t2MSK,EOSMSK,BRMSK,x,ST2,ST1 */
+				OPL_STATUS_RESET(OPL, v & (0x78-0x08) );
+				OPL_STATUSMASK_SET(OPL, (~v) & 0x78 );
+
+				/* timer 2 */
+				if(OPL->st[1] != st2)
+				{
+					OPL->st[1] = st2;
+				}
+				/* timer 1 */
+				if(OPL->st[0] != st1)
+				{
+					OPL->st[0] = st1;
+				}
+			}
+			break;
+		case 0x08:	/* MODE,DELTA-T control 2 : CSM,NOTESEL,x,x,smpl,da/ad,64k,rom */
+			OPL->mode = v;
+			break;
+
+		default:
+			break;
+		}
+		break;
+	case 0x20:	/* am ON, vib ON, ksr, eg_type, mul */
+		slot = slot_array[r&0x1f];
+		if(slot < 0) return;
+		set_mul(OPL,slot,v);
+		break;
+	case 0x40:
+		slot = slot_array[r&0x1f];
+		if(slot < 0) return;
+		set_ksl_tl(OPL,slot,v);
+		break;
+	case 0x60:
+		slot = slot_array[r&0x1f];
+		if(slot < 0) return;
+		set_ar_dr(OPL,slot,v);
+		break;
+	case 0x80:
+		slot = slot_array[r&0x1f];
+		if(slot < 0) return;
+		set_sl_rr(OPL,slot,v);
+		break;
+	case 0xa0:
+		if (r == 0xbd)			/* am depth, vibrato depth, r,bd,sd,tom,tc,hh */
+		{
+			OPL->lfo_am_depth = v & 0x80;
+			OPL->lfo_pm_depth_range = (v&0x40) ? 8 : 0;
+
+			OPL->rhythm  = v&0x3f;
+
+			if(OPL->rhythm&0x20)
+			{
+				/* BD key on/off */
+				if(v&0x10)
+				{
+					FM_KEYON (&OPL->P_CH[6].SLOT[SLOT1], 2);
+					FM_KEYON (&OPL->P_CH[6].SLOT[SLOT2], 2);
+				}
+				else
+				{
+					FM_KEYOFF(&OPL->P_CH[6].SLOT[SLOT1],~2);
+					FM_KEYOFF(&OPL->P_CH[6].SLOT[SLOT2],~2);
+				}
+				/* HH key on/off */
+				if(v&0x01) FM_KEYON (&OPL->P_CH[7].SLOT[SLOT1], 2);
+				else       FM_KEYOFF(&OPL->P_CH[7].SLOT[SLOT1],~2);
+				/* SD key on/off */
+				if(v&0x08) FM_KEYON (&OPL->P_CH[7].SLOT[SLOT2], 2);
+				else       FM_KEYOFF(&OPL->P_CH[7].SLOT[SLOT2],~2);
+				/* TOM key on/off */
+				if(v&0x04) FM_KEYON (&OPL->P_CH[8].SLOT[SLOT1], 2);
+				else       FM_KEYOFF(&OPL->P_CH[8].SLOT[SLOT1],~2);
+				/* TOP-CY key on/off */
+				if(v&0x02) FM_KEYON (&OPL->P_CH[8].SLOT[SLOT2], 2);
+				else       FM_KEYOFF(&OPL->P_CH[8].SLOT[SLOT2],~2);
+			}
+			else
+			{
+				/* BD key off */
+				FM_KEYOFF(&OPL->P_CH[6].SLOT[SLOT1],~2);
+				FM_KEYOFF(&OPL->P_CH[6].SLOT[SLOT2],~2);
+				/* HH key off */
+				FM_KEYOFF(&OPL->P_CH[7].SLOT[SLOT1],~2);
+				/* SD key off */
+				FM_KEYOFF(&OPL->P_CH[7].SLOT[SLOT2],~2);
+				/* TOM key off */
+				FM_KEYOFF(&OPL->P_CH[8].SLOT[SLOT1],~2);
+				/* TOP-CY off */
+				FM_KEYOFF(&OPL->P_CH[8].SLOT[SLOT2],~2);
+			}
+			return;
+		}
+		/* keyon,block,fnum */
+		if( (r&0x0f) > 8) return;
+		CH = &OPL->P_CH[r&0x0f];
+		if(!(r&0x10))
+		{	/* a0-a8 */
+			block_fnum  = (CH->block_fnum&0x1f00) | v;
+		}
+		else
+		{	/* b0-b8 */
+			block_fnum = ((v&0x1f)<<8) | (CH->block_fnum&0xff);
+
+			if(v&0x20)
+			{
+				FM_KEYON (&CH->SLOT[SLOT1], 1);
+				FM_KEYON (&CH->SLOT[SLOT2], 1);
+			}
+			else
+			{
+				FM_KEYOFF(&CH->SLOT[SLOT1],~1);
+				FM_KEYOFF(&CH->SLOT[SLOT2],~1);
+			}
+		}
+		/* update */
+		if(CH->block_fnum != (UINT32) block_fnum)
+		{
+			UINT8 block  = block_fnum >> 10;
+
+			CH->block_fnum = block_fnum;
+
+			CH->ksl_base = ksl_tab[block_fnum>>6];
+			CH->fc       = OPL->fn_tab[block_fnum&0x03ff] >> (7-block);
+
+			/* BLK 2,1,0 bits -> bits 3,2,1 of kcode */
+			CH->kcode    = (CH->block_fnum&0x1c00)>>9;
+
+			 /* the info below is actually opposite to what is stated in the Manuals (verifed on real YM3812) */
+			/* if notesel == 0 -> lsb of kcode is bit 10 (MSB) of fnum  */
+			/* if notesel == 1 -> lsb of kcode is bit 9 (MSB-1) of fnum */
+			if (OPL->mode&0x40)
+				CH->kcode |= (CH->block_fnum&0x100)>>8;	/* notesel == 1 */
+			else
+				CH->kcode |= (CH->block_fnum&0x200)>>9;	/* notesel == 0 */
+
+			/* refresh Total Level in both SLOTs of this channel */
+			CH->SLOT[SLOT1].TLL = CH->SLOT[SLOT1].TL + (CH->ksl_base>>CH->SLOT[SLOT1].ksl);
+			CH->SLOT[SLOT2].TLL = CH->SLOT[SLOT2].TL + (CH->ksl_base>>CH->SLOT[SLOT2].ksl);
+
+			/* refresh frequency counter in both SLOTs of this channel */
+			CALC_FCSLOT(CH,&CH->SLOT[SLOT1]);
+			CALC_FCSLOT(CH,&CH->SLOT[SLOT2]);
+		}
+		break;
+	case 0xc0:
+		/* FB,C */
+		if( (r&0x0f) > 8) return;
+		CH = &OPL->P_CH[r&0x0f];
+		CH->SLOT[SLOT1].FB  = (v>>1)&7 ? ((v>>1)&7) + 7 : 0;
+		CH->SLOT[SLOT1].CON = v&1;
+		CH->SLOT[SLOT1].connect1 = CH->SLOT[SLOT1].CON ? &output[0]: &phase_modulation[0];
+		break;
+	case 0xe0: /* waveform select */
+		/* simply ignore write to the waveform select register if selecting not enabled in test register */
+		if(OPL->wavesel)
+		{
+			slot = slot_array[r&0x1f];
+			if(slot < 0) return;
+			CH = &OPL->P_CH[slot/2];
+
+			CH->SLOT[slot&1].wavetable = (v&0x03)*SIN_LEN;
+		}
+		break;
+	}
+}
+
+static void OPLResetChip(FM_OPL *OPL)
+{
+	int c,s;
+	int i;
+
+	OPL->eg_timer = 0;
+	OPL->eg_cnt   = 0;
+
+	OPL->noise_rng = 1;	/* noise shift register */
+	OPL->mode   = 0;	/* normal mode */
+	OPL_STATUS_RESET(OPL,0x7f);
+
+	/* reset with register write */
+	OPLWriteReg(OPL,0x01,0); /* wavesel disable */
+	OPLWriteReg(OPL,0x02,0); /* Timer1 */
+	OPLWriteReg(OPL,0x03,0); /* Timer2 */
+	OPLWriteReg(OPL,0x04,0); /* IRQ mask clear */
+	for(i = 0xff ; i >= 0x20 ; i-- ) OPLWriteReg(OPL,i,0);
+
+	/* reset operator parameters */
+	for( c = 0 ; c < 9 ; c++ )
+	{
+		OPL_CH *CH = &OPL->P_CH[c];
+		for(s = 0 ; s < 2 ; s++ )
+		{
+			/* wave table */
+			CH->SLOT[s].wavetable = 0;
+			CH->SLOT[s].state     = EG_OFF;
+			CH->SLOT[s].volume    = MAX_ATT_INDEX;
+		}
+	}
+}
+
+/* Create one of virtual YM3812/YM3526/Y8950 */
+/* 'clock' is chip clock in Hz  */
+/* 'rate'  is sampling rate  */
+static void OPLCreate(int type, int clock, int rate, FM_OPL *OPL)
+{
+	OPL->type  = type;
+	OPL->clock = clock;
+	OPL->rate  = rate;
+	return;
+}
+
+static int OPLWrite(FM_OPL *OPL,int a,int v)
+{
+	if( !(a&1) )
+	{	/* address port */
+		OPL->address = v & 0xff;
+	}
+	else
+	{	/* data port */
+		OPLWriteReg(OPL,OPL->address,v);
+	}
+	return OPL->status>>7;
+}
+
+static unsigned char OPLRead(FM_OPL *OPL,int a)
+{
+	if( !(a&1) )
+	{
+		if (OPL->st[0]) {
+			if (OPL->TC[0]) OPL->TC[0]--;
+			else {
+				OPL->TC[0]=OPL->T[0]*20;
+				OPL_STATUS_SET(OPL,0x40);
+			}
+		}
+		if (OPL->st[1]) {
+			if (OPL->TC[1]) OPL->TC[1]--;
+			else {
+				OPL->TC[1]=OPL->T[1]*20;
+				OPL_STATUS_SET(OPL,0x40);
+			}
+		}
+		return OPL->status & (OPL->statusmask|0x80);
+	}
+	return 0xff;
+}
+
+/* CSM Key Controll */
+INLINE void CSMKeyControll(OPL_CH *CH)
+{
+	FM_KEYON (&CH->SLOT[SLOT1], 4);
+	FM_KEYON (&CH->SLOT[SLOT2], 4);
+
+	/* The key off should happen exactly one sample later - not implemented correctly yet */
+
+	FM_KEYOFF(&CH->SLOT[SLOT1], ~4);
+	FM_KEYOFF(&CH->SLOT[SLOT2], ~4);
+}
+
+
+static int OPLTimerOver(FM_OPL *OPL,int c)
+{
+	if( c )
+	{	/* Timer B */
+		OPL_STATUS_SET(OPL,0x20);
+	}
+	else
+	{	/* Timer A */
+		OPL_STATUS_SET(OPL,0x40);
+		/* CSM mode key,TL controll */
+		if( OPL->mode & 0x80 )
+		{	/* CSM mode total level latch and auto key on */
+			int ch;
+			for(ch=0; ch<9; ch++)
+				CSMKeyControll( &OPL->P_CH[ch] );
+		}
+	}
+	return OPL->status>>7;
+}
+
+
+
+#if (BUILD_YM3812)
+
+static int Active=1;
+
+static void YM3812ResetChip(int which)
+{
+	OPLResetChip(OPL_YM3812[which]);
+}
+
+extern "C" void fmopl_Init(void)
+{
+	char *ptr;
+
+	SharedBuff_ptr = (char *) BUFF_BASE_ADDRESS;
+
+	ptr=(SharedBuff_ptr + NSUB_OFFSET);
+	NSubmittedMessages=(int *) ptr;
+
+	ptr=(SharedBuff_ptr + NEX_OFFSET);
+	NExecutedMessages=(int *) ptr;
+
+	ptr=(SharedBuff_ptr + MSG_BUF_OFFSET);
+	MessageBuffer=(CoreMessage *) ptr;
+}
+
+int YM3812Init(int num, int clock, int rate)
+{
+	char *ptr;
+	int i;
+
+	SharedData_ptr=(char *) DATA_BASE_ADDRESS;
+
+	ptr=(SharedData_ptr + NUMCHIP_OFFSET);
+	YM3812NumChips=(int *) ptr;
+
+	ptr=(SharedBuff_ptr + TL_TAB_OFFSET);
+	tl_tab=(signed int *) ptr;
+	ptr=(SharedBuff_ptr + SIN_TAB_OFFSET);
+	sin_tab=(unsigned int *) ptr;
+
+	for (i = 0;i < *YM3812NumChips; i++)
+	{
+		ptr=(SharedBuff_ptr + BUFPOS_OFFSET + i*sizeof(int));
+		BufWritePos[i]=(int *) ptr;
+
+		ptr=(SharedBuff_ptr + READPOS_OFFSET + i*sizeof(int));
+		BufReadPos[i]=(int *) ptr;
+
+		ptr=(SharedBuff_ptr + DATA_OFFSET + i * SHARED_BUF_SIZE * sizeof(INT16));
+		SharedBuffer[i]=(INT16 *) ptr;
+
+		ptr=(SharedData_ptr + OPL_OFFSET + i*OPL_SIZE);
+		OPL_YM3812[i] = (FM_OPL*) ptr;
+
+		ptr=(SharedBuff_ptr + FNTAB_OFFSET+i*1024*sizeof(UINT32));
+		OPL_YM3812[i]->fn_tab=(UINT32 *) ptr;
+
+		OPLCreate(OPL_TYPE_YM3812,clock,rate,OPL_YM3812[i]);
+
+		YM3812ResetChip(i);
+	}
+
+	return 0;
+
+}
+
+void YM3812Shutdown(void)
+{
+	int i;
+
+	for (i = 0;i < *YM3812NumChips; i++)
+	{
+		OPL_YM3812[i] = 0;
+	}
+}
+
+static int YM3812Write(int which, int a, int v)
+{
+	return OPLWrite(OPL_YM3812[which], a, v);
+}
+
+static unsigned char YM3812Read(int which, int a)
+{
+	/* YM3812 always returns bit2 and bit1 in HIGH state */
+	return OPLRead(OPL_YM3812[which], a) | 0x06 ;
+}
+static int YM3812TimerOver(int which, int c)
+{
+	return OPLTimerOver(OPL_YM3812[which], c);
+}
+
+/*
+** Generate samples for one of the YM3812's
+**
+** 'which' is the virtual YM3812 number
+** '*buffer' is the output buffer pointer
+** 'length' is the number of samples that should be generated
+*/
+static void YM3812UpdateOne_core(int which, INT16 *buffer, int length)
+{
+	FM_OPL		*OPL = OPL_YM3812[which];
+	UINT8		rhythm = OPL->rhythm&0x20;
+	OPLSAMPLE	*buf = buffer;
+	int i;
+
+	if( which != cur_chip ){
+		cur_chip = which;
+		/* rhythm slots */
+		SLOT7_1 = &OPL->P_CH[7].SLOT[SLOT1];
+		SLOT7_2 = &OPL->P_CH[7].SLOT[SLOT2];
+		SLOT8_1 = &OPL->P_CH[8].SLOT[SLOT1];
+		SLOT8_2 = &OPL->P_CH[8].SLOT[SLOT2];
+	}
+	for( i=0; i < length ; i++ )
+	{
+		int lt;
+
+		output[0] = 0;
+
+		advance_lfo(OPL);
+
+		/* FM part */
+		OPL_CALC_CH(&OPL->P_CH[0]);
+		OPL_CALC_CH(&OPL->P_CH[1]);
+		OPL_CALC_CH(&OPL->P_CH[2]);
+		OPL_CALC_CH(&OPL->P_CH[3]);
+		OPL_CALC_CH(&OPL->P_CH[4]);
+		OPL_CALC_CH(&OPL->P_CH[5]);
+
+		if(!rhythm)
+		{
+			OPL_CALC_CH(&OPL->P_CH[6]);
+			OPL_CALC_CH(&OPL->P_CH[7]);
+			OPL_CALC_CH(&OPL->P_CH[8]);
+		}
+		else		/* Rhythm part */
+		{
+			OPL_CALC_RH(&OPL->P_CH[0], (OPL->noise_rng>>0)&1 );
+		}
+
+		lt = output[0];
+
+		lt >>= FINAL_SH;
+
+		/* limit check */
+		lt = limit( lt , MAXOUT, MINOUT );
+
+		/* store to sound buffer */
+		buf[i] = lt;
+
+		advance(OPL);
+	}
+
+}
+
+static INT16 buff[SHARED_BUF_SIZE];
+
+static void YM3812UpdateOne(int which, int length)
+{
+	int i,nfree;
+	if(length==0) return;
+	YM3812UpdateOne_core(which,buff,length);
+	nfree=SHARED_BUF_SIZE - *BufWritePos[which];
+	if(length < nfree)
+	{
+		for(i=0;i<length;i++) SharedBuffer[which][(*BufWritePos[which])+i]=buff[i];
+		(*BufWritePos[which])+=length;
+	} else
+	{
+		for(i=0;i<nfree;i++) SharedBuffer[which][(*BufWritePos[which])+i]=buff[i];
+		for(i=0;i<length-nfree;i++) SharedBuffer[which][i]=buff[i+nfree];
+		*BufWritePos[which]=length-nfree;
+	}
+}
+
+extern "C" int fmopl_core_control(void)
+{
+	int type,current,d1,d2,d3;
+//	int no;
+	if(!Active) return 0;
+	while( *NExecutedMessages < *NSubmittedMessages)
+	{
+		current=(*NExecutedMessages+1) % ((int) MSG_BUF_SIZE);
+		type=MessageBuffer[current].type;
+//		no=MessageBuffer[current].no;
+		d1=MessageBuffer[current].data1;
+		d2=MessageBuffer[current].data2;
+		d3=MessageBuffer[current].data3;
+		switch(type)
+		{
+			case INIT:
+				YM3812Init(d1,d2,d3);
+				break;
+			case READ:
+				YM3812Read(d1,d2);
+				break;
+			case WRITE:
+				YM3812Write(d1,d2,d3);
+				break;
+			case UPDATE:
+				YM3812UpdateOne(d1,d2);
+				break;
+			case TIMEROVER:
+				YM3812TimerOver(d1,d2);
+				break;
+			case RESET:
+				YM3812ResetChip(d1);
+				break;
+			case SHUTDOWN:
+				YM3812Shutdown();
+				Active=0;
+				break;
+		}
+		(*NExecutedMessages)++;
+	}
+	return 1;
+}
+
+#endif /* BUILD_YM3812 */
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl_940/fmopl_core.h wolf4sdl/GP2X/fmopl_940/fmopl_core.h
--- Wolf4SDL-1.6-src/GP2X/fmopl_940/fmopl_core.h	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl_940/fmopl_core.h	2011-04-27 19:58:18.542203098 +0200
@@ -0,0 +1,32 @@
+#ifndef __FMOPL_H_
+#define __FMOPL_H_
+
+#define HAS_YM3812 1
+
+/* --- select emulation chips --- */
+#define BUILD_YM3812 (HAS_YM3812)
+#define BUILD_YM3526 (HAS_YM3526)
+#define BUILD_Y8950  (HAS_Y8950)
+
+/* select output bits size of output : 8 or 16 */
+#define OPL_SAMPLE_BITS 16
+
+/* compiler dependence */
+#ifndef OSD_CPU_H
+#define OSD_CPU_H
+typedef unsigned char  UINT8;   /* unsigned  8bit */
+typedef unsigned short UINT16;  /* unsigned 16bit */
+typedef unsigned int   UINT32;  /* unsigned 32bit */
+typedef signed char    INT8;    /* signed  8bit   */
+typedef signed short   INT16;   /* signed 16bit   */
+typedef signed int     INT32;   /* signed 32bit   */
+#endif
+
+#if (OPL_SAMPLE_BITS==16)
+typedef INT16 OPLSAMPLE;
+#endif
+#if (OPL_SAMPLE_BITS==8)
+typedef INT8 OPLSAMPLE;
+#endif
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl_940/fmopl_shared.h wolf4sdl/GP2X/fmopl_940/fmopl_shared.h
--- Wolf4SDL-1.6-src/GP2X/fmopl_940/fmopl_shared.h	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl_940/fmopl_shared.h	2011-04-27 19:58:18.543203098 +0200
@@ -0,0 +1,175 @@
+#include "memory_layout.h"
+
+#define WRAPPED(x,y)   ((x)>=0?(x):(x)+(y))
+#define MIN(x,y) ((x)<(y)?(x):(y))
+
+typedef struct{
+	UINT32  ar;             /* attack rate: AR<<2			*/
+	UINT32  dr;             /* decay rate:  DR<<2			*/
+	UINT32  rr;             /* release rate:RR<<2			*/
+	UINT8   KSR;            /* key scale rate				*/
+	UINT8   ksl;            /* keyscale level				*/
+	UINT8   ksr;            /* key scale rate: kcode>>KSR	*/
+	UINT8   mul;            /* multiple: mul_tab[ML]		*/
+
+	/* Phase Generator */
+	UINT32  Cnt;            /* frequency counter			*/
+	UINT32  Incr;           /* frequency counter step		*/
+	UINT8   FB;             /* feedback shift value			*/
+	INT32   *connect1;      /* slot1 output pointer			*/
+	INT32   op1_out[2];     /* slot1 output for feedback	*/
+	UINT8   CON;            /* connection (algorithm) type	*/
+
+	/* Envelope Generator */
+	UINT8   eg_type;        /* percussive/non-percussive mode */
+	UINT8   state;          /* phase type					*/
+	UINT32  TL;             /* total level: TL << 2			*/
+	INT32   TLL;            /* adjusted now TL				*/
+	INT32   volume;         /* envelope counter				*/
+	UINT32  sl;             /* sustain level: sl_tab[SL]	*/
+	UINT8   eg_sh_ar;       /* (attack state)				*/
+	UINT8   eg_sel_ar;      /* (attack state)				*/
+	UINT8   eg_sh_dr;       /* (decay state)				*/
+	UINT8   eg_sel_dr;      /* (decay state)				*/
+	UINT8   eg_sh_rr;       /* (release state)				*/
+	UINT8   eg_sel_rr;      /* (release state)				*/
+	UINT32  key;            /* 0 = KEY OFF, >0 = KEY ON		*/
+
+	/* LFO */
+	UINT32  AMmask;         /* LFO Amplitude Modulation enable mask */
+	UINT8   vib;            /* LFO Phase Modulation enable flag (active high)*/
+
+	/* waveform select */
+	unsigned int wavetable;
+} OPL_SLOT;
+
+typedef struct{
+	OPL_SLOT SLOT[2];
+	/* phase generator state */
+	UINT32  block_fnum;     /* block+fnum					*/
+	UINT32  fc;             /* Freq. Increment base			*/
+	UINT32  ksl_base;       /* KeyScaleLevel Base step		*/
+	UINT8   kcode;          /* key code (for key scaling)	*/
+} OPL_CH;
+
+/* OPL state */
+typedef struct fm_opl_f {
+	/* FM channel slots */
+	OPL_CH  P_CH[9];               /* OPL/OPL2 chips have 9 channels*/
+
+	UINT32  eg_cnt;                /* global envelope generator counter	*/
+	UINT32  eg_timer;              /* global envelope generator counter works at frequency = chipclock/72 */
+	UINT32  eg_timer_add;          /* step of eg_timer						*/
+	UINT32  eg_timer_overflow;     /* envelope generator timer overlfows every 1 sample (on real chip) */
+
+	UINT8   rhythm;                /* Rhythm mode					*/
+
+	UINT32  *fn_tab;               /* fnumber->increment counter	*/
+
+	/* LFO */
+	UINT8   lfo_am_depth;
+	UINT8   lfo_pm_depth_range;
+	UINT32  lfo_am_cnt;
+	UINT32  lfo_am_inc;
+	UINT32  lfo_pm_cnt;
+	UINT32  lfo_pm_inc;
+
+	UINT32  noise_rng;             /* 23 bit noise shift register	*/
+	UINT32  noise_p;               /* current noise 'phase'		*/
+	UINT32  noise_f;               /* current noise period			*/
+
+	UINT8   wavesel;               /* waveform select enable flag	*/
+
+	int     T[2];                  /* timer counters				*/
+	int     TC[2];
+	UINT8   st[2];                 /* timer enable					*/
+
+	/* external event callback handlers */
+
+	UINT8   type;                  /* chip type					*/
+	UINT8   address;               /* address register				*/
+	UINT8   status;                /* status flag					*/
+	UINT8   statusmask;            /* status mask					*/
+	UINT8   mode;                  /* Reg.08 : CSM,notesel,etc.	*/
+
+	int     clock;                 /* master clock  (Hz)			*/
+	int     rate;                  /* sampling rate (Hz)			*/
+} FM_OPL;
+
+#define OPL_SIZE 2048
+
+/*	TL_TAB_LEN is calculated as:
+*	12 - sinus amplitude bits     (Y axis)
+*	2  - sinus sign bit           (Y axis)
+*	TL_RES_LEN - sinus resolution (X axis)
+*/
+
+#define TL_RES_LEN	(256)	/* 8 bits addressing (real chip) */
+#define TL_TAB_LEN 	(12*2*TL_RES_LEN)
+static signed int *tl_tab;
+
+#define SIN_BITS		10
+#define SIN_LEN			(1<<SIN_BITS)
+#define SIN_MASK		(SIN_LEN-1)
+
+/* sin waveform table in 'decibel' scale */
+/* four waveforms on OPL2 type chips */
+/* sinwave entries */
+static unsigned int *sin_tab;
+
+enum CMESSAGE {
+	INIT,
+	READ,
+	WRITE,
+	UPDATE,
+	TIMEROVER,
+	RESET,
+	SHUTDOWN
+};
+
+typedef struct {
+	int type;
+//	int no;
+	int data1;
+	int data2;
+	int data3;
+} CoreMessage;
+
+#define MAX_OPL_CHIPS 2
+
+#define MSG_BUF_SIZE 4*1024
+volatile static CoreMessage* MessageBuffer;
+volatile static int* NSubmittedMessages;
+volatile static int* NExecutedMessages;
+
+#define SHARED_BUF_SIZE 256
+volatile static INT16* SharedBuffer[MAX_OPL_CHIPS];
+volatile static int* BufWritePos[MAX_OPL_CHIPS];
+volatile static int* BufReadPos[MAX_OPL_CHIPS];
+
+#if (BUILD_YM3812)
+
+static FM_OPL *OPL_YM3812[MAX_OPL_CHIPS];       /* array of pointers to the YM3812's */
+static int *YM3812NumChips=0;                  /* number of chips */
+
+#endif
+
+#define BUFF_BASE_ADDRESS  OPL2_MSG_BASE
+#define NSUB_OFFSET        0
+#define NEX_OFFSET         (NSUB_OFFSET+sizeof(int))
+#define MSG_BUF_OFFSET     (NEX_OFFSET+sizeof(int))
+#define BUFPOS_OFFSET      (MSG_BUF_OFFSET+MSG_BUF_SIZE*sizeof(CoreMessage))
+#define READPOS_OFFSET     (BUFPOS_OFFSET+MAX_OPL_CHIPS*sizeof(int))
+#define DATA_OFFSET        (READPOS_OFFSET+MAX_OPL_CHIPS*sizeof(int))
+#define TL_TAB_OFFSET      (DATA_OFFSET+MAX_OPL_CHIPS*SHARED_BUF_SIZE*sizeof(INT16))
+#define SIN_TAB_OFFSET     (TL_TAB_OFFSET+TL_TAB_LEN*sizeof(signed int))
+#define FNTAB_OFFSET       (SIN_TAB_OFFSET+4*SIN_LEN*sizeof(unsigned int))
+#define END_OFFSET         (FNTAB_OFFSET+1024*MAX_OPL_CHIPS*sizeof(UINT32))
+
+#define DATA_BASE_ADDRESS  OPL2_DAT_BASE
+#define NUMCHIP_OFFSET     0
+#define OPL_OFFSET         (NUMCHIP_OFFSET+sizeof(int))
+#define END_OFFSET2        (OPL_OFFSET+OPL_SIZE*MAX_OPL_CHIPS)
+
+static char* SharedData_ptr;
+static char* SharedBuff_ptr;
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl_940/main.c wolf4sdl/GP2X/fmopl_940/main.c
--- Wolf4SDL-1.6-src/GP2X/fmopl_940/main.c	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl_940/main.c	2011-04-27 19:58:18.543203098 +0200
@@ -0,0 +1,54 @@
+extern void fmopl_Init();
+extern int  fmopl_core_control();
+
+void Main940();
+
+void code940(void) __attribute__((naked))
+{
+	asm ("b .DzzBegin");    // reset, interrupt table
+	asm ("b .DzzBegin");
+	asm ("b .DzzBegin");
+	asm ("b .DzzBegin");
+	asm ("b .DzzBegin");
+	asm ("b .DzzBegin");
+	asm ("b .DzzBegin");
+	asm ("b .DzzBegin");
+	asm (".DzzBegin:");
+	asm ("mov sp, #0x100000");    // set the stack top (1M)
+	asm ("sub sp, sp, #4");       // minus 4
+
+	// set up memory region 0 -- the whole 4GB address space
+	asm ("mov r0, #63");  // region data
+	asm ("mcr p15, 0, r0, c6, c0, 0");
+	asm ("mcr p15, 0, r0, c6, c0, 1");
+	// set up region 1 which is the first 2 megabytes.
+	asm ("mov r0, #0x00000029");  // region data
+	asm ("mcr p15, 0, r0, c6, c1, 0");
+	asm ("mcr p15, 0, r0, c6, c1, 1");
+	// set region 1 to be cacheable (so the first 2M will be cacheable)
+	asm ("mov r0, #2");
+	asm ("mcr p15, 0, r0, c2, c0, 0");
+	asm ("mcr p15, 0, r0, c2, c0, 1");
+	// set region 1 to be bufferable too (only data)
+	asm ("mcr p15, 0, r0, c3, c0, 0");
+	// set protection on for all regions
+	asm ("mov r0, #15");
+	asm ("mcr p15, 0, r0, c5, c0, 0");
+	asm ("mcr p15, 0, r0, c5, c0, 1");
+
+	asm ("mrc p15, 0, r0, c1, c0, 0"); // fetch current control reg
+	asm ("orr r0, r0, #1"); // 0x00000001: enable protection unit
+	asm ("orr r0, r0, #4"); // 0x00000004: enable D cache
+	asm ("orr r0, r0, #0x1000"); // 0x00001000: enable I cache
+	asm ("orr r0, r0, #0xC0000000"); //  0xC0000000: async+fastbus
+	asm ("mcr p15, 0, r0, c1, c0, 0"); // set control reg
+
+	Main940();
+}
+
+void Main940(void)
+{
+	fmopl_Init();
+
+	while(fmopl_core_control()) {};
+}
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/fmopl_940/memory_layout.h wolf4sdl/GP2X/fmopl_940/memory_layout.h
--- Wolf4SDL-1.6-src/GP2X/fmopl_940/memory_layout.h	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/fmopl_940/memory_layout.h	2011-04-27 19:58:18.543203098 +0200
@@ -0,0 +1,34 @@
+/*
+ memory layout for OPL2+OPL3
+*/
+
+#define OPL2_MSG_BASE  0x200000
+#define OPL2_MSG_SIZE  0x100000
+#define OPL2_DAT_BASE  0x14C000
+#define OPL2_DAT_SIZE   0x14000
+
+#define OPL3_MSG_BASE  0x300000
+#define OPL3_MSG_SIZE  0x100000
+#define OPL3_DAT_BASE  0x160000
+#define OPL3_DAT_SIZE   0x40000
+
+#undef BUFF_BASE_ADDRESS
+#undef NSUB_OFFSET
+#undef NEX_OFFSET
+#undef MSG_BUF_OFFSET
+#undef BUFPOS_OFFSET
+#undef READPOS_OFFSET
+#undef DATA_OFFSET
+#undef FNTAB_OFFSET
+#undef END_OFFSET
+
+#undef DATA_BASE_ADDRESS
+#undef NUMCHIP_OFFSET
+#undef TL_TAB_OFFSET
+#undef SIN_TAB_OFFSET
+#undef OPL_OFFSET
+#undef END_OFFSET2
+
+#undef MSG_BUF_SIZE
+#undef SHARED_BUF_SIZE
+#undef OPL_SIZE
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/gp2x.cpp wolf4sdl/GP2X/gp2x.cpp
--- Wolf4SDL-1.6-src/GP2X/gp2x.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/gp2x.cpp	2011-04-27 19:58:18.543203098 +0200
@@ -0,0 +1,327 @@
+//
+// GP2X specific code
+//
+// by Pickle
+//
+
+#if defined(GP2X)
+
+#include "gp2x.h"
+
+static bool volume_init = false;
+static unsigned int screenshot_count = 0;
+
+#if defined(GP2X_940)
+static int volume = 70;
+#else
+static int volume = 10;
+#endif
+
+static int intUp          = 0;
+static int intDown        = 0;
+static int intLeft        = 0;
+static int intRight       = 0;
+static int intUpRight     = 0;
+static int intUpLeft      = 0;
+static int intDownRight   = 0;
+static int intDownLeft    = 0;
+static int intButtonR     = 0;
+static int intButtonL     = 0;
+static int intButtonA     = 0;
+static int intButtonB     = 0;
+static int intButtonX     = 0;
+static int intButtonY     = 0;
+static int intButtonSel   = 0;
+static int intButtonSrt   = 0;
+static int intButtonStick = 0;
+
+#if defined(GP2X_940)
+void GP2X_Shutdown(void)
+{
+	YM3812Shutdown();
+}
+
+void GP2X_MemoryInit( void )
+{
+	SDL_GP2X_AllowGfxMemory(NULL,0);
+}
+#endif
+
+void GP2X_AdjustVolume( int direction )
+{
+	if( volume <= 10 )
+	{
+		if( direction == VOLUME_UP )   volume += VOLUME_CHANGE_RATE/2;
+		if( direction == VOLUME_DOWN ) volume -= VOLUME_CHANGE_RATE/2;
+	}
+	else
+	{
+		if( direction == VOLUME_UP )   volume += VOLUME_CHANGE_RATE;
+		if( direction == VOLUME_DOWN ) volume -= VOLUME_CHANGE_RATE;
+	}
+
+	if( volume < VOLUME_MIN ) volume = VOLUME_MIN;
+	if( volume > VOLUME_MAX ) volume = VOLUME_MAX;
+
+	printf( "Volume Change: %i\n", volume );
+
+	unsigned long soundDev = open("/dev/mixer", O_RDWR);
+	if(soundDev)
+	{
+		int vol = ((volume << 8) | volume);
+		ioctl(soundDev, SOUND_MIXER_WRITE_PCM, &vol);
+		close(soundDev);
+	}
+}
+
+void GP2X_ButtonDown( int button )
+{
+	if( !volume_init )
+	{
+		GP2X_AdjustVolume(VOLUME_NOCHG);
+		volume_init = 1;
+	}
+
+	switch( button )
+	{
+		case GP2X_BUTTON_UP:        intUp          = 1; break;
+		case GP2X_BUTTON_DOWN:      intDown        = 1; break;
+		case GP2X_BUTTON_RIGHT:     intRight       = 1; break;
+		case GP2X_BUTTON_LEFT:      intLeft        = 1; break;
+		case GP2X_BUTTON_UPRIGHT:   intUpRight     = 1; break;
+		case GP2X_BUTTON_UPLEFT:    intUpLeft      = 1; break;
+		case GP2X_BUTTON_DOWNRIGHT: intDownRight   = 1; break;
+		case GP2X_BUTTON_DOWNLEFT:  intDownLeft    = 1; break;
+		case GP2X_BUTTON_SELECT:    intButtonSel   = 1; break;
+		case GP2X_BUTTON_START:     intButtonSrt   = 1; break;
+		case GP2X_BUTTON_X:         intButtonX     = 1; LastASCII = 'x'; break;
+		case GP2X_BUTTON_Y:         intButtonY     = 1; LastASCII = 'y'; break;
+		case GP2X_BUTTON_A:         intButtonA     = 1; LastASCII = 'a'; break;
+		case GP2X_BUTTON_B:         intButtonB     = 1; LastASCII = 'b'; break;
+		case GP2X_BUTTON_R:         intButtonR     = 1; break;
+		case GP2X_BUTTON_L:         intButtonL     = 1; break;
+		case GP2X_BUTTON_VOLUP:     GP2X_AdjustVolume( VOLUME_UP   ); break;
+		case GP2X_BUTTON_VOLDOWN:   GP2X_AdjustVolume( VOLUME_DOWN ); break;
+		case GP2X_BUTTON_CLICK:     intButtonStick = 1; break;
+	}
+
+	if( intButtonL & intButtonR )
+	{
+		// Status Bar
+		SetKeyboard( SDLK_TAB, KEY_DOWN );
+
+		// Music Player (doesnt work, it appears the event's arnt happening soon enough)
+		SetKeyboard( sc_M, KEY_DOWN );
+
+		SetKeyboard( SDLK_LALT, KEY_UP );
+		SetKeyboard( SDLK_LEFT, KEY_UP );
+		SetKeyboard( SDLK_RIGHT, KEY_UP );
+	}
+	else if( intButtonL & !intButtonR )
+	{
+		// Strafe Left
+		SetKeyboard( SDLK_LALT, KEY_DOWN );
+		SetKeyboard( SDLK_LEFT, KEY_DOWN );
+	}
+	else if( intButtonR & !intButtonL )
+	{
+		// Strafe Right
+		SetKeyboard( SDLK_LALT,  KEY_DOWN );
+		SetKeyboard( SDLK_RIGHT, KEY_DOWN );
+	}
+
+	// Left Direction
+	if( intLeft  | intDownLeft  | intUpLeft   )
+	{
+		// UNstrafe
+		SetKeyboard( SDLK_LALT,  KEY_UP );
+		SetKeyboard( SDLK_RIGHT, KEY_UP );
+		// Turn
+		SetKeyboard( SDLK_LEFT, KEY_DOWN );
+	}
+
+	// Right Direction
+	if( intRight | intDownRight | intUpRight  )
+	{
+		// UNstrafe
+		SetKeyboard( SDLK_LALT, KEY_UP );
+		SetKeyboard( SDLK_LEFT, KEY_UP );
+		// Turn
+		SetKeyboard( SDLK_RIGHT, KEY_DOWN );
+	}
+
+	// Up Direction
+	if( intUp    | intUpRight   | intUpLeft   ) {
+		SetKeyboard( SDLK_UP, KEY_DOWN );
+	}
+	// Down Direction
+	if( intDown  | intDownRight | intDownLeft ) {
+		SetKeyboard( SDLK_DOWN, KEY_DOWN );
+	}
+
+	if( intButtonSel & intButtonSrt ) {
+		// Pause
+		SetKeyboard( SDLK_PAUSE, KEY_DOWN );
+	}
+	else if( intButtonL & intButtonSel ) {
+		fpscounter ^= 1;    // Turn On FPS Counter
+	}
+	else if( intButtonL & intButtonSrt ) {
+		Screenshot();
+	}
+	else if( intButtonSel & !intButtonSrt ) {
+		// Escape
+		SetKeyboard( SDLK_ESCAPE, KEY_DOWN );
+	}
+	else if( !intButtonSel & intButtonSrt ) {
+		// Enter
+		SetKeyboard( SDLK_RETURN, KEY_DOWN );
+	}
+
+	if( intButtonX   ) {
+		// Shoot
+		SetKeyboard( SDLK_LCTRL,  KEY_DOWN );
+	}
+	if( intButtonY   ) {
+		// Yes
+		SetKeyboard( SDLK_y,      KEY_DOWN );
+
+		if( gamestate.chosenweapon == gamestate.bestweapon )
+		{
+			SetKeyboard( SDLK_1, KEY_DOWN );
+		}
+		else
+		{
+			SetKeyboard( SDLK_1 + gamestate.chosenweapon + 1, KEY_DOWN );
+		}
+	}
+	if( intButtonA   ) {
+		// Open
+		SetKeyboard( SDLK_SPACE,  KEY_DOWN );
+	}
+	if( intButtonB   ) {
+		// No
+		SetKeyboard( SDLK_n,      KEY_DOWN );
+		// Run
+		SetKeyboard( SDLK_LSHIFT, KEY_DOWN );
+	}
+}
+
+void GP2X_ButtonUp( int button )
+{
+	switch( button )
+	{
+		case GP2X_BUTTON_UP:        intUp          = 0; break;
+		case GP2X_BUTTON_DOWN:      intDown        = 0; break;
+		case GP2X_BUTTON_RIGHT:     intRight       = 0; break;
+		case GP2X_BUTTON_LEFT:      intLeft        = 0; break;
+		case GP2X_BUTTON_UPRIGHT:   intUpRight     = 0; break;
+		case GP2X_BUTTON_UPLEFT:    intUpLeft      = 0; break;
+		case GP2X_BUTTON_DOWNRIGHT: intDownRight   = 0; break;
+		case GP2X_BUTTON_DOWNLEFT:  intDownLeft    = 0; break;
+		case GP2X_BUTTON_SELECT:    intButtonSel   = 0; break;
+		case GP2X_BUTTON_START:     intButtonSrt   = 0; break;
+		case GP2X_BUTTON_X:         intButtonX     = 0; break;
+		case GP2X_BUTTON_Y:         intButtonY     = 0; break;
+		case GP2X_BUTTON_A:         intButtonA     = 0; break;
+		case GP2X_BUTTON_B:         intButtonB     = 0; break;
+		case GP2X_BUTTON_R:         intButtonR     = 0; break;
+		case GP2X_BUTTON_L:         intButtonL     = 0; break;
+		case GP2X_BUTTON_CLICK:     intButtonStick = 0; break;
+	}
+
+	if( !intButtonL | !intButtonR )
+	{
+		SetKeyboard( SDLK_TAB,  KEY_UP );
+		SetKeyboard( sc_M,      KEY_UP );
+		SetKeyboard( SDLK_LALT, KEY_UP );
+	}
+
+	if( !intLeft & !intDownLeft & !intUpLeft )
+	{
+		if( !intButtonL )
+		{
+			SetKeyboard( SDLK_LALT,  KEY_UP );
+			SetKeyboard( SDLK_LEFT,  KEY_UP );
+		}
+		if( intButtonR )
+		{
+			SetKeyboard( SDLK_LALT,  KEY_DOWN );
+			SetKeyboard( SDLK_RIGHT, KEY_DOWN );
+		}
+	}
+
+	if( !intRight & !intDownRight & !intUpRight )
+	{
+		if( !intButtonR )
+		{
+			SetKeyboard( SDLK_LALT,   KEY_UP );
+			SetKeyboard( SDLK_RIGHT,  KEY_UP );
+		}
+		if( intButtonL )
+		{
+			SetKeyboard( SDLK_LALT, KEY_DOWN );
+			SetKeyboard( SDLK_LEFT, KEY_DOWN );
+		}
+	}
+
+	if( !intUp    & !intUpRight   & !intUpLeft   ) {
+		SetKeyboard( SDLK_UP,    KEY_UP );
+	}
+	if( !intDown  & !intDownRight & !intDownLeft ) {
+		SetKeyboard( SDLK_DOWN,  KEY_UP );
+	}
+
+	if( !intButtonSel & !intButtonSrt ) {
+		SetKeyboard( SDLK_PAUSE, KEY_UP );
+	}
+	if( !intButtonSel ) {
+		SetKeyboard( SDLK_ESCAPE, KEY_UP );
+	}
+	if( !intButtonSrt ) {
+		SetKeyboard( SDLK_RETURN, KEY_UP );
+	}
+
+	if( !intButtonX   ) {
+		SetKeyboard( SDLK_LCTRL,  KEY_UP );
+	}
+	if( !intButtonY   ) {
+		SetKeyboard( SDLK_y, KEY_UP );
+		SetKeyboard( SDLK_1, KEY_UP );
+		SetKeyboard( SDLK_2, KEY_UP );
+		SetKeyboard( SDLK_3, KEY_UP );
+		SetKeyboard( SDLK_4, KEY_UP );
+	}
+	if( !intButtonA   ) {
+		SetKeyboard( SDLK_SPACE,  KEY_UP );
+	}
+	if( !intButtonB   ) {
+		SetKeyboard( SDLK_n,      KEY_UP );
+		SetKeyboard( SDLK_LSHIFT, KEY_UP );
+	}
+}
+
+void Screenshot( void )
+{
+	char filename[32];
+
+	snprintf( filename, sizeof(filename), "Screenshot_%i.bmp", screenshot_count );
+	SDL_SaveBMP(screen, filename );
+	screenshot_count++;
+}
+
+void SetKeyboard( unsigned int key, int press )
+{
+	// press = 1 = down, press = 0 = up
+	if( press )
+	{
+		LastScan = key;
+		Keyboard[key] = 1;
+	}
+	else
+	{
+		Keyboard[key] = 0;
+	}
+}
+
+#endif // GP2X
diff -urN --exclude .git Wolf4SDL-1.6-src/GP2X/gp2x.h wolf4sdl/GP2X/gp2x.h
--- Wolf4SDL-1.6-src/GP2X/gp2x.h	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/GP2X/gp2x.h	2011-04-27 19:58:18.543203098 +0200
@@ -0,0 +1,54 @@
+#ifndef GP2X_H
+#define GP2X_H
+
+#include <SDL/SDL.h>
+#include <sys/ioctl.h>
+#include <sys/soundcard.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include "../wl_def.h"
+#if defined(GP2X_940)
+#include "fmopl.h"
+#include <SDL_gp2x.h>
+#endif
+
+#define GP2X_BUTTON_UP              (0)
+#define GP2X_BUTTON_DOWN            (4)
+#define GP2X_BUTTON_LEFT            (2)
+#define GP2X_BUTTON_RIGHT           (6)
+#define GP2X_BUTTON_UPLEFT          (1)
+#define GP2X_BUTTON_UPRIGHT         (7)
+#define GP2X_BUTTON_DOWNLEFT        (3)
+#define GP2X_BUTTON_DOWNRIGHT       (5)
+#define GP2X_BUTTON_CLICK           (18)
+#define GP2X_BUTTON_A               (12)
+#define GP2X_BUTTON_B               (13)
+#define GP2X_BUTTON_X               (14)
+#define GP2X_BUTTON_Y               (15)
+#define GP2X_BUTTON_L               (10)
+#define GP2X_BUTTON_R               (11)
+#define GP2X_BUTTON_START           (8)
+#define GP2X_BUTTON_SELECT          (9)
+#define GP2X_BUTTON_VOLUP           (16)
+#define GP2X_BUTTON_VOLDOWN         (17)
+
+#define VOLUME_MIN 0
+#define VOLUME_MAX 100
+#define VOLUME_CHANGE_RATE 2
+#define VOLUME_NOCHG 0
+#define VOLUME_DOWN 1
+#define VOLUME_UP 2
+#define KEY_DOWN 1
+#define KEY_UP 0
+
+void GP2X_MemoryInit(void);
+void GP2X_Shutdown(void);
+
+void GP2X_AdjustVolume( int direction );
+void GP2X_ButtonDown( int button );
+void GP2X_ButtonUp( int button );
+void Screenshot( void );
+void SetKeyboard( unsigned int key, int press );
+
+#endif // GP2X_H
diff -urN --exclude .git Wolf4SDL-1.6-src/Makefile.dc wolf4sdl/Makefile.dc
--- Wolf4SDL-1.6-src/Makefile.dc	2008-05-04 19:53:44.000000000 +0200
+++ wolf4sdl/Makefile.dc	2011-04-27 19:58:18.544203098 +0200
@@ -5,8 +5,11 @@
 #KOS_ROMDISK_DIR = romdisk
 
 #OBJS += romdisk.o
-OBJS += dc_main.o
-OBJS += dc_vmu.o
+OBJS += dc/dc_cd.o
+OBJS += dc/dc_main.o
+OBJS += dc/dc_maple.o
+OBJS += dc/dc_video.o
+OBJS += dc/dc_vmu.o
 OBJS += fmopl.o
 OBJS += id_ca.o
 OBJS += id_in.o
@@ -47,9 +50,6 @@
 	$(KOS_CC) $(KOS_CFLAGS) $(KOS_LDFLAGS) -o Wolf4SDL.elf $(KOS_START) \
 		$(OBJS) -lSDL_mixer -lSDL -lm -lz $(OBJEXTRA) $(KOS_LIBS)
 
-#Wolf4SDL.elf: $(OBJS)
-#	kos-cc -o Wolf4SDL.elf $(OBJS) -lSDL -lSDL_mixer -lm
-
 Wolf4SDL.bin: Wolf4SDL.elf
 	kos-objcopy -O binary -R .stack Wolf4SDL.elf Wolf4SDL.bin
 
diff -urN --exclude .git Wolf4SDL-1.6-src/README-dc.txt wolf4sdl/README-dc.txt
--- Wolf4SDL-1.6-src/README-dc.txt	2008-05-04 19:53:44.000000000 +0200
+++ wolf4sdl/README-dc.txt	2011-04-27 19:58:18.544203098 +0200
@@ -1,23 +1,18 @@
-Wolf4SDL\DC 1.5
-ported to Dreamcast by fackue
+Wolf4SDL\DC 1.7
+ported to Dreamcast by dcbasic
 
 A port of Wolf4SDL by Moritz "Ripper" Kroll.
 
-What's new in 1.5:
-- Mouse support
-- Weapon switch support
-- Controllers with C & Z button support
-- Command line parameters via 'params.txt' support
-- SOD mission pack support via menu
-- Commercial CD-ROM swap support
+What's new in 1.7:
+- See Changes-dc.txt
 
 Instructions:
 - Extract the Wolf4SDL\DC archive to it's own folder.
-- Put your *.wl6 files inside /wolf3d (if you have a commercial CD-ROM release
-  of Wolfenstein you can skip this step).
-- If you want use the command line, create a text file called 'params.txt'
-  (without quotes) in the folder you extracted Wolf4SDL\DC to and add any
-  valid parameters. Please keep them on one line.
+- Put your *.wl6 files inside /cd/data/wolf3d (if you have a commercial CD-ROM
+  release of Wolfenstein you can skip this step).
+- If you want to use the command line, create a text file called 'args.txt'
+  (without quotes) in the /cd/data/wolf3d folder and add any valid
+  arguments. Please keep them on one line.
 - Download and install BootDreams (http://dchelp.dcemulation.org/?BootDreams).
 - Open the folder you extracted Wolf4SDL\DC to in BootDreams.
 - Select a task. If you'd like to burn Wolf4SDL\DC directly to a CD-R, select
@@ -30,7 +25,7 @@
 - If you have a commercial CD-ROM, wait until you're asked to swap in your
   copy of Wolfenstein 3D, swap your copy in, press start and play.
 
-Valid Parameters:
+Valid Arguments:
 --goobers (Wolfenstein 3D only)
 --debugkeys (Spear of Destiny only)
 --goodtimes (Spear of Destiny only)
@@ -41,15 +36,23 @@
 --hard
 --tedlevel <level>
 --res <width> <height> (default 320x200)
+--resf <width> <height>
+--bits <screen_bits> (default 8)
+--dblbuf
+--extravbls <vbls>
 --samplerate <rate> (default 11025)
 --audiobuffer <size> (default 4096)
 
 Notes:
-- The --res parameter will also except '640 400' but will slow rendering down
-  greatly.
+- The --res argument will also except '640 400' but will slow rendering down
+  greatly. The width must be a multiple of 320 and the height must be a
+  multiple of 200 or 240.
+- The --resf argument will force the passed screen resolution but may result
+  in graphic corruption.
 - The default samplerate is 11025 to keep the extra SOD missions from running
   out of memory. Wolfenstein 3D and the original SOD mission will happily run
   with the samplerate set to 22050.
+- The --dblbuf argument works but slows speed down by about 10 frames.
 
 Compiling:
 This port was developed under Code::Blocks 8.02 with the DC Dev ISO R4
diff -urN --exclude .git Wolf4SDL-1.6-src/README.txt wolf4sdl/README.txt
--- Wolf4SDL-1.6-src/README.txt	2008-09-01 02:32:04.000000000 +0200
+++ wolf4sdl/README.txt	2011-04-27 19:58:18.545203098 +0200
@@ -16,6 +16,7 @@
          (32 and 64 bit)
        - Linux
        - BSD variants
+       - Mac OS X (x86)
        - KallistiOS (used for Dreamcast)
       Only little endian platforms like x86, ARM and SH-4 are supported, yet.
 
@@ -121,6 +122,9 @@
                         (Use this when you have palette/fading problem
                         or perhaps to optimize speed on old systems.
                         Allowed: 8, 16, 24, 32, default: "best" depth)
+ --extravbls <vbls>     Sets a delay after each frame, which may help to
+                        reduce flickering (SDL does not support vsync...)
+                        (unit is currently 8 ms, default: 0)
  --joystick <index>     Use the index-th joystick if available
  --joystickhat <index>  Enables movement with the given coolie hat
  --samplerate <rate>    Sets the sound sample rate (given in Hz)
diff -urN --exclude .git Wolf4SDL-1.6-src/Wolf4SDL-DC.cbp wolf4sdl/Wolf4SDL-DC.cbp
--- Wolf4SDL-1.6-src/Wolf4SDL-DC.cbp	2008-05-04 02:05:26.000000000 +0200
+++ wolf4sdl/Wolf4SDL-DC.cbp	2011-04-27 19:58:18.545203098 +0200
@@ -24,9 +24,13 @@
 		</Build>
 		<Unit filename="audiosod.h" />
 		<Unit filename="audiowl6.h" />
-		<Unit filename="dc_main.cpp" />
-		<Unit filename="dc_vmu.cpp" />
-		<Unit filename="dc_vmu.h" />
+		<Unit filename="dc\dc_cd.cpp" />
+		<Unit filename="dc\dc_main.cpp" />
+		<Unit filename="dc\dc_main.h" />
+		<Unit filename="dc\dc_maple.cpp" />
+		<Unit filename="dc\dc_video.cpp" />
+		<Unit filename="dc\dc_vmu.cpp" />
+		<Unit filename="dc\dc_vmu.h" />
 		<Unit filename="f_spear.h" />
 		<Unit filename="fmopl.cpp" />
 		<Unit filename="fmopl.h" />
diff -urN --exclude .git Wolf4SDL-1.6-src/Wolf4SDL-GP2X.cbp wolf4sdl/Wolf4SDL-GP2X.cbp
--- Wolf4SDL-1.6-src/Wolf4SDL-GP2X.cbp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/Wolf4SDL-GP2X.cbp	2011-04-27 19:58:18.545203098 +0200
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
+<CodeBlocks_project_file>
+	<FileVersion major="1" minor="6" />
+	<Project>
+		<Option title="Wolf4SDL" />
+		<Option pch_mode="2" />
+		<Option compiler="devkitgp2x" />
+		<Build>
+			<Target title="default">
+				<Option output="Wolf4SDL" prefix_auto="1" extension_auto="1" />
+				<Option type="0" />
+				<Option compiler="devkitgp2x" />
+			</Target>
+		</Build>
+		<Compiler>
+			<Add option="-DGP2X" />
+		</Compiler>
+		<Linker>
+			<Add library="SDL" />
+			<Add library="SDL_mixer" />
+			<Add library="iconv" />
+		</Linker>
+		<Unit filename="GP2X/gp2x.cpp" />
+		<Unit filename="GP2X/gp2x.h" />
+		<Unit filename="audiosod.h" />
+		<Unit filename="audiowl6.h" />
+		<Unit filename="f_spear.h" />
+		<Unit filename="fmopl.cpp" />
+		<Unit filename="fmopl.h" />
+		<Unit filename="foreign.h" />
+		<Unit filename="gfxv_apo.h" />
+		<Unit filename="gfxv_sod.h" />
+		<Unit filename="gfxv_wl6.h" />
+		<Unit filename="id_ca.cpp" />
+		<Unit filename="id_ca.h" />
+		<Unit filename="id_in.cpp" />
+		<Unit filename="id_in.h" />
+		<Unit filename="id_pm.cpp" />
+		<Unit filename="id_sd.cpp" />
+		<Unit filename="id_sd.h" />
+		<Unit filename="id_us.h" />
+		<Unit filename="id_us_1.cpp" />
+		<Unit filename="id_vh.cpp" />
+		<Unit filename="id_vh.h" />
+		<Unit filename="id_vl.cpp" />
+		<Unit filename="id_vl.h" />
+		<Unit filename="sdl_winmain.cpp" />
+		<Unit filename="signon.cpp" />
+		<Unit filename="version.h" />
+		<Unit filename="wl_act1.cpp" />
+		<Unit filename="wl_act2.cpp" />
+		<Unit filename="wl_agent.cpp" />
+		<Unit filename="wl_debug.cpp" />
+		<Unit filename="wl_def.h" />
+		<Unit filename="wl_draw.cpp" />
+		<Unit filename="wl_game.cpp" />
+		<Unit filename="wl_inter.cpp" />
+		<Unit filename="wl_main.cpp" />
+		<Unit filename="wl_menu.cpp" />
+		<Unit filename="wl_menu.h" />
+		<Unit filename="wl_play.cpp" />
+		<Unit filename="wl_state.cpp" />
+		<Unit filename="wl_text.cpp" />
+		<Extensions>
+			<code_completion />
+			<envvars />
+			<debugger />
+			<lib_finder />
+		</Extensions>
+	</Project>
+</CodeBlocks_project_file>
diff -urN --exclude .git Wolf4SDL-1.6-src/Wolf4SDL.VC9.vcproj wolf4sdl/Wolf4SDL.VC9.vcproj
--- Wolf4SDL-1.6-src/Wolf4SDL.VC9.vcproj	2008-05-15 02:30:02.000000000 +0200
+++ wolf4sdl/Wolf4SDL.VC9.vcproj	2011-04-27 19:58:18.545203098 +0200
@@ -176,22 +176,10 @@
 			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
 			>
 			<File
-				RelativePath=".\dc_main.cpp"
-				>
-			</File>
-			<File
-				RelativePath=".\dc_vmu.cpp"
-				>
-			</File>
-			<File
 				RelativePath=".\fmopl.cpp"
 				>
 			</File>
 			<File
-				RelativePath=".\gp2x.cpp"
-				>
-			</File>
-			<File
 				RelativePath=".\id_ca.cpp"
 				>
 			</File>
@@ -307,6 +295,30 @@
 				RelativePath=".\wolfpal.inc"
 				>
 			</File>
+			<Filter
+				Name="dc"
+				>
+				<File
+					RelativePath=".\dc\dc_cd.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\dc\dc_main.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\dc\dc_maple.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\dc\dc_video.cpp"
+					>
+				</File>
+				<File
+					RelativePath=".\dc\dc_vmu.cpp"
+					>
+				</File>
+			</Filter>
 		</Filter>
 		<Filter
 			Name="Header Files"
@@ -405,6 +417,18 @@
 				RelativePath=".\wl_shade.h"
 				>
 			</File>
+			<Filter
+				Name="dc"
+				>
+				<File
+					RelativePath=".\dc\dc_main.h"
+					>
+				</File>
+				<File
+					RelativePath=".\dc\dc_vmu.h"
+					>
+				</File>
+			</Filter>
 		</Filter>
 		<Filter
 			Name="Resource Files"
diff -urN --exclude .git Wolf4SDL-1.6-src/Wolf4SDL.dsp wolf4sdl/Wolf4SDL.dsp
--- Wolf4SDL-1.6-src/Wolf4SDL.dsp	2008-09-01 02:32:04.000000000 +0200
+++ wolf4sdl/Wolf4SDL.dsp	2011-04-27 19:58:18.546203098 +0200
@@ -1,303 +1,303 @@
-# Microsoft Developer Studio Project File - Name="Wolf4SDL" - Package Owner=<4>
-# Microsoft Developer Studio Generated Build File, Format Version 6.00
-# ** DO NOT EDIT **
-
-# TARGTYPE "Win32 (x86) Application" 0x0101
-
-CFG=Wolf4SDL - Win32 Debug
-!MESSAGE This is not a valid makefile. To build this project using NMAKE,
-!MESSAGE use the Export Makefile command and run
-!MESSAGE 
-!MESSAGE NMAKE /f "Wolf4SDL.mak".
-!MESSAGE 
-!MESSAGE You can specify a configuration when running NMAKE
-!MESSAGE by defining the macro CFG on the command line. For example:
-!MESSAGE 
-!MESSAGE NMAKE /f "Wolf4SDL.mak" CFG="Wolf4SDL - Win32 Debug"
-!MESSAGE 
-!MESSAGE Possible choices for configuration are:
-!MESSAGE 
-!MESSAGE "Wolf4SDL - Win32 Release" (based on "Win32 (x86) Application")
-!MESSAGE "Wolf4SDL - Win32 Debug" (based on "Win32 (x86) Application")
-!MESSAGE 
-
-# Begin Project
-# PROP AllowPerConfigDependencies 0
-# PROP Scc_ProjName ""
-# PROP Scc_LocalPath ""
-CPP=cl.exe
-MTL=midl.exe
-RSC=rc.exe
-
-!IF  "$(CFG)" == "Wolf4SDL - Win32 Release"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 0
-# PROP BASE Output_Dir "Release"
-# PROP BASE Intermediate_Dir "Release"
-# PROP BASE Target_Dir ""
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 0
-# PROP Output_Dir "Release"
-# PROP Intermediate_Dir "Release"
-# PROP Ignore_Export_Lib 0
-# PROP Target_Dir ""
-# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_MBCS" /YX /FD /c
-# ADD CPP /nologo /MT /W3 /GX /O2 /I "c:\sdl-1.2.12\include" /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_MBCS" /YX /FD /c
-# ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /win32
-# ADD MTL /nologo /D "NDEBUG" /mktyplib203 /win32
-# ADD BASE RSC /l 0x407 /d "NDEBUG"
-# ADD RSC /l 0x407 /d "NDEBUG"
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /machine:I386
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib  SDL_mixer.lib SDL.lib /nologo /subsystem:windows /machine:I386 /libpath:"c:\sdl-1.2.12\lib"
-
-!ELSEIF  "$(CFG)" == "Wolf4SDL - Win32 Debug"
-
-# PROP BASE Use_MFC 0
-# PROP BASE Use_Debug_Libraries 1
-# PROP BASE Output_Dir "Debug"
-# PROP BASE Intermediate_Dir "Debug"
-# PROP BASE Target_Dir ""
-# PROP Use_MFC 0
-# PROP Use_Debug_Libraries 1
-# PROP Output_Dir "Debug"
-# PROP Intermediate_Dir "Debug"
-# PROP Ignore_Export_Lib 0
-# PROP Target_Dir ""
-# ADD BASE CPP /nologo /W3 /Gm /GX /ZI /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_MBCS" /YX /FD /GZ /c
-# ADD CPP /nologo /MTd /W3 /Gm /GX /ZI /Od /I "c:\sdl-1.2.12\include" /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_MBCS" /FR /YX /FD /GZ /c
-# ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /win32
-# ADD MTL /nologo /D "_DEBUG" /mktyplib203 /win32
-# ADD BASE RSC /l 0x407 /d "_DEBUG"
-# ADD RSC /l 0x407 /d "_DEBUG"
-BSC32=bscmake.exe
-# ADD BASE BSC32 /nologo
-# ADD BSC32 /nologo
-LINK32=link.exe
-# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept
-# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib SDL_mixer.lib SDL.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept /libpath:"c:\sdl-1.2.12\lib"
-
-!ENDIF 
-
-# Begin Target
-
-# Name "Wolf4SDL - Win32 Release"
-# Name "Wolf4SDL - Win32 Debug"
-# Begin Group "Source Files"
-
-# PROP Default_Filter "cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
-# Begin Source File
-
-SOURCE=.\fmopl.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_ca.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_in.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_pm.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_sd.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_us_1.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_vh.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_vl.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\sdl_winmain.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\signon.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_act1.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_act2.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_agent.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_atmos.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_cloudsky.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_debug.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_dir3dspr.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_draw.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_floorceiling.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_game.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_inter.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_main.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_menu.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_parallax.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_play.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_shade.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_state.cpp
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_text.cpp
-# End Source File
-# End Group
-# Begin Group "Header Files"
-
-# PROP Default_Filter "h;hpp;hxx;hm;inl"
-# Begin Source File
-
-SOURCE=.\audiosod.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\audiowl6.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\dc_vmu.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\f_spear.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\fmopl.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\foreign.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\gfxv_apo.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\gfxv_sod.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\gfxv_wl6.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_ca.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_in.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_pm.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_sd.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_us.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_vh.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\id_vl.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\version.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_atmos.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_cloudsky.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_def.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_menu.h
-# End Source File
-# Begin Source File
-
-SOURCE=.\wl_shade.h
-# End Source File
-# End Group
-# Begin Group "Resource Files"
-
-# PROP Default_Filter "ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe"
-# End Group
-# End Target
-# End Project
+# Microsoft Developer Studio Project File - Name="Wolf4SDL" - Package Owner=<4>
+# Microsoft Developer Studio Generated Build File, Format Version 6.00
+# ** DO NOT EDIT **
+
+# TARGTYPE "Win32 (x86) Application" 0x0101
+
+CFG=Wolf4SDL - Win32 Debug
+!MESSAGE This is not a valid makefile. To build this project using NMAKE,
+!MESSAGE use the Export Makefile command and run
+!MESSAGE 
+!MESSAGE NMAKE /f "Wolf4SDL.mak".
+!MESSAGE 
+!MESSAGE You can specify a configuration when running NMAKE
+!MESSAGE by defining the macro CFG on the command line. For example:
+!MESSAGE 
+!MESSAGE NMAKE /f "Wolf4SDL.mak" CFG="Wolf4SDL - Win32 Debug"
+!MESSAGE 
+!MESSAGE Possible choices for configuration are:
+!MESSAGE 
+!MESSAGE "Wolf4SDL - Win32 Release" (based on "Win32 (x86) Application")
+!MESSAGE "Wolf4SDL - Win32 Debug" (based on "Win32 (x86) Application")
+!MESSAGE 
+
+# Begin Project
+# PROP AllowPerConfigDependencies 0
+# PROP Scc_ProjName ""
+# PROP Scc_LocalPath ""
+CPP=cl.exe
+MTL=midl.exe
+RSC=rc.exe
+
+!IF  "$(CFG)" == "Wolf4SDL - Win32 Release"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 0
+# PROP BASE Output_Dir "Release"
+# PROP BASE Intermediate_Dir "Release"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 0
+# PROP Output_Dir "Release"
+# PROP Intermediate_Dir "Release"
+# PROP Ignore_Export_Lib 0
+# PROP Target_Dir ""
+# ADD BASE CPP /nologo /W3 /GX /O2 /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_MBCS" /YX /FD /c
+# ADD CPP /nologo /MT /W3 /GX /O2 /I "c:\sdl-1.2.12\include" /D "WIN32" /D "NDEBUG" /D "_WINDOWS" /D "_MBCS" /YX /FD /c
+# ADD BASE MTL /nologo /D "NDEBUG" /mktyplib203 /win32
+# ADD MTL /nologo /D "NDEBUG" /mktyplib203 /win32
+# ADD BASE RSC /l 0x407 /d "NDEBUG"
+# ADD RSC /l 0x407 /d "NDEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /machine:I386
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib  SDL_mixer.lib SDL.lib /nologo /subsystem:windows /machine:I386 /libpath:"c:\sdl-1.2.12\lib"
+
+!ELSEIF  "$(CFG)" == "Wolf4SDL - Win32 Debug"
+
+# PROP BASE Use_MFC 0
+# PROP BASE Use_Debug_Libraries 1
+# PROP BASE Output_Dir "Debug"
+# PROP BASE Intermediate_Dir "Debug"
+# PROP BASE Target_Dir ""
+# PROP Use_MFC 0
+# PROP Use_Debug_Libraries 1
+# PROP Output_Dir "Debug"
+# PROP Intermediate_Dir "Debug"
+# PROP Ignore_Export_Lib 0
+# PROP Target_Dir ""
+# ADD BASE CPP /nologo /W3 /Gm /GX /ZI /Od /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_MBCS" /YX /FD /GZ /c
+# ADD CPP /nologo /MTd /W3 /Gm /GX /ZI /Od /I "c:\sdl-1.2.12\include" /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_MBCS" /FR /YX /FD /GZ /c
+# ADD BASE MTL /nologo /D "_DEBUG" /mktyplib203 /win32
+# ADD MTL /nologo /D "_DEBUG" /mktyplib203 /win32
+# ADD BASE RSC /l 0x407 /d "_DEBUG"
+# ADD RSC /l 0x407 /d "_DEBUG"
+BSC32=bscmake.exe
+# ADD BASE BSC32 /nologo
+# ADD BSC32 /nologo
+LINK32=link.exe
+# ADD BASE LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept
+# ADD LINK32 kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib SDL_mixer.lib SDL.lib /nologo /subsystem:windows /debug /machine:I386 /pdbtype:sept /libpath:"c:\sdl-1.2.12\lib"
+
+!ENDIF 
+
+# Begin Target
+
+# Name "Wolf4SDL - Win32 Release"
+# Name "Wolf4SDL - Win32 Debug"
+# Begin Group "Source Files"
+
+# PROP Default_Filter "cpp;c;cxx;rc;def;r;odl;idl;hpj;bat"
+# Begin Source File
+
+SOURCE=.\fmopl.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_ca.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_in.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_pm.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_sd.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_us_1.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_vh.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_vl.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\sdl_winmain.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\signon.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_act1.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_act2.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_agent.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_atmos.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_cloudsky.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_debug.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_dir3dspr.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_draw.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_floorceiling.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_game.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_inter.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_main.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_menu.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_parallax.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_play.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_shade.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_state.cpp
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_text.cpp
+# End Source File
+# End Group
+# Begin Group "Header Files"
+
+# PROP Default_Filter "h;hpp;hxx;hm;inl"
+# Begin Source File
+
+SOURCE=.\audiosod.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\audiowl6.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\dc_vmu.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\f_spear.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\fmopl.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\foreign.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\gfxv_apo.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\gfxv_sod.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\gfxv_wl6.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_ca.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_in.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_pm.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_sd.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_us.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_vh.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\id_vl.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\version.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_atmos.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_cloudsky.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_def.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_menu.h
+# End Source File
+# Begin Source File
+
+SOURCE=.\wl_shade.h
+# End Source File
+# End Group
+# Begin Group "Resource Files"
+
+# PROP Default_Filter "ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe"
+# End Group
+# End Target
+# End Project
diff -urN --exclude .git Wolf4SDL-1.6-src/Wolf4SDL.dsw wolf4sdl/Wolf4SDL.dsw
--- Wolf4SDL-1.6-src/Wolf4SDL.dsw	2008-04-25 22:27:32.000000000 +0200
+++ wolf4sdl/Wolf4SDL.dsw	2011-04-27 19:58:18.546203098 +0200
@@ -1,29 +1,29 @@
-Microsoft Developer Studio Workspace File, Format Version 6.00
-# WARNING: DO NOT EDIT OR DELETE THIS WORKSPACE FILE!
-
-###############################################################################
-
-Project: "Wolf4SDL"=".\Wolf4SDL.dsp" - Package Owner=<4>
-
-Package=<5>
-{{{
-}}}
-
-Package=<4>
-{{{
-}}}
-
-###############################################################################
-
-Global:
-
-Package=<5>
-{{{
-}}}
-
-Package=<3>
-{{{
-}}}
-
-###############################################################################
-
+Microsoft Developer Studio Workspace File, Format Version 6.00
+# WARNING: DO NOT EDIT OR DELETE THIS WORKSPACE FILE!
+
+###############################################################################
+
+Project: "Wolf4SDL"=".\Wolf4SDL.dsp" - Package Owner=<4>
+
+Package=<5>
+{{{
+}}}
+
+Package=<4>
+{{{
+}}}
+
+###############################################################################
+
+Global:
+
+Package=<5>
+{{{
+}}}
+
+Package=<3>
+{{{
+}}}
+
+###############################################################################
+
diff -urN --exclude .git Wolf4SDL-1.6-src/dc/dc_cd.cpp wolf4sdl/dc/dc_cd.cpp
--- Wolf4SDL-1.6-src/dc/dc_cd.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/dc/dc_cd.cpp	2011-04-27 19:58:18.546203098 +0200
@@ -0,0 +1,16 @@
+//Wolf4SDL\DC
+//dc_cd.cpp
+//2009 - Cyle Terry
+
+#if defined(_arch_dreamcast)
+
+#include "dc/cdrom.h"
+
+int DC_CheckDrive() {
+    int disc_status;
+    int disc_type;
+    cdrom_get_status(&disc_status, &disc_type);
+    return disc_status;
+}
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/dc/dc_main.cpp wolf4sdl/dc/dc_main.cpp
--- Wolf4SDL-1.6-src/dc/dc_main.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/dc/dc_main.cpp	2011-04-27 19:58:18.546203098 +0200
@@ -0,0 +1,377 @@
+//Wolf4SDL\DC
+//dc_main.cpp
+//2009 - Cyle Terry
+
+#if defined(_arch_dreamcast)
+
+//TODO: Use Port A Only
+
+#include <string.h>
+#include "../wl_def.h"
+#include "dc/video.h"
+#include "kos/dbglog.h"
+#include "kos/fs.h"
+#include "zlib/zlib.h"
+
+char dcwolf3dpath[1024];
+
+void DC_CheckArguments() {
+    FILE *fp;
+    char *buf;
+    char *result = NULL;
+
+    bool  sampleRateGiven = false;
+    bool  audioBufferGiven = false;
+    int   length = 0;
+
+    fp = fopen("/cd/data/wolf3d/args.txt", "r");
+    if (!fp)
+        return;
+    fseek(fp, 0, SEEK_END);
+    length = ftell (fp);
+    fseek(fp, 0, SEEK_SET);
+    buf = (char *)malloc(length + 2);
+    fread(buf, 1, length, fp);
+    buf[length] = 0;
+    fclose(fp);
+    result = strtok(buf, " ");
+
+    while (result != NULL) {
+#ifndef SPEAR
+        if (!strcmp(result, "--goobers"))
+#else
+        if (!strcmp(result, "--debugmode"))
+#endif
+            param_debugmode = true;
+        else if (!strcmp(result, "--baby"))
+            param_difficulty = 0;
+        else if (!strcmp(result, "--easy"))
+            param_difficulty = 1;
+        else if (!strcmp(result, "--normal"))
+            param_difficulty = 2;
+        else if (!strcmp(result, "--hard"))
+            param_difficulty = 3;
+        else if (!strcmp(result, "--nowait"))
+            param_nowait = true;
+        else if (!strcmp(result, "--tedlevel")) {
+            result = strtok(NULL, " ");
+            param_tedlevel = atoi(result);
+        } else if (!strcmp(result, "--res")) {
+            result = strtok(NULL, " ");
+            screenWidth = atoi(result);
+            result = strtok(NULL, " ");
+            screenHeight = atoi(result);
+            if ( screenWidth % 320 && screenHeight % 200) {
+                dbglog(DBG_DEBUG, "Screen height\\width must be a multiple of 320x200\n");
+                dbglog(DBG_DEBUG, "Defaulting to 320x200\n");
+                screenWidth = 320;
+                screenHeight = 200;
+            }
+        } else if (!strcmp(result, "--resf")) {
+            result = strtok(NULL, " ");
+            screenWidth = atoi(result);
+            result = strtok(NULL, " ");
+            screenHeight = atoi(result);
+            if (screenWidth < 320 && screenHeight < 200) {
+                dbglog(DBG_DEBUG, "Screen height\\width must be at least 320x200\n");
+                dbglog(DBG_DEBUG, "Defaulting to 320x200\n");
+                screenWidth = 320;
+                screenHeight = 200;
+            }
+        } else if (!strcmp(result, "--bits")) {
+            result = strtok(NULL, " ");
+            screenBits = atoi(result);
+            switch (screenBits) {
+                case 8:
+                case 16:
+                case 24:
+                case 32:
+                    break;
+                default:
+                    dbglog(DBG_DEBUG, "Screen bits must be either 8, 16, 24 or 32\n");
+                    dbglog(DBG_DEBUG, "Defaulting to 8\n");
+                    screenBits = 8;
+                    break;
+            }
+            result = strtok(NULL, " ");
+            param_samplerate = atoi(result);
+            sampleRateGiven = true;
+        } else if (!strcmp(result, "--dblbuf")) {   //Was --nodblbuf
+            usedoublebuffering = true;
+        } else if (!strcmp(result, "--extravbls")) {
+            result = strtok(NULL, " ");
+            extravbls = atoi(result);
+            if(extravbls < 0) {
+                dbglog(DBG_DEBUG, "Extravbls must be positive!\n");
+                dbglog(DBG_DEBUG, "Defaulting to 0\n");
+                extravbls = 0;
+            }
+        } else if (!strcmp(result, "--samplerate")) {
+            result = strtok(NULL, " ");
+            param_samplerate = atoi(result);
+            sampleRateGiven = true;
+        } else if (!strcmp(result, "--audiobuffer")) {
+            result = strtok(NULL, " ");
+            param_audiobuffer = atoi(result);
+            audioBufferGiven = true;
+        } else if (!strcmp(result, "--goodtimes"))
+            param_goodtimes = true;
+
+        result = strtok(NULL, " ");
+    }
+
+    free(buf);
+
+    if (sampleRateGiven && !audioBufferGiven)
+        param_audiobuffer = 4096 / (44100 / param_samplerate);
+}
+
+
+int DC_CheckForMaps(char *path) {
+    file_t dir;
+    dirent_t *dirent;
+    char fpath[1024];
+    int disc_status;
+
+    for(;;) {
+        SDL_Delay(5);
+        disc_status = DC_CheckDrive();
+#ifdef SPEAR
+        DC_DrawString(4, 1, "Sod4SDL\\DC");
+#else
+        DC_DrawString(4, 1, "Wolf4SDL\\DC");
+#endif
+        switch(disc_status) {
+            //case CD_STATUS_BUSY:
+            //case CD_STATUS_OPEN:
+            //    DC_DrawString(4, 6, "Please insert your Wolfenstein 3D CD.");
+            //    break;
+            default:
+                dir = fs_open(path, O_DIR);
+                while(dirent = fs_readdir(dir)) {
+#ifdef SPEAR
+#ifdef SPEARDEMO
+                    if(!strcmp(dirent->name, "AUDIOHED.SDM")) {
+                        fs_close(dir);
+                        strcpy(dcwolf3dpath, path);
+                        return 0;
+                    }
+#else
+                    if(!strcmp(dirent->name, "AUDIOHED.SOD")) {
+                        fs_close(dir);
+                        strcpy(dcwolf3dpath, path);
+                        param_mission = DC_SetMission(path);
+                        return 0;
+                    }
+#endif
+#else
+#ifdef UPLOAD
+                    if(!strcmp(dirent->name, "AUDIOHED.WL1")) {
+                        fs_close(dir);
+                        strcpy(dcwolf3dpath, path);
+                        return 0;
+                    }
+#else
+                    if(!strcmp(dirent->name, "AUDIOHED.WL6")) {
+                        fs_close(dir);
+                        strcpy(dcwolf3dpath, path);
+                        return 0;
+                    }
+#endif
+#endif
+                    strcpy(fpath, path);
+                    sprintf(fpath, "%s/%s", fpath, dirent->name);
+                    DC_CheckForMaps(fpath);
+                }
+                fs_close(dir);
+                return -1;
+        }
+        DC_Flip();
+    }
+}
+
+void DC_LoadMaps() {
+    DC_CheckForMaps("/cd");
+    DC_CLS();
+
+    fs_chdir(dcwolf3dpath);
+
+#ifdef SPEAR
+#ifndef SPEARDEMO
+    fs_copy("audiohed.sod", "/ram/audiohed.sod");
+    fs_copy("audiot.sod", "/ram/audiot.sod");
+    fs_copy("vgadict.sod", "/ram/vgadict.sod");
+    fs_copy("vgagraph.sod", "/ram/vgagraph.sod");
+    fs_copy("vgahead.sod", "/ram/vgahead.sod");
+    switch(param_mission) {
+        case 0:
+            fs_copy("gamemaps.sod", "/ram/gamemaps.sod");
+            fs_copy("maphead.sod", "/ram/maphead.sod");
+            fs_copy("vswap.sod", "/ram/vswap.sod");
+            break;
+        case 1:
+            fs_copy("gamemaps.sd1", "/ram/gamemaps.sd1");
+            fs_copy("maphead.sd1", "/ram/maphead.sd1");
+            fs_copy("vswap.sd1", "/ram/vswap.sd1");
+            break;
+        case 2:
+            fs_copy("gamemaps.sd2", "/ram/gamemaps.sd2");
+            fs_copy("maphead.sd2", "/ram/maphead.sd2");
+            fs_copy("vswap.sd2", "/ram/vswap.sd2");
+            break;
+        case 3:
+            fs_copy("gamemaps.sd3", "/ram/gamemaps.sd3");
+            fs_copy("maphead.sd3", "/ram/maphead.sd3");
+            fs_copy("vswap.sd3", "/ram/vswap.sd3");
+            break;
+    }
+#else
+    fs_copy("audiohed.sdm", "/ram/audiohed.sdm");
+    fs_copy("audiot.sdm", "/ram/audiot.sdm");
+    fs_copy("vgadict.sdm", "/ram/vgadict.sdm");
+    fs_copy("vgagraph.sdm", "/ram/vgagraph.sdm");
+    fs_copy("vgahead.sdm", "/ram/vgahead.sdm");
+    fs_copy("gamemaps.sdm", "/ram/gamemaps.sdm");
+    fs_copy("maphead.sdm", "/ram/maphead.sdm");
+    fs_copy("vswap.sdm", "/ram/vswap.sdm");
+#endif
+#else
+#ifndef UPLOAD
+    fs_copy("audiohed.wl6", "/ram/audiohed.wl6");
+    fs_copy("audiot.wl6", "/ram/audiot.wl6");
+    fs_copy("vgadict.wl6", "/ram/vgadict.wl6");
+    fs_copy("vgagraph.wl6", "/ram/vgagraph.wl6");
+    fs_copy("vgahead.wl6", "/ram/vgahead.wl6");
+    fs_copy("gamemaps.wl6", "/ram/gamemaps.wl6");
+    fs_copy("maphead.wl6", "/ram/maphead.wl6");
+    fs_copy("vswap.wl6", "/ram/vswap.wl6");
+#else
+    fs_copy("audiohed.wl1", "/ram/audiohed.wl1");
+    fs_copy("audiot.wl1", "/ram/audiot.wl1");
+    fs_copy("vgadict.wl1", "/ram/vgadict.wl1");
+    fs_copy("vgagraph.wl1", "/ram/vgagraph.wl1");
+    fs_copy("vgahead.wl1", "/ram/vgahead.wl1");
+    fs_copy("gamemaps.wl1", "/ram/gamemaps.wl1");
+    fs_copy("maphead.wl1", "/ram/maphead.wl1");
+    fs_copy("vswap.wl1", "/ram/vswap.wl1");
+#endif
+#endif
+
+    fs_chdir("/ram");
+}
+
+
+void DC_Init() {
+    DC_CheckArguments();
+    DC_VideoInit();
+    DC_LoadMaps();
+    DC_CLS();
+}
+
+#ifdef  SPEAR
+#ifndef SPEARDEMO
+
+int DC_SetMission(char *path) {
+    int mission1 = 0;
+    int mission2 = 0;
+    int mission3 = 0;
+    int missions = 0;
+    int last_mission = 0;
+    int current_mission = 0;
+    int previous_mission = 0;
+    int font_y = 0;
+    char fname[1024];
+    bool finished = false;
+    FILE *fp;
+
+    sprintf(fname, "%s/MAPHEAD.SOD", path);
+    fp = fopen(fname, "r");
+    if(fp) {
+        fclose(fp);
+        last_mission = 1;
+        mission1 = 1;
+        missions++;
+    }
+
+    sprintf(fname, "%s/MAPHEAD.SD2", path);
+    fp = fopen(fname, "r");
+    if(fp) {
+        fclose(fp);
+        last_mission = 2;
+        mission2 = 1;
+        missions++;
+    }
+
+    sprintf(fname, "%s/MAPHEAD.SD3", path);
+    fp = fopen(fname, "r");
+    if(fp) {
+        fclose(fp);
+        last_mission = 3;
+        mission3 = 1;
+        missions++;
+    }
+
+    if(missions > 1) {
+
+        while(!finished) {
+            SDL_Delay(5);
+            DC_CLS();
+
+            DC_DrawString(2, 6 + current_mission, ">");
+
+            font_y = 6;
+            DC_DrawString(4, 1, "Sod4SDL\\DC");
+            if(mission1 == 1) {
+                DC_DrawString(4, font_y, "Spear of Destiny (Original Mission)");
+                font_y++;
+            }
+            if(mission2 == 1) {
+                DC_DrawString(4, font_y, "Mission 2 - Return to Danger");
+                font_y++;
+            }
+            if(mission3 == 1) {
+                DC_DrawString(4, font_y, "Mission 3 - Ultimate Challenge");
+                font_y++;
+            }
+
+            if(DC_ButtonPress(CONT_A)) {
+                finished = true;
+                break;
+            } else if(DC_ButtonPress(CONT_DPAD_DOWN)) {
+                current_mission++;
+                previous_mission = -1;
+                if(current_mission > (missions - 1))
+                    current_mission = 0;
+                DC_WaitButtonRelease(CONT_DPAD_DOWN);
+            } else if(DC_ButtonPress(CONT_DPAD_UP)) {
+                current_mission--;
+                previous_mission = -1;
+                if(current_mission < 0)
+                    current_mission = missions - 1;
+                DC_WaitButtonRelease(CONT_DPAD_UP);
+            }
+            DC_Flip();
+        }
+
+        /* Return Selected Mission */
+        // XXX: What does this do? Are the fall throughs intended?!
+        switch(current_mission) {
+            case 1:
+                if(mission1) return 1;
+                if(mission2 && !mission1) return 2;
+            case 2:
+                if(mission2 && mission1) return 2;
+                if(mission3 && mission1 && !mission2) return 3;
+                if(mission3 && mission2 && !mission1) return 3;
+            case 3:
+                if(mission3 && mission2 && mission1) return 3;
+        }
+    }
+
+    return last_mission;
+}
+
+#endif
+#endif
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/dc/dc_main.h wolf4sdl/dc/dc_main.h
--- Wolf4SDL-1.6-src/dc/dc_main.h	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/dc/dc_main.h	2011-04-27 19:58:18.546203098 +0200
@@ -0,0 +1,49 @@
+//Wolf4SDL\DC
+//dc_main.h
+//2009 - Cyle Terry
+
+#ifndef __DC_MAIN_H_
+#define __DC_MAIN_H_
+
+typedef uint8 uint8_t;
+typedef uint16 uint16_t;
+typedef uint32 uint32_t;
+typedef int8 int8_t;
+typedef int16 int16_t;
+typedef int32 int32_t;
+typedef int64 int64_t;
+typedef ptr_t uintptr_t;
+
+//dc_cd.cpp
+int DC_CheckDrive();
+
+//dc_main.cpp
+void DC_Init();
+void DC_CheckArguments();
+int  DC_CheckForMaps(char *path);
+#ifdef  SPEAR
+#ifndef SPEARDEMO
+int  DC_SetMission(char *path);
+#endif
+#endif
+
+//dc_maple.cpp
+int  DC_ButtonPress(int button);
+int  DC_MousePresent();
+void DC_WaitButtonPress(int button);
+void DC_WaitButtonRelease(int button);
+
+//dc_video.cpp
+void DC_VideoInit();
+void DC_DrawString(int x, int y, char *str);
+void DC_CLS();
+void DC_Flip();
+
+//dc_vmu.cpp
+extern void DiskFlopAnim(int x, int y);
+       void DC_StatusDrawLCD(int index);
+       void DC_StatusClearLCD();
+       void DC_SaveToVMU(char *fname, char *str);
+       int  DC_LoadFromVMU(char *fname);
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/dc/dc_maple.cpp wolf4sdl/dc/dc_maple.cpp
--- Wolf4SDL-1.6-src/dc/dc_maple.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/dc/dc_maple.cpp	2011-04-27 19:58:18.546203098 +0200
@@ -0,0 +1,60 @@
+//Wolf4SDL\DC
+//dc_maple.cpp
+//2009 - Cyle Terry
+
+#if defined(_arch_dreamcast)
+
+#include <SDL.h>
+#include "dc/maple.h"
+#include "dc/maple/controller.h"
+#include "dc/maple/vmu.h"
+
+int DC_MousePresent() {
+    return maple_first_mouse() != 0;
+}
+
+void DC_WaitButtonPress(int button)
+{
+    int first_controller = 0;
+    cont_cond_t controller_condition;
+
+    first_controller = maple_first_controller();
+    cont_get_cond(first_controller, &controller_condition);
+
+    while((controller_condition.buttons & button)) {
+        SDL_Delay(5);
+        cont_get_cond(first_controller, &controller_condition);
+    }
+}
+
+
+void DC_WaitButtonRelease(int button)
+{
+    int first_controller = 0;
+    cont_cond_t controller_condition;
+
+    first_controller = maple_first_controller();
+    cont_get_cond(first_controller, &controller_condition);
+
+    while(!(controller_condition.buttons & button)) {
+        SDL_Delay(5);
+        cont_get_cond(first_controller, &controller_condition);
+    }
+}
+
+
+int DC_ButtonPress(int button)
+{
+    int first_controller = 0;
+    cont_cond_t controller_condition;
+
+    first_controller = maple_first_controller();
+    cont_get_cond(first_controller, &controller_condition);
+
+    if(!(controller_condition.buttons & button))
+        return 1;
+    else
+        return 0;
+}
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/dc/dc_video.cpp wolf4sdl/dc/dc_video.cpp
--- Wolf4SDL-1.6-src/dc/dc_video.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/dc/dc_video.cpp	2011-04-27 19:58:18.546203098 +0200
@@ -0,0 +1,37 @@
+//Wolf4SDL\DC
+//dc_video.cpp
+//2009 - Cyle Terry
+
+#if defined(_arch_dreamcast)
+
+#include <string.h>
+#include <malloc.h>
+#include "../wl_def.h"
+#include "dc/biosfont.h"
+#include "dc/video.h"
+
+static uint16 *bbuffer;
+
+void DC_VideoInit() {
+    bbuffer = (uint16 *)malloc(640 * 480 * 2);
+    DC_CLS();
+}
+
+void DC_DrawString(int x, int y, char *str) {
+    bfont_draw_str(bbuffer + ((y + 1) * 24 * 640) + (x * 12), 640, 0, str);
+}
+
+void DC_Flip() {
+    memcpy(vram_s, bbuffer, 640 * 480 * 2);
+}
+
+void DC_CLS() {
+    int x, y, ofs;
+    for(y = 0; y < 480; y++) {
+        ofs = (640 * y);
+        for(x = 0; x < 640; x++)
+            bbuffer[ofs + x] = 0;
+    }
+}
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/dc/dc_vmu.cpp wolf4sdl/dc/dc_vmu.cpp
--- Wolf4SDL-1.6-src/dc/dc_vmu.cpp	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/dc/dc_vmu.cpp	2011-04-27 19:58:18.546203098 +0200
@@ -0,0 +1,181 @@
+//Wolf4SDL\DC
+//dc_vmu.cpp
+//2009 - Cyle Terry
+
+#if defined(_arch_dreamcast)
+
+#include <string.h>
+#include "../wl_def.h"
+#include "dc/maple.h"
+#include "dc/maple/controller.h"
+#include "dc/maple/vmu.h"
+#include "dc/vmu_pkg.h"
+#include "kos/fs.h"
+#include "zlib/zlib.h"
+#include "dc_vmu.h"
+
+maple_device_t *vmu_lcd_addr[8];
+
+void DC_StatusDrawLCD(int lcd) {
+    const char *character;
+    int x, y;
+    int xi, xb;
+    int i = 0;
+    uint8 bitmap[48 * 32 / 8];
+    maple_device_t *vmu_lcd_addr;
+
+    memset(bitmap, 0, sizeof(bitmap));
+    character = e_BJFaces[lcd - FACE1APIC];
+
+    if(character) {
+        for(y = 0; y < LCD_HEIGHT; y++) {
+            for(x = 0; x < LCD_WIDTH; x++) {
+                xi = x / 8;
+                xb = 0x80 >> (x % 8);
+                if(character[(31 - y) * 48 + (47 - x)] == '.')
+                    bitmap[y * (48 / 8) + xi] |= xb;
+            }
+        }
+    }
+
+    while ((vmu_lcd_addr = maple_enum_type(i++, MAPLE_FUNC_LCD)))
+        vmu_draw_lcd(vmu_lcd_addr, bitmap);
+    vmu_shutdown ();
+}
+
+void DC_StatusClearLCD() {
+    int x, y;
+    int xi;
+    int i = 0;
+    uint8 bitmap[48 * 32 / 8];
+    maple_device_t *vmu_lcd_addr;
+
+    memset(bitmap, 0, sizeof(bitmap));
+    for(y = 0; y < LCD_HEIGHT; y++) {
+        for(x = 0; x < LCD_WIDTH; x++) {
+            xi = x / 8;
+            bitmap[y * (48 / 8) + xi] |= 0;
+        }
+    }
+
+    while ((vmu_lcd_addr = maple_enum_type(i++, MAPLE_FUNC_LCD)))
+        vmu_draw_lcd(vmu_lcd_addr, bitmap);
+    vmu_shutdown ();
+}
+
+
+void DC_SaveToVMU(char *fname, char *str) {
+    char destination[32];
+    int filesize = 0;
+    int vmu_package_size;
+    unsigned long  zipsize = 0;
+    unsigned char *vmu_package_out;
+    unsigned char *data;
+    unsigned char *zipdata;
+    file_t file;
+    vmu_pkg_t vmu_package;
+
+    DiskFlopAnim(102, 85);
+
+    strcpy(destination, "/vmu/a1/");
+    strcat(destination, fname);
+    file = fs_open(fname, O_RDONLY);
+    filesize = fs_total(file);
+    data = (unsigned char*)malloc(filesize);
+    fs_read(file, data, filesize);
+    fs_close(file);
+
+    DiskFlopAnim(102, 85);
+
+    zipsize = filesize * 2;
+    zipdata = (unsigned char*)malloc(zipsize);
+    compress(zipdata, &zipsize, data, filesize);
+
+    DiskFlopAnim(102, 85);
+
+#ifdef SPEAR
+    strcpy(vmu_package.desc_short, "Sod4SDL\\DC");
+    strcpy(vmu_package.app_id, "Sod4SDL\\DC");
+#else
+    strcpy(vmu_package.desc_short, "Wolf4SDL\\DC");
+    strcpy(vmu_package.app_id, "Wolf4SDL\\DC");
+#endif
+    if(str == NULL)
+        strcpy(vmu_package.desc_long, "Configuration");
+    else {
+        strcpy(vmu_package.desc_long, "Game Save - ");
+        strcat(vmu_package.desc_long, str);
+    }
+
+    vmu_package.icon_cnt = 1;
+    vmu_package.icon_anim_speed = 0;
+    memcpy(&vmu_package.icon_pal[0], vmu_bios_save_icon, 32);
+    vmu_package.icon_data = vmu_bios_save_icon + 32;
+    vmu_package.eyecatch_type = VMUPKG_EC_NONE;
+    vmu_package.data_len = zipsize;
+    vmu_package.data = zipdata;
+    vmu_pkg_build(&vmu_package, &vmu_package_out, &vmu_package_size);
+
+    DiskFlopAnim(102, 85);
+
+    fs_unlink(destination);
+    file = fs_open(destination, O_WRONLY);
+    fs_write(file, vmu_package_out, vmu_package_size);
+    fs_close(file);
+
+    DiskFlopAnim(102, 85);
+
+    free(vmu_package_out);
+    free(data);
+    free(zipdata);
+}
+
+
+int DC_LoadFromVMU(char *fname) {
+    char fpath[64];
+    int file;
+    int filesize;
+    unsigned long unzipsize;
+    unsigned char *data;
+    unsigned char *unzipdata;
+    vmu_pkg_t vmu_package;
+
+    sprintf(fpath, "/vmu/a1/%s", fname);
+    file = fs_open(fpath, O_RDONLY);
+    if(file == 0) return 0;
+    filesize = fs_total(file);
+    if(filesize <= 0) return 0;
+    data = (unsigned char*)malloc(filesize);
+    fs_read(file, data, filesize);
+    fs_close(file);
+
+    if(!strcmp(fname, configname))
+        DiskFlopAnim(102, 85);
+
+    vmu_pkg_parse(data, &vmu_package);
+
+    if(!strcmp(fname, configname))
+        DiskFlopAnim(102, 85);
+
+    unzipdata = (unsigned char*)malloc(65536);
+    unzipsize = 65536;
+    uncompress(unzipdata, &unzipsize, (unsigned char*)vmu_package.data, vmu_package.data_len);
+
+    if(!strcmp(fname, configname))
+        DiskFlopAnim(102, 85);
+
+    fs_unlink(fname);
+    file = fs_open(fname, O_WRONLY);
+    fs_write(file, unzipdata, unzipsize);
+    fs_close(file);
+
+    if(!strcmp(fname, configname))
+        DiskFlopAnim(102, 85);
+
+    free(data);
+    free(unzipdata);
+
+    return 1;
+}
+
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/dc/dc_vmu.h wolf4sdl/dc/dc_vmu.h
--- Wolf4SDL-1.6-src/dc/dc_vmu.h	1970-01-01 01:00:00.000000000 +0100
+++ wolf4sdl/dc/dc_vmu.h	2011-04-27 19:58:18.547203098 +0200
@@ -0,0 +1,1168 @@
+//Wolf4SDL\DC
+//dc_vmu.h
+//2009 - Cyle Terry
+//
+// BJ LCD images made by Antioch
+
+
+#define LCD_HEIGHT 32
+#define LCD_WIDTH 48
+
+const unsigned char vmu_bios_save_icon[544] ={
+    0x00,0xf0,0x0d,0xf0,0x0f,0xf0,0x00,0x0f,
+    0x44,0xf4,0x62,0xfb,0x96,0xff,0xca,0xff,
+    0xff,0xff,0x00,0xf0,0x00,0xf0,0x00,0xf0,
+    0x00,0xf0,0x00,0xf0,0x00,0xf0,0x00,0xf0,
+    0x33,0x33,0x33,0x33,0x33,0x55,0x55,0x55,
+    0x55,0x55,0x53,0x33,0x33,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x05,0x55,0x55,0x55,0x55,
+    0x56,0x56,0x55,0x53,0x33,0x33,0x33,0x33,
+    0x33,0x33,0x30,0x55,0x55,0x55,0x55,0x55,
+    0x55,0x55,0x55,0x55,0x53,0x33,0x33,0x33,
+    0x33,0x33,0x34,0x55,0x55,0x55,0x55,0x55,
+    0x55,0x55,0x66,0x55,0x53,0x33,0x33,0x33,
+    0x33,0x33,0x45,0x55,0x55,0x44,0x45,0x55,
+    0x45,0x45,0x56,0x55,0x55,0x33,0x33,0x33,
+    0x33,0x33,0x04,0x55,0x54,0x44,0x45,0x45,
+    0x44,0x55,0x55,0x55,0x55,0x33,0x33,0x33,
+    0x33,0x33,0x45,0x54,0x45,0x66,0x55,0x54,
+    0x44,0x44,0x55,0x54,0x45,0x33,0x33,0x33,
+    0x33,0x33,0x34,0x45,0x56,0x67,0x76,0x66,
+    0x55,0x55,0x56,0x65,0x54,0x33,0x33,0x33,
+    0x33,0x33,0x34,0x56,0x67,0x77,0x77,0x77,
+    0x56,0x56,0x56,0x75,0x54,0x33,0x33,0x33,
+    0x33,0x33,0x34,0x57,0x76,0x76,0x77,0x77,
+    0x76,0x66,0x77,0x76,0x64,0x33,0x33,0x33,
+    0x33,0x33,0x34,0x56,0x66,0x78,0x87,0x77,
+    0x75,0x57,0x78,0x66,0x64,0x33,0x33,0x33,
+    0x33,0x33,0x44,0x57,0x74,0x45,0x57,0x77,
+    0x76,0x65,0x44,0x76,0x60,0x43,0x33,0x33,
+    0x33,0x33,0x60,0x64,0x44,0x10,0x00,0x55,
+    0x50,0x04,0x41,0x46,0x64,0x63,0x33,0x33,
+    0x33,0x33,0x60,0x66,0x67,0x12,0x75,0x56,
+    0x55,0x71,0x28,0x65,0x54,0x63,0x33,0x33,
+    0x33,0x33,0x55,0x67,0x76,0x66,0x67,0x67,
+    0x77,0x76,0x66,0x76,0x64,0x53,0x33,0x33,
+    0x33,0x33,0x66,0x77,0x78,0x78,0x77,0x68,
+    0x77,0x77,0x88,0x76,0x67,0x63,0x33,0x33,
+    0x33,0x33,0x66,0x77,0x78,0x78,0x77,0x68,
+    0x77,0x77,0x88,0x76,0x67,0x63,0x33,0x33,
+    0x33,0x33,0x66,0x67,0x77,0x87,0x76,0x77,
+    0x76,0x77,0x78,0x76,0x66,0x63,0x33,0x33,
+    0x33,0x33,0x54,0x57,0x77,0x77,0x65,0x54,
+    0x55,0x67,0x77,0x65,0x54,0x53,0x33,0x33,
+    0x33,0x33,0x35,0x66,0x66,0x77,0x66,0x65,
+    0x77,0x67,0x77,0x66,0x65,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x66,0x67,0x76,0x77,0x76,
+    0x77,0x77,0x76,0x66,0x63,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x76,0x67,0x76,0x55,0x66,
+    0x65,0x56,0x77,0x67,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x67,0x76,0x76,0x67,0x77,
+    0x77,0x66,0x76,0x77,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x66,0x67,0x77,0x76,0x66,
+    0x67,0x77,0x77,0x67,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x56,0x67,0x77,0x87,0x77,
+    0x77,0x78,0x77,0x67,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x45,0x56,0x67,0x77,0x76,
+    0x67,0x77,0x76,0x67,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x55,0x55,0x55,0x66,0x55,
+    0x66,0x57,0x55,0x77,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x44,0x44,0x44,0x44,0x44,
+    0x44,0x54,0x56,0x77,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x55,0x54,0x54,0x45,0x54,
+    0x55,0x55,0x77,0x57,0x73,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x44,0x45,0x45,0x56,0x56,
+    0x56,0x57,0x77,0x75,0x53,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x54,0x44,0x55,0x66,0x67,
+    0x76,0x56,0x76,0x75,0x53,0x33,0x33,0x33,
+    0x33,0x33,0x33,0x45,0x55,0x55,0x67,0x66,
+    0x77,0x66,0x76,0x55,0x53,0x33,0x33,0x33
+};
+
+static const char FACE1ALCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ..         ..  ..             \
+              .. .....     ..... ..             \
+             ..... ........... .....            \
+             ... . .. . . . .. . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .   .   .   . .             \
+              .    .         .    .             \
+              .     .........     .             \
+               .                 .              \
+               .      .....      .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE1BLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              .. ...             ..             \
+              ...   .        ..  ..             \
+              ........     ..... ..             \
+             ......  ........  .....            \
+             ... ..   . . ...  . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .     ......    . .             \
+              . .       .   .   . .             \
+              .              .    .             \
+              .      .........    .             \
+               .                 .              \
+               .       ....      .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE1CLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..             ......             \
+              ..  ..        .    ..             \
+              .. .....     ..... ..             \
+             .....  ......... ......            \
+             ... .  ... . .   .. ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .   .       . .             \
+              .    .              .             \
+              .     ........      .             \
+               .                 .              \
+               .      .....      .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE2ALCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ..         ..  ..             \
+              .. .....     ..... ..             \
+             ..... ........... .....            \
+             ... . .. . . . .. . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .   .   .   . .             \
+              .    .         .    .             \
+              .     .........     .             \
+               .           .     .              \
+               .      .... .     .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE2BLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              .. ...             ..             \
+              ...   .        ..  ..             \
+              ........     ..... ..             \
+             ......  ........  .....            \
+             ... ..   . . ...  . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .     ......    . .             \
+              . .       .   .   . .             \
+              .              .    .             \
+              .      .........    .             \
+               .            .    .              \
+               .       .... .    .              \
+               ..           .   ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE2CLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..             ......             \
+              ..  ..        .    ..             \
+              .. .....     ..... ..             \
+             .....  ......... ......            \
+             ... .  ... . .   .. ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .   .       . .             \
+              .    .              .             \
+              .     ........      .             \
+               .          .      .              \
+               .      .....      .              \
+               ..         .     ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE3ALCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ..         ..  ..             \
+              .. .....     ..... ..             \
+             ..... ........... .....            \
+             ... . .. . . . .. . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .   . . .   . .             \
+              .    .      .  .    .             \
+              .     .........     .             \
+               .          ..     .              \
+               .      .... .     .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE3BLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              .. ...             ..             \
+              ...   .        ..  ..             \
+              ........     ..... ..             \
+             ......  ........  .....            \
+             ... ..   . . ...  . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .     ......    . .             \
+              . .       . . .   . .             \
+              .           .. .    .             \
+              .      .........    .             \
+               .            ..   .              \
+               .       .... .    .              \
+               ..           .   ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE3CLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..             ......             \
+              ..  ..        .    ..             \
+              .. .....     ..... ..             \
+             .....  ......... ......            \
+             ... .  ... . ... .. ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .   . .     . .             \
+              .    .     ..       .             \
+              .     ........      .             \
+               .          ..     .              \
+               .      .....      .              \
+               ..         .     ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE4ALCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ..         ..  ..             \
+              .. .....     ..... ..             \
+             ..... ........... .....            \
+             ... . .. . . ...... ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   . . . . .   . .             \
+              .    .  .   .  .    .             \
+              .     .........     .             \
+               .        ......   .              \
+               .      ....  .    .              \
+               ..           .   ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE4BLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              .. ...             ..             \
+              ...   .        ..  ..             \
+              ........     ..... ..             \
+             ......  ........  .....            \
+             ... ..   . .....  . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .     ......    . .             \
+              . .     . . . .   . .             \
+              .       .   .. .    .             \
+              .      .........    .             \
+               .          .....  .              \
+               .       .... .    .              \
+               ..           .   ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE4CLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..             ......             \
+              ..  ..        .    ..             \
+              .. .....     ..... ..             \
+             .....  ......... ......            \
+             ... .  ... . ... .. ...            \
+             ...        .   .    ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .  .. .     . .             \
+              .    .    ...       .             \
+              .     ........      .             \
+               .         ...     .              \
+               .      .....      .              \
+               ..         .     ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE5ALCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ..         ..  ..             \
+              .. .....     ..... ..             \
+             ..... ......... . .....            \
+             ... . .. . . ...... ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   . . . . .   . .             \
+              .    .  .   .  .    .             \
+              .     .........     .             \
+               .     .  ......   .              \
+               .     ..........  .              \
+               ..    .      .   ..              \
+               ...      .   .  . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE5BLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              .. ...             ..             \
+              ...   .        ..  ..             \
+              ........     ..... ..             \
+             ......  ...............            \
+             ... ..   . .. .. .. ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .     ......    . .             \
+              . .      .. . .   . .             \
+              .        .  .. .    .             \
+              .      .........    .             \
+               .     .    .....  .              \
+               .     . .... .    .              \
+               ..    .      .   ..              \
+               ...      .   .  . .              \
+               ....     .   . .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE5CLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..             ......             \
+              ..  ..        ...  ..             \
+              .. .....     ..... ..             \
+             .....  ................            \
+             ... .  ... . ... .. ...            \
+             ...        .   .    ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .  .. .     . .             \
+              .    .  . ...       .             \
+              .     ........      .             \
+               .    ..   ...     .              \
+               .    . .... .     .              \
+               ..          .    ..              \
+               ...      .  .   . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE6ALCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .               .             \
+              .. .                .             \
+              . . .      ...    ...             \
+              .. . ....  .  .  .  .             \
+              . .      . .  . .   .             \
+              ...      . .  . .  ..             \
+              ..        .   ...  ..             \
+              ..            .    ..             \
+              .. ....       .... ..             \
+             ..... ....   ..........            \
+             ... . .. .......... ...            \
+             ...        .  ....  ...            \
+             ..                   ..            \
+             ..                   ..            \
+              ..      .   .      ..             \
+              . .    ..   ..    . .             \
+              . .   .  ...  .   . .             \
+              .        . .        .             \
+               .     .......     .              \
+               .    ..  ......   .              \
+               ..   ..     .    ..              \
+               ...   .     .   . .              \
+               ....     . .   .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE6BLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .               .             \
+              .. .                .             \
+              . . .      ...    ...             \
+              .. . ....  .  .  .  .             \
+              . .      . .  . .   .             \
+              ...      . .  . .  ..             \
+              ..        .   ...  ..             \
+              .. ...        .    ..             \
+              ...  ..       .... ..             \
+             ... .. ...   ..........            \
+             ... ..  ........... ...            \
+             ...        .  ....  ...            \
+             ..                   ..            \
+             ..                   ..            \
+              ..      .   .      ..             \
+              . .    ..   ..    . .             \
+              . .   .  ...  .   . .             \
+              .        . .        .             \
+               .     .......     .              \
+               .    ..  ......   .              \
+               ..   ..     .    ..              \
+               ...   .     .   . .              \
+               ....     . .   .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE6CLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .               .             \
+              .. .                .             \
+              . . .      ...    ...             \
+              .. . ....  .  .  .  .             \
+              . .      . .  . .   .             \
+              ...      . .  . .  ..             \
+              ..        .   ...  ..             \
+              ..           ..... ..             \
+              .. ....     . .   ...             \
+             .....  ...   ..........            \
+             ... .  ............ ...            \
+             ...        .  ....  ...            \
+             ..                   ..            \
+             ..                   ..            \
+              ..      .   .      ..             \
+              . .    ..   ..    . .             \
+              . .   .  ...  .   . .             \
+              .        . .        .             \
+               .     .......     .              \
+               .    ..  .....    .              \
+               ..   ..     .    ..              \
+               ...   .     .   . .              \
+               ....     . .   .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE7ALCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .               .             \
+              .. .                .             \
+              . . .               .             \
+              .. . .    .         .             \
+              . . ..   . . ..   ...             \
+              ....  . ..  . .  . ..             \
+              ...   .. .    .  . ..             \
+              ..   .        . .  ..             \
+             ...            ..   ...            \
+             ... ....     ...... ...            \
+             ..... ....   ..........            \
+             ...   ..  ... ..... ...            \
+             ..         . ......  ..            \
+              .              ..   .             \
+              .                   .             \
+              ..      .   .      ..             \
+              . .    ..   ..    ...             \
+              . .   .  ...  .   ...             \
+               .       . .       .              \
+               .    .........    .              \
+               ..   ..  ......  ..              \
+               ...  ..      .  . .              \
+               ....  .  . . . .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE7BLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .               .             \
+              .. .                .             \
+              . . .               .             \
+              .. . .    .         .             \
+              . . ..   . . ..   ...             \
+              ....  . ..  . .  . ..             \
+              ...   .. .    .  . ..             \
+              ..            . .  ..             \
+             ...  .         ..   ...            \
+             ... . ..       .... ...            \
+             ......  ..   ..........            \
+             ... ...  .... ..... ...            \
+             ..         . ......  ..            \
+              .              ..   .             \
+              .           .       .             \
+              .           .      ..             \
+              .      ..   ..    ...             \
+              ..       ...  .   ...             \
+               ..      . .       .              \
+               ..    ........    .              \
+               ...   .. ......  ..              \
+               ....  ..     .  . .              \
+               .....  . . . . .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE7CLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .               .             \
+              .. .                .             \
+              . . .               .             \
+              .. . .    .         .             \
+              . . ..   . . ..   ...             \
+              ....  . ..  . .  . ..             \
+              ...   .. .    .  . ..             \
+              ..   .        . .  ..             \
+             ...            ...  ...            \
+             ... ....     ...... ...            \
+             .....  ...   ..........            \
+             ... .. .. ... ..... ...            \
+             ..         . ....... ..            \
+              .              .. . .             \
+              .                   .             \
+              ..      .   .      ..             \
+              . .    ..   ..    ...             \
+              . .   .  ...  .   ...             \
+               .       . .       .              \
+               .   ..........    .              \
+               ..  ...  .....   ..              \
+               ...  ..     .   . .              \
+               .... ..  . ..  .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char FACE8ALCD[] =
+"\
+                                                \
+                                                \
+                                                \
+                 ..............                 \
+                . .            .                \
+               . .             ..               \
+              . . .              ..             \
+              .. .                .             \
+              . . .               .             \
+              .. .                .             \
+              ...                 .             \
+              .. .                .             \
+              ... . .             .             \
+              .. . . .            .             \
+             .... ....          ....            \
+             ... ...  . .       . ..            \
+             ... . .   . ..     . ..            \
+             .... .    .  .  . . ...            \
+             ...  ...     ... .  ...            \
+              .. .....    ......  .             \
+              .   ............. ...             \
+              .  ....  .  ...... ..             \
+               . ..   .    . .  ..              \
+               . .    .    .  .  .              \
+               . .    .    .  .  .              \
+               ...   ...  .     ..              \
+               ...  .......    . .              \
+               ...  .........  . .              \
+               ...  ...    ..  . .              \
+               ................  .              \
+                ....         .  .               \
+                .....       ..  .               ";
+
+static const char GOTGATLINGLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ... ..         ..  ..             \
+              ..    .       .    ..             \
+              .. .....     ..... ..             \
+              .. . .. .. .. .. . ..             \
+             ...  .. . . . . ..  ...            \
+             ...       . .       ...            \
+             ...                 ...            \
+             ..                   ..            \
+             .....   .     .   .....            \
+              . .    .......    . .             \
+              . . ..    .    .. . .             \
+              .   . ......... .   .             \
+              .    .         .    .             \
+               ..   .       .   ..              \
+               ..   ........    ..              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char MUTANTBJLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              .. . .         . . ..             \
+              .. .   .     .   . ..             \
+              ..  ..  .   .  ..  ..             \
+             ..... .. . . . .. .....            \
+             ... . . .. . .. . . ...            \
+             ...  ....  .  ....  ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              .  .   .  .  .   .  .             \
+              .  .             .  .             \
+              .  .   .......   .  .             \
+               .    .       .    .              \
+               .      .....      .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+#ifdef SPEAR
+static const char GODMODEFACE1LCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..                 ..             \
+              .. .....     ..... ..             \
+             .....   .......   .....            \
+             ... .    . . .    . ...            \
+             ...  . .   .   . .  ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .       .       . .             \
+              .                   .             \
+              .     .........     .             \
+               .                 .              \
+               .      .....      .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char GODMODEFACE2LCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ....           ..             \
+              .. .   ..    ..... ..             \
+             .....   ......... .....            \
+             ... .    . . .    . ...            \
+             ...  . .   .   . .  ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .       .       . .             \
+              .                   .             \
+              .     .........     .             \
+               .                 .              \
+               .      .....      .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char GODMODEFACE3LCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..           ....  ..             \
+              .. ....     ..   ....             \
+             ..... ........    . ...            \
+             ... .    . . .    . ...            \
+             ...  . .   .   . .  ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .       .       . .             \
+              .                   .             \
+              .     .........     .             \
+               .                 .              \
+               .      .....      .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char BJWAITING1LCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ..         ..  ..             \
+              .. .....     ..... ..             \
+             .....  .........  .....            \
+             ... .  ... . ...  . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . ..   .......   .. .             \
+              .  .  .   .   .  .  .             \
+              .  .             .  .             \
+              .  .    .....    .  .             \
+               .                 .              \
+               .                 .              \
+               ..               ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char BJWAITING2LCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              ..  ..         ..  ..             \
+              .. .....     ..... ..             \
+             ..... ........... .....            \
+             ... . .. . . . .. . ...            \
+             ...        .        ...            \
+             ..                   ..            \
+             ....     .   .     ....            \
+              .  .   .......   .  .             \
+              .  .  .   .   .  .  .             \
+              .    .         .    .             \
+              .       .....       .             \
+               .     .. . ..     .              \
+               .      . . .      .              \
+               ..     .   .     ..              \
+               ...     ...     . .              \
+               ....           .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+
+static const char BJOUCHLCD[] =
+"\
+                                                \
+                 ...............                \
+                .               .               \
+               . .               .              \
+              . . .      ...    ...             \
+              .. . ....  .  .  . ..             \
+              . . .    . .   ..   .             \
+              .. .      .     .   .             \
+              . .             .   .             \
+              ...                ..             \
+              ..                 ..             \
+              .. ......   ...... ..             \
+              .....  .     .  .....             \
+             ... . .. .   . .. . ...            \
+             ... . .. .. .. .. . ...            \
+             ...  .  .     .  .  ...            \
+             ..                   ..            \
+             ...      .   .      ...            \
+              . .    .......    . .             \
+              . .   .   .   .   . .             \
+              .                   .             \
+              .      .......      .             \
+               .    .........    .              \
+               .                 .              \
+               ..      ...      ..              \
+               ...      .      . .              \
+               ....     .     .  .              \
+               ...............   .              \
+               .....         .  ..              \
+                ....         .  .               \
+                .....       .   .               \
+                .....       .   .               ";
+#endif //SPEAR
+
+static const char *e_BJFaces[] = {
+	FACE1ALCD,
+	FACE1BLCD,
+	FACE1CLCD,
+	FACE2ALCD,
+	FACE2BLCD,
+	FACE2CLCD,
+	FACE3ALCD,
+	FACE3BLCD,
+	FACE3CLCD,
+	FACE4ALCD,
+	FACE4BLCD,
+	FACE4CLCD,
+	FACE5ALCD,
+	FACE5BLCD,
+	FACE5CLCD,
+	FACE6ALCD,
+	FACE6BLCD,
+	FACE6CLCD,
+	FACE7ALCD,
+	FACE7BLCD,
+	FACE7CLCD,
+	FACE8ALCD,
+	GOTGATLINGLCD,
+#ifndef SPEAR
+	MUTANTBJLCD
+#else
+	MUTANTBJLCD,
+	GODMODEFACE1LCD,
+	GODMODEFACE2LCD,
+	GODMODEFACE3LCD,
+	BJWAITING1LCD,
+	BJOUCHLCD
+#endif
+};
diff -urN --exclude .git Wolf4SDL-1.6-src/dc_main.cpp wolf4sdl/dc_main.cpp
--- Wolf4SDL-1.6-src/dc_main.cpp	2008-05-04 02:05:26.000000000 +0200
+++ wolf4sdl/dc_main.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,466 +0,0 @@
-/*
-	dc_main.cpp
-	This file is part of the Wolf4SDL\DC project.
-
- 	This file is heavily based on Yabause, nxDoom and sdlWolf by
- 	Lawrence Sebald, BlackAura and OneThirty8 respectively.
-
-	Cyle Terry <cyle.terry@gmail.com>
-*/
-
-#ifdef _arch_dreamcast
-
-#include <kos.h>
-#include "wl_def.h"
-
-#define DCROOT "/cd"
-
-void DC_DrawString(int x, int y, char *string)
-{
-	bfont_draw_str(vram_s + ((y + 1) * 24 * 640) + (x * 12), 640, 0, string);
-}
-
-void DC_CLS()
-{
-	int x, y, ofs;
-	for(y = 0; y < 480; y++)
-	{
-		ofs = (640 * y);
-		for(x = 0; x < 640; x++)
-			vram_s[ofs + x] = 0;
-	}
-}
-
-void DC_CLA()
-{
-	int x, y, ofs;
-	for(y = 168; y < 240; y++)
-	{
-		ofs = (640 * y);
-		for(x = 24; x < 48; x++)
-			vram_s[ofs + x] = 0;
-	}
-}
-
-#ifdef SPEAR
-#ifndef SPEARDEMO
-int selectedMission;
-int hasMission1 = 0;
-int hasMission2 = 0;
-int hasMission3 = 0;
-
-int DC_SpearMenu()	{
-	int i = 0;
-	int yint;
-	int thisMission = 1;
-	int lastMission = -1;
-	int firstPad = 0;
-	cont_cond_t cond;
-
-	i = hasMission1 + hasMission2 + hasMission3;
-
-	yint = 6;
-	DC_CLS();
-	DC_DrawString(4, 1, "Wolf4SDL\\DC 1.4");
-	if(hasMission1 == 1)	{
-		DC_DrawString(4, yint, "Spear of Destiny (Original Mission)");
-		yint++;
-	}
-	if(hasMission2 == 1)	{
-		DC_DrawString(4, yint, "Mission 2 - Return to Danger");
-		yint++;
-	}
-	if(hasMission3 == 1)	{
-		DC_DrawString(4, yint, "Mission 3 - Ultimate Challenge");
-	}
-
-	while(1)	{
-		SDL_Delay(5);
-		firstPad = maple_first_controller();
-		cont_get_cond(firstPad, &cond);
-
-		if(!(cond.buttons & CONT_DPAD_DOWN))	{
-			thisMission++;
-			lastMission = -1;
-
-			/* Jump to top mission */
-			if(thisMission > i)	{
-				thisMission = 1;
-			}
-
-			/* Don't go rapidly through */
-			while(!(cond.buttons & CONT_DPAD_DOWN))	{
-        		SDL_Delay(5);
-				/* Get condition again */
-				cont_get_cond(firstPad, &cond);
-			}
-		}
-		if(!(cond.buttons & CONT_DPAD_UP))	{
-			thisMission--;
-			lastMission = -1;
-
-			/* Jump to bottom mission */
-			if(thisMission < 1)	{
-				thisMission = i;
-			}
-
-			/* Don't go rapidly through */
-			while(!(cond.buttons & CONT_DPAD_UP)) {
-        		SDL_Delay(5);
-				/* Get condition again */
-				cont_get_cond(firstPad, &cond);
-			}
-		}
-
-		if(lastMission != thisMission)	{
-			DC_CLA();
-			DC_DrawString(2, 6 + (thisMission - 1) , ">");
-		}
-
-		lastMission = thisMission;
-
-		if (!(cond.buttons & CONT_A))	{
-			if(thisMission == 1)	{
-				if(hasMission1 == 1)
-					return 1;
-				else
-					return 2;
-			}
-			else if(thisMission == 2)	{
-				if(hasMission1 == 1)
-					if(hasMission2 == 1)
-						return 2;
-					else
-						return 3;
-				else
-					return 3;
-			}
-			else
-				return 3;
-		}
-	}
-}
-
-int GetAvailableMissions(char *path)	{
-	char filename[100];
-	int Mission = 0;
-	int Missions = 0;
-	FILE *fp;
-
-	sprintf(filename, "%smaphead.sod", path);
-	fp = fopen(filename, "r");
-	if(fp)	{
-		fclose(fp);
-		Mission = 1;
-		hasMission1 = 1;
-		Missions++;
-	}
-
-	sprintf(filename, "%smaphead.sd2", path);
-	fp = fopen(filename, "r");
-	if(fp)	{
-		fclose(fp);
-		Mission = 2;
-		hasMission2 = 1;
-		Missions++;
-	}
-
-	sprintf(filename, "%smaphead.sd3", path);
-	fp = fopen(filename, "r");
-	if(fp)	{
-		fclose(fp);
-		Mission = 3;
-		hasMission3 = 1;
-		Missions++;
-	}
-
-	if(Missions == 1)	{
-		selectedMission = Mission;
-	}
-
-	return Missions;
-}
-#endif
-#endif
-
-void DC_Main()	{
-	int firstPad = 0;
-	cont_cond_t cond;
-	FILE *fp;
-
-#ifdef SPEAR
-#ifndef SPEARDEMO
-	int Missions = GetAvailableMissions(DCROOT "/wolf3d/");
-	if(Missions != 0) {
-		if(Missions == 1)	{
-			fs_chdir(DCROOT "/wolf3d");
-			goto copy2ram;
-		}
-		else	{
-			selectedMission = DC_SpearMenu();
-			fs_chdir(DCROOT "/wolf3d");
-			goto copy2ram;
-		}
-	}
-#else
-	fp = fopen(DCROOT "/wolf3d/vgahead.sdm", "r");
-#endif
-#else
-#ifdef UPLOAD
-	fp = fopen(DCROOT "/wolf3d/vgahead.wl1", "r");
-#else
-	fp = fopen(DCROOT "/wolf3d/vgahead.wl6", "r");
-#endif
-#endif
-	if(fp)	{
-		fclose(fp);
-		fs_chdir(DCROOT "/wolf3d");
-		goto copy2ram;
-	}
-
-	DC_CLS();
-	DC_DrawString(4, 1, "Wolf4SDL\\DC 1.5");
-	DC_DrawString(4, 6, "Please insert your Wolfenstein 3D CD");
-	DC_DrawString(4, 7, "and press start.");
-
-	firstPad = maple_first_controller();
-	cont_get_cond(firstPad, &cond);
-	while((cond.buttons & CONT_START))	{
-		SDL_Delay(5);
-		cont_get_cond(firstPad, &cond);
-	}
-
-	for(;;) {
-#ifdef SPEAR
-#ifndef SPEARDEMO
-		/* Activision Wolfenstein 3D CD-ROM */
-		Missions = GetAvailableMissions(DCROOT "/Install/data/SOD/");
-		if(Missions != 0) {
-			if(Missions == 1)	{
-				fs_chdir(DCROOT "/Install/data/SOD");
-				goto copy2ram;
-			}
-			else	{
-				selectedMission = DC_SpearMenu();
-				fs_chdir(DCROOT "/Install/data/SOD");
-				goto copy2ram;
-			}
-		}
-
-		/* Spear of Destiny Super CD CD-ROM */
-		Missions = GetAvailableMissions(DCROOT "/");
-		if(Missions != 0) {
-			if(Missions == 1)	{
-				fs_chdir(DCROOT);
-				goto copy2ram;
-			}
-			else	{
-				selectedMission = DC_SpearMenu();
-				fs_chdir(DCROOT);
-				goto copy2ram;
-			}
-		}
-#endif
-#else
-#ifdef UPLOAD
-		/* Random Shareware CD-ROM */
-		fp = fopen(DCROOT "/vgahead.wl1", "r");
-		if(fp)	{
-			fclose(fp);
-			fs_chdir(DCROOT);
-			goto copy2ram;
-		}
-#else
-		/* Activision Wolfenstein 3D CD-ROM */
-		fp = fopen(DCROOT "/Install/data/WOLF3D/vgahead.wl6", "r");
-		if(fp)	{
-			fclose(fp);
-			fs_chdir(DCROOT "/Install/data/WOLF3D");
-			goto copy2ram;
-		}
-
-		/* Random Full Version CD-ROM */
-		fp = fopen(DCROOT "/vgahead.wl6", "r");
-		if(fp)	{
-			fclose(fp);
-			fs_chdir(DCROOT);
-			goto copy2ram;
-		}
-
-		/* RTCW Game of the Year CD-ROM */
-		fp = fopen(DCROOT "/Bonus/Wolf3D/PROGRAM FILES/Wolfenstein 3D/wolf3d/vgahead.wl6", "r");
-		if(fp)	{
-			fclose(fp);
-			fs_chdir(DCROOT "/Bonus/Wolf3D/PROGRAM FILES/Wolfenstein 3D/wolf3d");
-			goto copy2ram;
-		}
-#endif
-#endif
-	}
-
-copy2ram:
-	DC_CLS();
-
-#ifdef SPEAR
-#ifndef SPEARDEMO
-	fs_copy("audiohed.sod", "/ram/audiohed.sod");
-	fs_copy("audiot.sod", "/ram/audiot.sod");
-	fs_copy("vgadict.sod", "/ram/vgadict.sod");
-	fs_copy("vgagraph.sod", "/ram/vgagraph.sod");
-	fs_copy("vgahead.sod", "/ram/vgahead.sod");
-	switch(selectedMission)	{
-		case 1:
-			param_mission = 1;
-			fs_copy("gamemaps.sod", "/ram/gamemaps.sod");
-			fs_copy("maphead.sod", "/ram/maphead.sod");
-			fs_copy("vswap.sod", "/ram/vswap.sod");
-			break;
-		case 2:
-			param_mission = 2;
-			fs_copy("gamemaps.sd2", "/ram/gamemaps.sd2");
-			fs_copy("maphead.sd2", "/ram/maphead.sd2");
-			fs_copy("vswap.sd2", "/ram/vswap.sd2");
-			break;
-		case 3:
-			param_mission = 3;
-			fs_copy("gamemaps.sd3", "/ram/gamemaps.sd3");
-			fs_copy("maphead.sd3", "/ram/maphead.sd3");
-			fs_copy("vswap.sd3", "/ram/vswap.sd3");
-			break;
-		default:
-			dbglog(DBG_DEBUG, "Unknown: Mission %i\n", selectedMission);
-			break;
-	}
-#else
-	fs_copy("audiohed.sdm", "/ram/audiohed.sdm");
-	fs_copy("audiot.sdm", "/ram/audiot.sdm");
-	fs_copy("vgadict.sdm", "/ram/vgadict.sdm");
-	fs_copy("vgagraph.sdm", "/ram/vgagraph.sdm");
-	fs_copy("vgahead.sdm", "/ram/vgahead.sdm");
-	fs_copy("gamemaps.sdm", "/ram/gamemaps.sdm");
-	fs_copy("maphead.sdm", "/ram/maphead.sdm");
-	fs_copy("vswap.sdm", "/ram/vswap.sdm");
-#endif
-#else
-#ifndef UPLOAD
-	fs_copy("audiohed.wl6", "/ram/audiohed.wl6");
-	fs_copy("audiot.wl6", "/ram/audiot.wl6");
-	fs_copy("vgadict.wl6", "/ram/vgadict.wl6");
-	fs_copy("vgagraph.wl6", "/ram/vgagraph.wl6");
-	fs_copy("vgahead.wl6", "/ram/vgahead.wl6");
-	fs_copy("gamemaps.wl6", "/ram/gamemaps.wl6");
-	fs_copy("maphead.wl6", "/ram/maphead.wl6");
-	fs_copy("vswap.wl6", "/ram/vswap.wl6");
-#else
-	fs_copy("audiohed.wl1", "/ram/audiohed.wl1");
-	fs_copy("audiot.wl1", "/ram/audiot.wl1");
-	fs_copy("vgadict.wl1", "/ram/vgadict.wl1");
-	fs_copy("vgagraph.wl1", "/ram/vgagraph.wl1");
-	fs_copy("vgahead.wl1", "/ram/vgahead.wl1");
-	fs_copy("gamemaps.wl1", "/ram/gamemaps.wl1");
-	fs_copy("maphead.wl1", "/ram/maphead.wl1");
-	fs_copy("vswap.wl1", "/ram/vswap.wl1");
-#endif
-#endif
-
-	fs_chdir("/ram");
-}
-
-void DC_CheckParameters()	{
-	FILE 	*fp;
-	char 	*buf;
-	char 	*result = NULL;
-    bool 	sampleRateGiven = false;
-    bool 	audioBufferGiven = false;
-	int		length = 0;
-
-	fp = fopen(DCROOT "/params.txt", "r");
-
-	if(!fp)
-		return;
-
-	// Get file length
-	fseek(fp, 0, SEEK_END);
-	length = ftell(fp);
-	fseek(fp, 0, SEEK_SET);
-
-	// Read file
-	buf = (char *)malloc(length + 2);
-	fread(buf, 1, length, fp);
-	buf[length]=0;
-	fclose(fp);
-
-	result = strtok(buf, " ");
-
-	while(result != NULL) {
-#ifndef SPEAR
-		if(!strcmp(result, "--goobers"))
-#else
-		if(!strcmp(result, "--debugmode"))
-#endif
-			param_debugmode = true;
-		else if(!strcmp(result, "--baby"))
-            param_difficulty = 0;
-		else if(!strcmp(result, "--easy"))
-            param_difficulty = 1;
-		else if(!strcmp(result, "--normal"))
-            param_difficulty = 2;
-		else if(!strcmp(result, "--hard"))
-            param_difficulty = 3;
-		else if(!strcmp(result, "--nowait"))
-            param_nowait = true;
-		else if(!strcmp(result, "--tedlevel"))
-		{
-			result = strtok(NULL, " ");
-			param_tedlevel = atoi(result);
-		}
-		else if(!strcmp(result, "--res"))
-		{
-			result = strtok(NULL, " ");
-			screenWidth = atoi(result);
-			result = strtok(NULL, " ");
-			screenHeight = atoi(result);
-			if(screenWidth % 320)
-			{
-				dbglog(DBG_DEBUG, "Screen width must be a multiple of 320!\n");
-				dbglog(DBG_DEBUG, "Defaulting to 320x200.\n");
-				screenWidth = 320;
-				screenHeight = 200;
-			}
-			if(screenHeight % 200)
-			{
-				dbglog(DBG_DEBUG, "Screen height must be a multiple of 200!");
-				dbglog(DBG_DEBUG, "Defaulting to 320x200.\n");
-				screenWidth = 320;
-				screenHeight = 200;
-			}
-		}
-		else if(!strcmp(result, "--samplerate"))
-		{
-			result = strtok(NULL, " ");
-			param_samplerate = atoi(result);
-            sampleRateGiven = true;
-		}
-		else if(!strcmp(result, "--audiobuffer"))
-		{
-			result = strtok(NULL, " ");
-            param_audiobuffer = atoi(result);
-            audioBufferGiven = true;
-		}
-		else if(!strcmp(result, "--goodtimes"))
-            param_goodtimes = true;
-
-		result = strtok(NULL, " ");
-	}
-
-	free(buf);
-
-	if(sampleRateGiven && !audioBufferGiven)
-		param_audiobuffer = 4096 / (44100 / param_samplerate);
-}
-
-int DC_MousePresent() {
-	return maple_first_mouse() != 0;
-}
-
-#endif // _arch_dreamcast
diff -urN --exclude .git Wolf4SDL-1.6-src/dc_vmu.cpp wolf4sdl/dc_vmu.cpp
--- Wolf4SDL-1.6-src/dc_vmu.cpp	2008-03-25 02:11:28.000000000 +0100
+++ wolf4sdl/dc_vmu.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,148 +0,0 @@
-/*
-    dc_vmu.cpp
-    This file is part of the Wolf4SDL\DC project.
-    It has the LCD drawing and soon saving functions.
-
-    LCD drawing code found in Sam Steele's DreamZZT.
-    Saving code found in OneThirty8's SDLWolf-3D port.
-
-    Cyle Terry <cyle.terry@gmail.com>
-*/
-
-#ifdef _arch_dreamcast
-
-#include <kos.h>
-#include <zlib/zlib.h>
-#include "wl_def.h"
-#include "dc_vmu.h"
-
-maple_device_t *lcds[8];
-uint8 bitmap[48*32/8];
-
-void StatusDrawLCD(int idxLCD) {
-    const char *c;
-    int x, y, xi, xb, i;
-    maple_device_t *dev;
-
-    memset(bitmap, 0, sizeof(bitmap));
-
-    c = BJFacesLCD[idxLCD-FACE1APIC];
-
-    if(c) {
-        for(y = 0; y < 32; y++)    {
-            for(x = 0; x < 48; x++)    {
-                xi = x / 8;
-                xb = 0x80 >> (x % 8);
-                if(c[(31 - y) * 48 + (47 - x)] == '.')
-                    bitmap[y * (48 / 8) + xi] |= xb;
-            }
-        }
-    }
-
-    i = 0;
-    while( (dev = maple_enum_type(i++, MAPLE_FUNC_LCD)) ) {
-        vmu_draw_lcd(dev, bitmap);
-    }
-
-    vmu_shutdown();
-}
-
-int DC_SaveToVMU(char *src, int tp) {
-    char dst[32];
-    file_t file;
-    int filesize = 0;
-    unsigned long zipsize = 0;
-    uint8 *data;
-    uint8 *zipdata;
-    vmu_pkg_t pkg;
-    uint8 *pkg_out;
-    int pkg_size;
-
-    strcpy(dst, "/vmu/a1/");
-    strcat(dst, src);
-
-    file = fs_open(src, O_RDONLY);
-    filesize = fs_total(file);
-    data = (uint8*)malloc(filesize);
-    fs_read(file, data, filesize);
-    fs_close(file);
-
-    zipsize = filesize * 2;
-    zipdata = (uint8*)malloc(zipsize);
-    compress(zipdata, &zipsize, data, filesize);
-
-    // Required VMU header
-#ifndef SPEAR
-    strcpy(pkg.desc_short, "Wolf4SDL\\DC");
-    if(tp == 1)
-        strcpy(pkg.desc_long, "Configuration");
-    else
-        strcpy(pkg.desc_long, "Game Save");
-    strcpy(pkg.app_id, "Wolf4SDL\\DC");
-#else
-    strcpy(pkg.desc_short, "Sod4SDL\\DC");
-    if(tp == 1)
-        strcpy(pkg.desc_long, "Configuration");
-    else
-        strcpy(pkg.desc_long, "Game Save");
-    strcpy(pkg.app_id, "Sod4SDL\\DC");
-#endif
-    pkg.icon_cnt = 1;
-    pkg.icon_anim_speed = 0;
-    memcpy(&pkg.icon_pal[0], icon_data, 32);
-    pkg.icon_data = icon_data + 32;
-    pkg.eyecatch_type = VMUPKG_EC_NONE;
-    pkg.data_len = zipsize;
-    pkg.data = zipdata;
-    vmu_pkg_build(&pkg, &pkg_out, &pkg_size);
-
-    fs_unlink(dst);
-    file = fs_open(dst, O_WRONLY);
-    fs_write(file, pkg_out, pkg_size);
-    fs_close(file);
-
-    free(pkg_out);
-    free(data);
-    free(zipdata);
-
-    return 0;
-}
-
-int DC_LoadFromVMU(char *dst) {
-    char src[32];
-    int file;
-    int filesize;
-    unsigned long unzipsize;
-    uint8* data;
-    uint8* unzipdata;
-    vmu_pkg_t pkg;
-
-    strcpy(src, "/vmu/a1/");
-    strcat(src, dst);
-
-    // Remove VMU header
-    file = fs_open(src, O_RDONLY);
-    if(file == 0) return -1;
-    filesize = fs_total(file);
-    if(filesize <= 0) return -1;
-    data = (uint8*)malloc(filesize);
-    fs_read(file, data, filesize);
-    vmu_pkg_parse(data, &pkg);
-    fs_close(file);
-
-    unzipdata = (uint8 *)malloc(65536);
-    unzipsize = 65536;
-
-    uncompress(unzipdata, &unzipsize, (uint8 *)pkg.data, pkg.data_len);
-    fs_unlink(dst);
-    file = fs_open(dst, O_WRONLY);
-    fs_write(file, unzipdata, unzipsize);
-    fs_close(file);
-
-    free(data);
-    free(unzipdata);
-
-    return 0;
-}
-
-#endif // _arch_dreamcast
diff -urN --exclude .git Wolf4SDL-1.6-src/dc_vmu.h wolf4sdl/dc_vmu.h
--- Wolf4SDL-1.6-src/dc_vmu.h	2008-05-04 02:05:26.000000000 +0200
+++ wolf4sdl/dc_vmu.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,1167 +0,0 @@
-/*
-	dc_vmu.h
-	This file is part of the Wolf4SDL\DC project.
-	It defines the VMU save icon and LCD images.
-
-	Cyle Terry <cyle.terry@gmail.com>
-    BJ LCD images made by Antioch.
-*/
-
-const unsigned char icon_data[544] ={
-	0x00, 0xf0, 0x0d, 0xf0, 0x0f, 0xf0, 0x00, 0x0f,
-	0x44, 0xf4, 0x62, 0xfb, 0x96, 0xff, 0xca, 0xff,
-	0xff, 0xff, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0,
-	0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0,
-	0x33, 0x33, 0x33, 0x33, 0x33, 0x55, 0x55, 0x55,
-	0x55, 0x55, 0x53, 0x33, 0x33, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x05, 0x55, 0x55, 0x55, 0x55,
-	0x56, 0x56, 0x55, 0x53, 0x33, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x30, 0x55, 0x55, 0x55, 0x55, 0x55,
-	0x55, 0x55, 0x55, 0x55, 0x53, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x34, 0x55, 0x55, 0x55, 0x55, 0x55,
-	0x55, 0x55, 0x66, 0x55, 0x53, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x45, 0x55, 0x55, 0x44, 0x45, 0x55,
-	0x45, 0x45, 0x56, 0x55, 0x55, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x04, 0x55, 0x54, 0x44, 0x45, 0x45,
-	0x44, 0x55, 0x55, 0x55, 0x55, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x45, 0x54, 0x45, 0x66, 0x55, 0x54,
-	0x44, 0x44, 0x55, 0x54, 0x45, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x34, 0x45, 0x56, 0x67, 0x76, 0x66,
-	0x55, 0x55, 0x56, 0x65, 0x54, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x34, 0x56, 0x67, 0x77, 0x77, 0x77,
-	0x56, 0x56, 0x56, 0x75, 0x54, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x34, 0x57, 0x76, 0x76, 0x77, 0x77,
-	0x76, 0x66, 0x77, 0x76, 0x64, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x34, 0x56, 0x66, 0x78, 0x87, 0x77,
-	0x75, 0x57, 0x78, 0x66, 0x64, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x44, 0x57, 0x74, 0x45, 0x57, 0x77,
-	0x76, 0x65, 0x44, 0x76, 0x60, 0x43, 0x33, 0x33,
-	0x33, 0x33, 0x60, 0x64, 0x44, 0x10, 0x00, 0x55,
-	0x50, 0x04, 0x41, 0x46, 0x64, 0x63, 0x33, 0x33,
-	0x33, 0x33, 0x60, 0x66, 0x67, 0x12, 0x75, 0x56,
-	0x55, 0x71, 0x28, 0x65, 0x54, 0x63, 0x33, 0x33,
-	0x33, 0x33, 0x55, 0x67, 0x76, 0x66, 0x67, 0x67,
-	0x77, 0x76, 0x66, 0x76, 0x64, 0x53, 0x33, 0x33,
-	0x33, 0x33, 0x66, 0x77, 0x78, 0x78, 0x77, 0x68,
-	0x77, 0x77, 0x88, 0x76, 0x67, 0x63, 0x33, 0x33,
-	0x33, 0x33, 0x66, 0x77, 0x78, 0x78, 0x77, 0x68,
-	0x77, 0x77, 0x88, 0x76, 0x67, 0x63, 0x33, 0x33,
-	0x33, 0x33, 0x66, 0x67, 0x77, 0x87, 0x76, 0x77,
-	0x76, 0x77, 0x78, 0x76, 0x66, 0x63, 0x33, 0x33,
-	0x33, 0x33, 0x54, 0x57, 0x77, 0x77, 0x65, 0x54,
-	0x55, 0x67, 0x77, 0x65, 0x54, 0x53, 0x33, 0x33,
-	0x33, 0x33, 0x35, 0x66, 0x66, 0x77, 0x66, 0x65,
-	0x77, 0x67, 0x77, 0x66, 0x65, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x66, 0x67, 0x76, 0x77, 0x76,
-	0x77, 0x77, 0x76, 0x66, 0x63, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x76, 0x67, 0x76, 0x55, 0x66,
-	0x65, 0x56, 0x77, 0x67, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x67, 0x76, 0x76, 0x67, 0x77,
-	0x77, 0x66, 0x76, 0x77, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x66, 0x67, 0x77, 0x76, 0x66,
-	0x67, 0x77, 0x77, 0x67, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x56, 0x67, 0x77, 0x87, 0x77,
-	0x77, 0x78, 0x77, 0x67, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x45, 0x56, 0x67, 0x77, 0x76,
-	0x67, 0x77, 0x76, 0x67, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x55, 0x55, 0x55, 0x66, 0x55,
-	0x66, 0x57, 0x55, 0x77, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44, 0x44,
-	0x44, 0x54, 0x56, 0x77, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x55, 0x54, 0x54, 0x45, 0x54,
-	0x55, 0x55, 0x77, 0x57, 0x73, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x44, 0x45, 0x45, 0x56, 0x56,
-	0x56, 0x57, 0x77, 0x75, 0x53, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x54, 0x44, 0x55, 0x66, 0x67,
-	0x76, 0x56, 0x76, 0x75, 0x53, 0x33, 0x33, 0x33,
-	0x33, 0x33, 0x33, 0x45, 0x55, 0x55, 0x67, 0x66,
-	0x77, 0x66, 0x76, 0x55, 0x53, 0x33, 0x33, 0x33,
-};
-
-static const char FACE1ALCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ..         ..  ..             \
-              .. .....     ..... ..             \
-             ..... ........... .....            \
-             ... . .. . . . .. . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .   .   .   . .             \
-              .    .         .    .             \
-              .     .........     .             \
-               .                 .              \
-               .      .....      .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE1BLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              .. ...             ..             \
-              ...   .        ..  ..             \
-              ........     ..... ..             \
-             ......  ........  .....            \
-             ... ..   . . ...  . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .     ......    . .             \
-              . .       .   .   . .             \
-              .              .    .             \
-              .      .........    .             \
-               .                 .              \
-               .       ....      .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE1CLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..             ......             \
-              ..  ..        .    ..             \
-              .. .....     ..... ..             \
-             .....  ......... ......            \
-             ... .  ... . .   .. ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .   .       . .             \
-              .    .              .             \
-              .     ........      .             \
-               .                 .              \
-               .      .....      .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE2ALCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ..         ..  ..             \
-              .. .....     ..... ..             \
-             ..... ........... .....            \
-             ... . .. . . . .. . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .   .   .   . .             \
-              .    .         .    .             \
-              .     .........     .             \
-               .           .     .              \
-               .      .... .     .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE2BLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              .. ...             ..             \
-              ...   .        ..  ..             \
-              ........     ..... ..             \
-             ......  ........  .....            \
-             ... ..   . . ...  . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .     ......    . .             \
-              . .       .   .   . .             \
-              .              .    .             \
-              .      .........    .             \
-               .            .    .              \
-               .       .... .    .              \
-               ..           .   ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE2CLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..             ......             \
-              ..  ..        .    ..             \
-              .. .....     ..... ..             \
-             .....  ......... ......            \
-             ... .  ... . .   .. ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .   .       . .             \
-              .    .              .             \
-              .     ........      .             \
-               .          .      .              \
-               .      .....      .              \
-               ..         .     ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE3ALCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ..         ..  ..             \
-              .. .....     ..... ..             \
-             ..... ........... .....            \
-             ... . .. . . . .. . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .   . . .   . .             \
-              .    .      .  .    .             \
-              .     .........     .             \
-               .          ..     .              \
-               .      .... .     .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE3BLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              .. ...             ..             \
-              ...   .        ..  ..             \
-              ........     ..... ..             \
-             ......  ........  .....            \
-             ... ..   . . ...  . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .     ......    . .             \
-              . .       . . .   . .             \
-              .           .. .    .             \
-              .      .........    .             \
-               .            ..   .              \
-               .       .... .    .              \
-               ..           .   ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE3CLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..             ......             \
-              ..  ..        .    ..             \
-              .. .....     ..... ..             \
-             .....  ......... ......            \
-             ... .  ... . ... .. ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .   . .     . .             \
-              .    .     ..       .             \
-              .     ........      .             \
-               .          ..     .              \
-               .      .....      .              \
-               ..         .     ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE4ALCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ..         ..  ..             \
-              .. .....     ..... ..             \
-             ..... ........... .....            \
-             ... . .. . . ...... ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   . . . . .   . .             \
-              .    .  .   .  .    .             \
-              .     .........     .             \
-               .        ......   .              \
-               .      ....  .    .              \
-               ..           .   ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE4BLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              .. ...             ..             \
-              ...   .        ..  ..             \
-              ........     ..... ..             \
-             ......  ........  .....            \
-             ... ..   . .....  . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .     ......    . .             \
-              . .     . . . .   . .             \
-              .       .   .. .    .             \
-              .      .........    .             \
-               .          .....  .              \
-               .       .... .    .              \
-               ..           .   ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE4CLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..             ......             \
-              ..  ..        .    ..             \
-              .. .....     ..... ..             \
-             .....  ......... ......            \
-             ... .  ... . ... .. ...            \
-             ...        .   .    ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .  .. .     . .             \
-              .    .    ...       .             \
-              .     ........      .             \
-               .         ...     .              \
-               .      .....      .              \
-               ..         .     ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE5ALCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ..         ..  ..             \
-              .. .....     ..... ..             \
-             ..... ......... . .....            \
-             ... . .. . . ...... ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   . . . . .   . .             \
-              .    .  .   .  .    .             \
-              .     .........     .             \
-               .     .  ......   .              \
-               .     ..........  .              \
-               ..    .      .   ..              \
-               ...      .   .  . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE5BLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              .. ...             ..             \
-              ...   .        ..  ..             \
-              ........     ..... ..             \
-             ......  ...............            \
-             ... ..   . .. .. .. ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .     ......    . .             \
-              . .      .. . .   . .             \
-              .        .  .. .    .             \
-              .      .........    .             \
-               .     .    .....  .              \
-               .     . .... .    .              \
-               ..    .      .   ..              \
-               ...      .   .  . .              \
-               ....     .   . .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE5CLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..             ......             \
-              ..  ..        ...  ..             \
-              .. .....     ..... ..             \
-             .....  ................            \
-             ... .  ... . ... .. ...            \
-             ...        .   .    ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .  .. .     . .             \
-              .    .  . ...       .             \
-              .     ........      .             \
-               .    ..   ...     .              \
-               .    . .... .     .              \
-               ..          .    ..              \
-               ...      .  .   . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE6ALCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .               .             \
-              .. .                .             \
-              . . .      ...    ...             \
-              .. . ....  .  .  .  .             \
-              . .      . .  . .   .             \
-              ...      . .  . .  ..             \
-              ..        .   ...  ..             \
-              ..            .    ..             \
-              .. ....       .... ..             \
-             ..... ....   ..........            \
-             ... . .. .......... ...            \
-             ...        .  ....  ...            \
-             ..                   ..            \
-             ..                   ..            \
-              ..      .   .      ..             \
-              . .    ..   ..    . .             \
-              . .   .  ...  .   . .             \
-              .        . .        .             \
-               .     .......     .              \
-               .    ..  ......   .              \
-               ..   ..     .    ..              \
-               ...   .     .   . .              \
-               ....     . .   .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE6BLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .               .             \
-              .. .                .             \
-              . . .      ...    ...             \
-              .. . ....  .  .  .  .             \
-              . .      . .  . .   .             \
-              ...      . .  . .  ..             \
-              ..        .   ...  ..             \
-              .. ...        .    ..             \
-              ...  ..       .... ..             \
-             ... .. ...   ..........            \
-             ... ..  ........... ...            \
-             ...        .  ....  ...            \
-             ..                   ..            \
-             ..                   ..            \
-              ..      .   .      ..             \
-              . .    ..   ..    . .             \
-              . .   .  ...  .   . .             \
-              .        . .        .             \
-               .     .......     .              \
-               .    ..  ......   .              \
-               ..   ..     .    ..              \
-               ...   .     .   . .              \
-               ....     . .   .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE6CLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .               .             \
-              .. .                .             \
-              . . .      ...    ...             \
-              .. . ....  .  .  .  .             \
-              . .      . .  . .   .             \
-              ...      . .  . .  ..             \
-              ..        .   ...  ..             \
-              ..           ..... ..             \
-              .. ....     . .   ...             \
-             .....  ...   ..........            \
-             ... .  ............ ...            \
-             ...        .  ....  ...            \
-             ..                   ..            \
-             ..                   ..            \
-              ..      .   .      ..             \
-              . .    ..   ..    . .             \
-              . .   .  ...  .   . .             \
-              .        . .        .             \
-               .     .......     .              \
-               .    ..  .....    .              \
-               ..   ..     .    ..              \
-               ...   .     .   . .              \
-               ....     . .   .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE7ALCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .               .             \
-              .. .                .             \
-              . . .               .             \
-              .. . .    .         .             \
-              . . ..   . . ..   ...             \
-              ....  . ..  . .  . ..             \
-              ...   .. .    .  . ..             \
-              ..   .        . .  ..             \
-             ...            ..   ...            \
-             ... ....     ...... ...            \
-             ..... ....   ..........            \
-             ...   ..  ... ..... ...            \
-             ..         . ......  ..            \
-              .              ..   .             \
-              .                   .             \
-              ..      .   .      ..             \
-              . .    ..   ..    ...             \
-              . .   .  ...  .   ...             \
-               .       . .       .              \
-               .    .........    .              \
-               ..   ..  ......  ..              \
-               ...  ..      .  . .              \
-               ....  .  . . . .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE7BLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .               .             \
-              .. .                .             \
-              . . .               .             \
-              .. . .    .         .             \
-              . . ..   . . ..   ...             \
-              ....  . ..  . .  . ..             \
-              ...   .. .    .  . ..             \
-              ..            . .  ..             \
-             ...  .         ..   ...            \
-             ... . ..       .... ...            \
-             ......  ..   ..........            \
-             ... ...  .... ..... ...            \
-             ..         . ......  ..            \
-              .              ..   .             \
-              .           .       .             \
-              .           .      ..             \
-              .      ..   ..    ...             \
-              ..       ...  .   ...             \
-               ..      . .       .              \
-               ..    ........    .              \
-               ...   .. ......  ..              \
-               ....  ..     .  . .              \
-               .....  . . . . .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE7CLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .               .             \
-              .. .                .             \
-              . . .               .             \
-              .. . .    .         .             \
-              . . ..   . . ..   ...             \
-              ....  . ..  . .  . ..             \
-              ...   .. .    .  . ..             \
-              ..   .        . .  ..             \
-             ...            ...  ...            \
-             ... ....     ...... ...            \
-             .....  ...   ..........            \
-             ... .. .. ... ..... ...            \
-             ..         . ....... ..            \
-              .              .. . .             \
-              .                   .             \
-              ..      .   .      ..             \
-              . .    ..   ..    ...             \
-              . .   .  ...  .   ...             \
-               .       . .       .              \
-               .   ..........    .              \
-               ..  ...  .....   ..              \
-               ...  ..     .   . .              \
-               .... ..  . ..  .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char FACE8ALCD[] =
-"\
-                                                \
-                                                \
-                                                \
-                 ..............                 \
-                . .            .                \
-               . .             ..               \
-              . . .              ..             \
-              .. .                .             \
-              . . .               .             \
-              .. .                .             \
-              ...                 .             \
-              .. .                .             \
-              ... . .             .             \
-              .. . . .            .             \
-             .... ....          ....            \
-             ... ...  . .       . ..            \
-             ... . .   . ..     . ..            \
-             .... .    .  .  . . ...            \
-             ...  ...     ... .  ...            \
-              .. .....    ......  .             \
-              .   ............. ...             \
-              .  ....  .  ...... ..             \
-               . ..   .    . .  ..              \
-               . .    .    .  .  .              \
-               . .    .    .  .  .              \
-               ...   ...  .     ..              \
-               ...  .......    . .              \
-               ...  .........  . .              \
-               ...  ...    ..  . .              \
-               ................  .              \
-                ....         .  .               \
-                .....       ..  .               ";
-
-static const char GOTGATLINGLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ... ..         ..  ..             \
-              ..    .       .    ..             \
-              .. .....     ..... ..             \
-              .. . .. .. .. .. . ..             \
-             ...  .. . . . . ..  ...            \
-             ...       . .       ...            \
-             ...                 ...            \
-             ..                   ..            \
-             .....   .     .   .....            \
-              . .    .......    . .             \
-              . . ..    .    .. . .             \
-              .   . ......... .   .             \
-              .    .         .    .             \
-               ..   .       .   ..              \
-               ..   ........    ..              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char MUTANTBJLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              .. . .         . . ..             \
-              .. .   .     .   . ..             \
-              ..  ..  .   .  ..  ..             \
-             ..... .. . . . .. .....            \
-             ... . . .. . .. . . ...            \
-             ...  ....  .  ....  ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              .  .   .  .  .   .  .             \
-              .  .             .  .             \
-              .  .   .......   .  .             \
-               .    .       .    .              \
-               .      .....      .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-#ifdef SPEAR
-static const char GODMODEFACE1LCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..                 ..             \
-              .. .....     ..... ..             \
-             .....   .......   .....            \
-             ... .    . . .    . ...            \
-             ...  . .   .   . .  ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .       .       . .             \
-              .                   .             \
-              .     .........     .             \
-               .                 .              \
-               .      .....      .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char GODMODEFACE2LCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ....           ..             \
-              .. .   ..    ..... ..             \
-             .....   ......... .....            \
-             ... .    . . .    . ...            \
-             ...  . .   .   . .  ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .       .       . .             \
-              .                   .             \
-              .     .........     .             \
-               .                 .              \
-               .      .....      .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char GODMODEFACE3LCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..           ....  ..             \
-              .. ....     ..   ....             \
-             ..... ........    . ...            \
-             ... .    . . .    . ...            \
-             ...  . .   .   . .  ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .       .       . .             \
-              .                   .             \
-              .     .........     .             \
-               .                 .              \
-               .      .....      .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char BJWAITING1LCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ..         ..  ..             \
-              .. .....     ..... ..             \
-             .....  .........  .....            \
-             ... .  ... . ...  . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . ..   .......   .. .             \
-              .  .  .   .   .  .  .             \
-              .  .             .  .             \
-              .  .    .....    .  .             \
-               .                 .              \
-               .                 .              \
-               ..               ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char BJWAITING2LCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              ..  ..         ..  ..             \
-              .. .....     ..... ..             \
-             ..... ........... .....            \
-             ... . .. . . . .. . ...            \
-             ...        .        ...            \
-             ..                   ..            \
-             ....     .   .     ....            \
-              .  .   .......   .  .             \
-              .  .  .   .   .  .  .             \
-              .    .         .    .             \
-              .       .....       .             \
-               .     .. . ..     .              \
-               .      . . .      .              \
-               ..     .   .     ..              \
-               ...     ...     . .              \
-               ....           .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-
-static const char BJOUCHLCD[] =
-"\
-                                                \
-                 ...............                \
-                .               .               \
-               . .               .              \
-              . . .      ...    ...             \
-              .. . ....  .  .  . ..             \
-              . . .    . .   ..   .             \
-              .. .      .     .   .             \
-              . .             .   .             \
-              ...                ..             \
-              ..                 ..             \
-              .. ......   ...... ..             \
-              .....  .     .  .....             \
-             ... . .. .   . .. . ...            \
-             ... . .. .. .. .. . ...            \
-             ...  .  .     .  .  ...            \
-             ..                   ..            \
-             ...      .   .      ...            \
-              . .    .......    . .             \
-              . .   .   .   .   . .             \
-              .                   .             \
-              .      .......      .             \
-               .    .........    .              \
-               .                 .              \
-               ..      ...      ..              \
-               ...      .      . .              \
-               ....     .     .  .              \
-               ...............   .              \
-               .....         .  ..              \
-                ....         .  .               \
-                .....       .   .               \
-                .....       .   .               ";
-#endif //SPEAR
-
-static const char *BJFacesLCD[] = {
-	FACE1ALCD,
-	FACE1BLCD,
-	FACE1CLCD,
-	FACE2ALCD,
-	FACE2BLCD,
-	FACE2CLCD,
-	FACE3ALCD,
-	FACE3BLCD,
-	FACE3CLCD,
-	FACE4ALCD,
-	FACE4BLCD,
-	FACE4CLCD,
-	FACE5ALCD,
-	FACE5BLCD,
-	FACE5CLCD,
-	FACE6ALCD,
-	FACE6BLCD,
-	FACE6CLCD,
-	FACE7ALCD,
-	FACE7BLCD,
-	FACE7CLCD,
-	FACE8ALCD,
-	GOTGATLINGLCD,
-#ifndef SPEAR
-	MUTANTBJLCD
-#else
-	MUTANTBJLCD,
-	GODMODEFACE1LCD,
-	GODMODEFACE2LCD,
-	GODMODEFACE3LCD,
-	BJWAITING1LCD,
-	BJOUCHLCD
-#endif
-};
diff -urN --exclude .git Wolf4SDL-1.6-src/f_spear.h wolf4sdl/f_spear.h
--- Wolf4SDL-1.6-src/f_spear.h	2007-12-31 00:01:08.000000000 +0100
+++ wolf4sdl/f_spear.h	2011-04-27 19:58:18.548203098 +0200
@@ -1,13 +1,3 @@
-#define ENDSTR1	        "Heroes don't quit, but\ngo ahead and press Y\nif you aren't one."
-#define ENDSTR2	        "Press Y to quit,\nor press N to enjoy\nmore violent diversion."
-#define ENDSTR3	        "Depressing the Y key means\nyou must return to the\nhumdrum workday world."
-#define ENDSTR4	        "Hey, quit or play,\nY or N:\nit's your choice."
-#define ENDSTR5	        "Sure you don't want to\nwaste a few more\nproductive hours?"
-#define ENDSTR6	        "I think you had better\nplay some more. Please\npress N...please?"
-#define ENDSTR7	        "If you are tough, press N.\nIf not, press Y daintily."
-#define ENDSTR8	        "I'm thinkin' that\nyou might wanna press N\nto play more. You do it."
-#define ENDSTR9	        "Sure. Fine. Quit.\nSee if we care.\nGet it over with.\nPress Y."
-
 #define STR_ENDGAME1	"We owe you a great debt, Mr. Blazkowicz."
 #define STR_ENDGAME2	"You have served your country well."
 #define STR_ENDGAME3	"With the spear gone, the Allies will finally"
diff -urN --exclude .git Wolf4SDL-1.6-src/foreign.h wolf4sdl/foreign.h
--- Wolf4SDL-1.6-src/foreign.h	2007-12-31 00:01:08.000000000 +0100
+++ wolf4sdl/foreign.h	2011-04-27 19:58:18.549203098 +0200
@@ -107,3 +107,25 @@
 #define STR_SAVECHT4	"play anyway...."
 
 #define	STR_SEEAGAIN	"Let's see that again!"
+
+#ifdef SPEAR
+#define ENDSTR1 "Heroes don't quit, but\ngo ahead and press " YESBUTTONNAME "\nif you aren't one."
+#define ENDSTR2 "Press " YESBUTTONNAME " to quit,\nor press " NOBUTTONNAME " to enjoy\nmore violent diversion."
+#define ENDSTR3 "Depressing the " YESBUTTONNAME " key means\nyou must return to the\nhumdrum workday world."
+#define ENDSTR4 "Hey, quit or play,\n" YESBUTTONNAME " or " NOBUTTONNAME ":\nit's your choice."
+#define ENDSTR5 "Sure you don't want to\nwaste a few more\nproductive hours?"
+#define ENDSTR6 "I think you had better\nplay some more. Please\npress " NOBUTTONNAME "...please?"
+#define ENDSTR7 "If you are tough, press " NOBUTTONNAME ".\nIf not, press " YESBUTTONNAME " daintily."
+#define ENDSTR8 "I'm thinkin' that\nyou might wanna press " NOBUTTONNAME "\nto play more. You do it."
+#define ENDSTR9 "Sure. Fine. Quit.\nSee if we care.\nGet it over with.\nPress " YESBUTTONNAME "."
+#else
+#define ENDSTR1 "Dost thou wish to\nleave with such hasty\nabandon?"
+#define ENDSTR2 "Chickening out...\nalready?"
+#define ENDSTR3 "Press " NOBUTTONNAME " for more carnage.\nPress " YESBUTTONNAME " to be a weenie."
+#define ENDSTR4 "So, you think you can\nquit this easily, huh?"
+#define ENDSTR5 "Press " NOBUTTONNAME " to save the world.\nPress " YESBUTTONNAME " to abandon it in\nits hour of need."
+#define ENDSTR6 "Press " NOBUTTONNAME " if you are brave.\nPress " YESBUTTONNAME " to cower in shame."
+#define ENDSTR7 "Heroes, press " NOBUTTONNAME ".\nWimps, press " YESBUTTONNAME "."
+#define ENDSTR8 "You are at an intersection.\nA sign says, 'Press " YESBUTTONNAME " to quit.'\n>"
+#define ENDSTR9 "For guns and glory, press " NOBUTTONNAME ".\nFor work and worry, press " YESBUTTONNAME "."
+#endif
diff -urN --exclude .git Wolf4SDL-1.6-src/gp2x.cpp wolf4sdl/gp2x.cpp
--- Wolf4SDL-1.6-src/gp2x.cpp	2008-05-23 23:17:04.000000000 +0200
+++ wolf4sdl/gp2x.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,331 +0,0 @@
-//
-// GP2X specific code
-//
-// by Pickle
-//
-
-#ifdef GP2X
-
-#include "gp2x.h"
-
-static unsigned int screenshot_count = 0;
-static int volume = 30;
-
-static int intUp          = 0;
-static int intDown        = 0;
-static int intLeft        = 0;
-static int intRight       = 0;
-static int intUpRight     = 0;
-static int intUpLeft      = 0;
-static int intDownRight   = 0;
-static int intDownLeft    = 0;
-static int intButtonR     = 0;
-static int intButtonL     = 0;
-static int intButtonA     = 0;
-static int intButtonB     = 0;
-static int intButtonX     = 0;
-static int intButtonY     = 0;
-static int intButtonSel   = 0;
-static int intButtonSrt   = 0;
-static int intButtonStick = 0;
-
-void GP2X_Init()
-{
-    GP2X_StartMMUHack();
-    GP2X_AdjustVolume(VOLUME_NOCHG);
-}
-
-void GP2X_Shutdown()
-{
-    system("/sbin/rmmod mmuhack");
-}
-
-void GP2X_StartMMUHack()
-{
-    system("/sbin/rmmod mmuhack");
-    system("/sbin/insmod mmuhack.o");
-
-    int mmufd = open("/dev/mmuhack", O_RDWR);
-    if(mmufd < 0)
-    {
-        printf("MMU hack failed\n");
-    }
-    else
-    {
-        printf("MMU hack loaded\n");
-        close(mmufd);
-    }
-}
-
-void GP2X_AdjustVolume( int direction )
-{
-    if( volume <= 10 )
-    {
-        if( direction == VOLUME_UP )   volume += VOLUME_CHANGE_RATE/2;
-        if( direction == VOLUME_DOWN ) volume -= VOLUME_CHANGE_RATE/2;
-    }
-    else
-    {
-        if( direction == VOLUME_UP )   volume += VOLUME_CHANGE_RATE;
-        if( direction == VOLUME_DOWN ) volume -= VOLUME_CHANGE_RATE;
-    }
-
-    if( volume < VOLUME_MIN ) volume = VOLUME_MIN;
-    if( volume > VOLUME_MAX ) volume = VOLUME_MAX;
-
-    printf( "Volume Change: %i\n", volume );
-
-    unsigned long soundDev = open("/dev/mixer", O_RDWR);
-    if(soundDev)
-    {
-        int vol = ((volume << 8) | volume);
-        ioctl(soundDev, SOUND_MIXER_WRITE_PCM, &vol);
-        close(soundDev);
-    }
-}
-
-void GP2X_ButtonDown( int button )
-{
-    switch( button )
-    {
-        case GP2X_BUTTON_UP:        intUp          = 1; break;
-        case GP2X_BUTTON_DOWN:      intDown        = 1; break;
-        case GP2X_BUTTON_RIGHT:     intRight       = 1; break;
-        case GP2X_BUTTON_LEFT:      intLeft        = 1; break;
-        case GP2X_BUTTON_UPRIGHT:   intUpRight     = 1; break;
-        case GP2X_BUTTON_UPLEFT:    intUpLeft      = 1; break;
-        case GP2X_BUTTON_DOWNRIGHT: intDownRight   = 1; break;
-        case GP2X_BUTTON_DOWNLEFT:  intDownLeft    = 1; break;
-        case GP2X_BUTTON_SELECT:    intButtonSel   = 1; break;
-        case GP2X_BUTTON_START:     intButtonSrt   = 1; break;
-        case GP2X_BUTTON_X:         intButtonX     = 1; LastASCII = 'x'; break;
-        case GP2X_BUTTON_Y:         intButtonY     = 1; LastASCII = 'y'; break;
-        case GP2X_BUTTON_A:         intButtonA     = 1; LastASCII = 'a'; break;
-        case GP2X_BUTTON_B:         intButtonB     = 1; LastASCII = 'b'; break;
-        case GP2X_BUTTON_R:         intButtonR     = 1; break;
-        case GP2X_BUTTON_L:         intButtonL     = 1; break;
-        case GP2X_BUTTON_VOLUP:     GP2X_AdjustVolume( VOLUME_UP   ); break;
-        case GP2X_BUTTON_VOLDOWN:   GP2X_AdjustVolume( VOLUME_DOWN ); break;
-        case GP2X_BUTTON_CLICK:     intButtonStick = 1; break;
-    }
-
-    if( intButtonL & intButtonR )
-    {
-        // Status Bar
-        SetKeyboard( SDLK_TAB, KEY_DOWN );
-
-        // Music Player (doesnt work, it appears the event's arnt happening soon enough)
-        SetKeyboard( sc_M, KEY_DOWN );
-
-        SetKeyboard( SDLK_LALT, KEY_UP );
-        SetKeyboard( SDLK_LEFT, KEY_UP );
-        SetKeyboard( SDLK_RIGHT, KEY_UP );
-    }
-    else if( intButtonL & !intButtonR )
-    {
-        // Strafe Left
-        SetKeyboard( SDLK_LALT, KEY_DOWN );
-        SetKeyboard( SDLK_LEFT, KEY_DOWN );
-    }
-    else if( intButtonR & !intButtonL )
-    {
-        // Strafe Right
-        SetKeyboard( SDLK_LALT,  KEY_DOWN );
-        SetKeyboard( SDLK_RIGHT, KEY_DOWN );
-    }
-
-    // Left Direction
-    if( intLeft  | intDownLeft  | intUpLeft   )
-    {
-        // UNstrafe
-        SetKeyboard( SDLK_LALT,  KEY_UP );
-        SetKeyboard( SDLK_RIGHT, KEY_UP );
-        // Turn
-        SetKeyboard( SDLK_LEFT, KEY_DOWN );
-    }
-
-    // Right Direction
-    if( intRight | intDownRight | intUpRight  )
-    {
-        // UNstrafe
-        SetKeyboard( SDLK_LALT, KEY_UP );
-        SetKeyboard( SDLK_LEFT, KEY_UP );
-        // Turn
-        SetKeyboard( SDLK_RIGHT, KEY_DOWN );
-    }
-
-    // Up Direction
-    if( intUp    | intUpRight   | intUpLeft   ) {
-         SetKeyboard( SDLK_UP, KEY_DOWN );
-    }
-    // Down Direction
-    if( intDown  | intDownRight | intDownLeft ) {
-         SetKeyboard( SDLK_DOWN, KEY_DOWN );
-    }
-
-    if( intButtonSel & intButtonSrt ) {
-        // Pause
-        SetKeyboard( SDLK_PAUSE, KEY_DOWN );
-    }
-    else if( intButtonStick & intButtonSel ) {
-        fpscounter ^= 1;    // Turn On FPS Counter
-    }
-    else if( intButtonStick & intButtonSrt ) {
-        Screenshot();
-    }
-    else if( intButtonSel & !intButtonSrt ) {
-        // Escape
-        SetKeyboard( SDLK_ESCAPE, KEY_DOWN );
-    }
-    else if( !intButtonSel & intButtonSrt ) {
-        // Enter
-        SetKeyboard( SDLK_RETURN, KEY_DOWN );
-    }
-
-    if( intButtonX   ) {
-        // Shoot
-        SetKeyboard( SDLK_LCTRL,  KEY_DOWN );
-    }
-    if( intButtonY   ) {
-        // Yes
-        SetKeyboard( SDLK_y,      KEY_DOWN );
-
-        if( gamestate.chosenweapon == gamestate.bestweapon )
-        {
-            SetKeyboard( SDLK_1, KEY_DOWN );
-        }
-        else
-        {
-            SetKeyboard( SDLK_1 + gamestate.chosenweapon + 1, KEY_DOWN );
-        }
-    }
-    if( intButtonA   ) {
-        // Open
-        SetKeyboard( SDLK_SPACE,  KEY_DOWN );
-    }
-    if( intButtonB   ) {
-        // No
-        SetKeyboard( SDLK_n,      KEY_DOWN );
-        // Run
-        SetKeyboard( SDLK_LSHIFT, KEY_DOWN );
-    }
-}
-
-void GP2X_ButtonUp( int button )
-{
-    switch( button )
-    {
-        case GP2X_BUTTON_UP:        intUp          = 0; break;
-        case GP2X_BUTTON_DOWN:      intDown        = 0; break;
-        case GP2X_BUTTON_RIGHT:     intRight       = 0; break;
-        case GP2X_BUTTON_LEFT:      intLeft        = 0; break;
-        case GP2X_BUTTON_UPRIGHT:   intUpRight     = 0; break;
-        case GP2X_BUTTON_UPLEFT:    intUpLeft      = 0; break;
-        case GP2X_BUTTON_DOWNRIGHT: intDownRight   = 0; break;
-        case GP2X_BUTTON_DOWNLEFT:  intDownLeft    = 0; break;
-        case GP2X_BUTTON_SELECT:    intButtonSel   = 0; break;
-        case GP2X_BUTTON_START:     intButtonSrt   = 0; break;
-        case GP2X_BUTTON_X:         intButtonX     = 0; break;
-        case GP2X_BUTTON_Y:         intButtonY     = 0; break;
-        case GP2X_BUTTON_A:         intButtonA     = 0; break;
-        case GP2X_BUTTON_B:         intButtonB     = 0; break;
-        case GP2X_BUTTON_R:         intButtonR     = 0; break;
-        case GP2X_BUTTON_L:         intButtonL     = 0; break;
-        case GP2X_BUTTON_CLICK:     intButtonStick = 0; break;
-    }
-
-    if( !intButtonL | !intButtonR )
-    {
-        SetKeyboard( SDLK_TAB,  KEY_UP );
-        SetKeyboard( sc_M,      KEY_UP );
-        SetKeyboard( SDLK_LALT, KEY_UP );
-    }
-
-    if( !intLeft & !intDownLeft & !intUpLeft )
-    {
-        if( !intButtonL )
-        {
-            SetKeyboard( SDLK_LALT,  KEY_UP );
-            SetKeyboard( SDLK_LEFT,  KEY_UP );
-        }
-        if( intButtonR )
-        {
-            SetKeyboard( SDLK_LALT,  KEY_DOWN );
-            SetKeyboard( SDLK_RIGHT, KEY_DOWN );
-        }
-    }
-
-    if( !intRight & !intDownRight & !intUpRight )
-    {
-        if( !intButtonR )
-        {
-            SetKeyboard( SDLK_LALT,   KEY_UP );
-            SetKeyboard( SDLK_RIGHT,  KEY_UP );
-        }
-        if( intButtonL )
-        {
-            SetKeyboard( SDLK_LALT, KEY_DOWN );
-            SetKeyboard( SDLK_LEFT, KEY_DOWN );
-        }
-    }
-
-    if( !intUp    & !intUpRight   & !intUpLeft   ) {
-        SetKeyboard( SDLK_UP,    KEY_UP );
-    }
-    if( !intDown  & !intDownRight & !intDownLeft ) {
-        SetKeyboard( SDLK_DOWN,  KEY_UP );
-    }
-
-    if( !intButtonSel & !intButtonSrt ) {
-        SetKeyboard( SDLK_PAUSE, KEY_UP );
-    }
-    if( !intButtonSel ) {
-        SetKeyboard( SDLK_ESCAPE, KEY_UP );
-    }
-    if( !intButtonSrt ) {
-        SetKeyboard( SDLK_RETURN, KEY_UP );
-    }
-
-    if( !intButtonX   ) {
-        SetKeyboard( SDLK_LCTRL,  KEY_UP );
-    }
-    if( !intButtonY   ) {
-        SetKeyboard( SDLK_y, KEY_UP );
-        SetKeyboard( SDLK_1, KEY_UP );
-        SetKeyboard( SDLK_2, KEY_UP );
-        SetKeyboard( SDLK_3, KEY_UP );
-        SetKeyboard( SDLK_4, KEY_UP );
-    }
-    if( !intButtonA   ) {
-        SetKeyboard( SDLK_SPACE,  KEY_UP );
-    }
-    if( !intButtonB   ) {
-        SetKeyboard( SDLK_n,      KEY_UP );
-        SetKeyboard( SDLK_LSHIFT, KEY_UP );
-    }
-}
-
-void Screenshot( void )
-{
-    char filename[32];
-
-    snprintf( filename, sizeof(filename), "Screenshot_%i.bmp", screenshot_count );
-    SDL_SaveBMP(screen, filename );
-    screenshot_count++;
-}
-
-void SetKeyboard( unsigned int key, int press )
-{
-    // press = 1 = down, press = 0 = up
-    if( press )
-    {
-        LastScan = key;
-        Keyboard[key] = 1;
-    }
-    else
-    {
-        Keyboard[key] = 0;
-    }
-}
-
-#endif // GP2X
diff -urN --exclude .git Wolf4SDL-1.6-src/id_ca.cpp wolf4sdl/id_ca.cpp
--- Wolf4SDL-1.6-src/id_ca.cpp	2008-09-01 14:10:40.000000000 +0200
+++ wolf4sdl/id_ca.cpp	2011-04-27 19:58:18.550203098 +0200
@@ -16,10 +16,12 @@
 
 #include <sys/types.h>
 #if defined _WIN32
-	#include <io.h>
-#elif !defined _arch_dreamcast
-	#include <sys/uio.h>
-	#include <unistd.h>
+    #include <io.h>
+#elif defined _arch_dreamcast
+    #include <unistd.h>
+#else
+    #include <sys/uio.h>
+    #include <unistd.h>
 #endif
 
 #include "wl_def.h"
@@ -154,7 +156,7 @@
 
 boolean CA_WriteFile (const char *filename, void *ptr, int32_t length)
 {
-    const int handle = open(filename, O_CREAT | O_WRONLY | O_BINARY);
+    const int handle = open(filename, O_CREAT | O_WRONLY | O_BINARY, 0644);
     if (handle == -1)
         return false;
 
@@ -479,12 +481,18 @@
     long headersize = lseek(handle, 0, SEEK_END);
     lseek(handle, 0, SEEK_SET);
 
-    if(!param_ignorenumchunks && headersize / 3 != (long) (lengthof(grstarts) - numEpisodesMissing))
+#ifndef APOGEE_1_0
+	int expectedsize = lengthof(grstarts) - numEpisodesMissing;
+#else
+	int expectedsize = lengthof(grstarts);
+#endif
+
+    if(!param_ignorenumchunks && headersize / 3 != (long) expectedsize)
         Quit("Wolf4SDL was not compiled for these data files:\n"
             "%s contains a wrong number of offsets (%i instead of %i)!\n\n"
             "Please check whether you are using the right executable!\n"
             "(For mod developers: perhaps you forgot to update NUMCHUNKS?)",
-            fname, headersize / 3, lengthof(grstarts) - numEpisodesMissing);
+            fname, headersize / 3, expectedsize);
 
     byte data[lengthof(grstarts) * 3];
     read(handle, data, sizeof(data));
diff -urN --exclude .git Wolf4SDL-1.6-src/id_in.cpp wolf4sdl/id_in.cpp
--- Wolf4SDL-1.6-src/id_in.cpp	2008-09-01 01:32:28.000000000 +0200
+++ wolf4sdl/id_in.cpp	2011-04-27 19:58:18.550203098 +0200
@@ -33,6 +33,7 @@
 // configuration variables
 //
 boolean MousePresent;
+boolean forcegrabmouse;
 
 
 // 	Global variables
@@ -326,7 +327,7 @@
             break;
         }
 
-#ifdef GP2X
+#if defined(GP2X)
         case SDL_JOYBUTTONDOWN:
             GP2X_ButtonDown(event->jbutton.button);
             break;
@@ -388,7 +389,7 @@
 
     SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE);
 
-    if(fullscreen)
+    if(fullscreen || forcegrabmouse)
     {
         GrabInput = true;
         SDL_WM_GrabInput(SDL_GRAB_ON);
diff -urN --exclude .git Wolf4SDL-1.6-src/id_in.h wolf4sdl/id_in.h
--- Wolf4SDL-1.6-src/id_in.h	2008-04-13 02:01:50.000000000 +0200
+++ wolf4sdl/id_in.h	2011-04-27 19:58:18.550203098 +0200
@@ -142,6 +142,7 @@
 extern  volatile char       LastASCII;
 extern  volatile ScanCode   LastScan;
 extern           int        JoyNumButtons;
+extern           boolean    forcegrabmouse;
 
 
 // Function prototypes
diff -urN --exclude .git Wolf4SDL-1.6-src/id_sd.cpp wolf4sdl/id_sd.cpp
--- Wolf4SDL-1.6-src/id_sd.cpp	2008-09-01 01:32:28.000000000 +0200
+++ wolf4sdl/id_sd.cpp	2011-04-27 19:58:18.550203098 +0200
@@ -29,7 +29,11 @@
 
 #include "wl_def.h"
 #include <SDL_mixer.h>
+#if defined(GP2X_940)
+#include "gp2x/fmopl.h"
+#else
 #include "fmopl.h"
+#endif
 
 #pragma hdrstop
 
diff -urN --exclude .git Wolf4SDL-1.6-src/id_vh.cpp wolf4sdl/id_vh.cpp
--- Wolf4SDL-1.6-src/id_vh.cpp	2008-08-31 20:08:46.000000000 +0200
+++ wolf4sdl/id_vh.cpp	2011-04-27 19:58:18.551203098 +0200
@@ -116,7 +116,7 @@
 void VH_UpdateScreen()
 {
 	SDL_BlitSurface(screenBuffer, NULL, screen, NULL);
-	SDL_UpdateRect(screen, 0, 0, 0, 0);
+	SDL_Flip(screen);
 }
 
 
@@ -337,83 +337,99 @@
     rndmask = rndmasks[rndbits - 17];
 }
 
-boolean FizzleFade (SDL_Surface *source, SDL_Surface *dest,	int x1, int y1,
+boolean FizzleFade (SDL_Surface *source, int x1, int y1,
     unsigned width, unsigned height, unsigned frames, boolean abortable)
 {
-	unsigned x,y,p,frame,pixperframe;
-	int32_t  rndval;
+    unsigned x, y, frame, pixperframe;
+    int32_t  rndval, lastrndval;
+    int      first = 1;
+
+    lastrndval = 0;
+    pixperframe = width * height / frames;
+
+    IN_StartAck ();
+
+    frame = GetTimeCount();
+    byte *srcptr = VL_LockSurface(source);
+    do
+    {
+        if(abortable && IN_CheckAck ())
+        {
+            VL_UnlockSurface(source);
+            SDL_BlitSurface(source, NULL, screen, NULL);
+            SDL_Flip(screen);
+            return true;
+        }
 
-	rndval = 0;
-	pixperframe = width * height / frames;
+        byte *destptr = VL_LockSurface(screen);
 
-	IN_StartAck ();
+        rndval = lastrndval;
 
-	frame = GetTimeCount();
-	byte *srcptr = VL_LockSurface(source);
-	do
-	{
-		if (abortable && IN_CheckAck ())
-		{
-		    VL_UnlockSurface(source);
-            SDL_BlitSurface(screenBuffer, NULL, screen, NULL);
-            SDL_UpdateRect(screen, 0, 0, 0, 0);
-			return true;
-		}
-
-		byte *destptr = VL_LockSurface(dest);
-
-		for (p=0;p<pixperframe;p++)
-		{
-			//
-			// seperate random value into x/y pair
-			//
-
-			x = rndval >> rndbits_y;
-			y = rndval & ((1 << rndbits_y) - 1);
-
-			//
-			// advance to next random element
-			//
-
-			rndval = (rndval >> 1) ^ (rndval & 1 ? 0 : rndmask);
-
-			if (x>=width || y>=height)
-			{
-                if(rndval == 0)     // entire sequence has been completed
+        // When using double buffering, we have to copy the pixels of the last AND the current frame.
+        // Only for the first frame, there is no "last frame"
+        for(int i = first; i < 2; i++)
+        {
+            for(unsigned p = 0; p < pixperframe; p++)
+            {
+                //
+                // seperate random value into x/y pair
+                //
+
+                x = rndval >> rndbits_y;
+                y = rndval & ((1 << rndbits_y) - 1);
+
+                //
+                // advance to next random element
+                //
+
+                rndval = (rndval >> 1) ^ (rndval & 1 ? 0 : rndmask);
+
+                if(x >= width || y >= height)
+                {
+                    if(rndval == 0)     // entire sequence has been completed
+                        goto finished;
+                    p--;
+                    continue;
+                }
+
+                //
+                // copy one pixel
+                //
+
+                if(screenBits == 8)
+                {
+                    *(destptr + (y1 + y) * screen->pitch + x1 + x)
+                        = *(srcptr + (y1 + y) * source->pitch + x1 + x);
+                }
+                else
+                {
+                    byte col = *(srcptr + (y1 + y) * source->pitch + x1 + x);
+                    uint32_t fullcol = SDL_MapRGB(screen->format, curpal[col].r, curpal[col].g, curpal[col].b);
+                    memcpy(destptr + (y1 + y) * screen->pitch + (x1 + x) * screen->format->BytesPerPixel,
+                        &fullcol, screen->format->BytesPerPixel);
+                }
+
+                if(rndval == 0)		// entire sequence has been completed
                     goto finished;
-			    p--;
-				continue;
-			}
-
-			//
-			// copy one pixel
-			//
-
-			if(screenBits == 8)
-			{
-				*(destptr + (y1 + y) * dest->pitch + x1 + x)
-					= *(srcptr + (y1 + y) * source->pitch + x1 + x);
-			}
-			else
-			{
-				byte col = *(srcptr + (y1 + y) * source->pitch + x1 + x);
-				uint32_t fullcol = SDL_MapRGB(dest->format, curpal[col].r, curpal[col].g, curpal[col].b);
-				memcpy(destptr + (y1 + y) * dest->pitch + (x1 + x) * dest->format->BytesPerPixel,
-						&fullcol, dest->format->BytesPerPixel);
-			}
-
-			if (rndval == 0)		// entire sequence has been completed
-                goto finished;
-		}
-        VL_UnlockSurface(dest);
-        SDL_UpdateRect(dest, 0, 0, 0, 0);
-		frame++;
-        Delay(frame-GetTimeCount());        // don't go too fast
-	} while (1);
+            }
+
+            if(!i || first) lastrndval = rndval;
+        }
+
+        // If there is no double buffering, we always use the "first frame" case
+        if(usedoublebuffering) first = 0;
+
+        VL_UnlockSurface(screen);
+        SDL_Flip(screen);
+
+        frame++;
+        Delay(frame - GetTimeCount());        // don't go too fast
+    } while (1);
 
 finished:
     VL_UnlockSurface(source);
-    VL_UnlockSurface(dest);
-    SDL_UpdateRect(dest, 0, 0, 0, 0);
-	return false;
+    VL_UnlockSurface(screen);
+    SDL_BlitSurface(source, NULL, screen, NULL);
+    SDL_Flip(screen);
+    return false;
 }
diff -urN --exclude .git Wolf4SDL-1.6-src/id_vh.h wolf4sdl/id_vh.h
--- Wolf4SDL-1.6-src/id_vh.h	2008-08-31 20:08:46.000000000 +0200
+++ wolf4sdl/id_vh.h	2011-04-27 19:58:18.551203098 +0200
@@ -92,7 +92,7 @@
 void    LoadLatchMem (void);
 
 void    VH_Startup();
-boolean FizzleFade (SDL_Surface *source, SDL_Surface *dest, int x1, int y1,
+boolean FizzleFade (SDL_Surface *source, int x1, int y1,
     unsigned width, unsigned height, unsigned frames, boolean abortable);
 
 #define NUMLATCHPICS	100
diff -urN --exclude .git Wolf4SDL-1.6-src/id_vl.cpp wolf4sdl/id_vl.cpp
--- Wolf4SDL-1.6-src/id_vl.cpp	2008-08-31 19:53:14.000000000 +0200
+++ wolf4sdl/id_vl.cpp	2011-04-27 19:58:18.551203098 +0200
@@ -18,14 +18,21 @@
 
 boolean fullscreen = true;
 #if defined(_arch_dreamcast)
+boolean usedoublebuffering = false;
 unsigned screenWidth = 320;
 unsigned screenHeight = 200;
 unsigned screenBits = 8;
 #elif defined(GP2X)
+boolean usedoublebuffering = true;
 unsigned screenWidth = 320;
 unsigned screenHeight = 240;
+#if defined(GP2X_940)
 unsigned screenBits = 8;
 #else
+unsigned screenBits = 16;
+#endif
+#else
+boolean usedoublebuffering = true;
 unsigned screenWidth = 640;
 unsigned screenHeight = 400;
 unsigned screenBits = -1;      // use "best" color depth according to libSDL
@@ -89,13 +96,11 @@
 
 void	VL_SetVGAPlaneMode (void)
 {
-#ifndef _arch_dreamcast
 #ifdef SPEAR
     SDL_WM_SetCaption("Spear of Destiny", NULL);
 #else
     SDL_WM_SetCaption("Wolfenstein 3D", NULL);
 #endif
-#endif
 
     if(screenBits == -1)
     {
@@ -104,13 +109,17 @@
     }
 
     screen = SDL_SetVideoMode(screenWidth, screenHeight, screenBits,
-        SDL_SWSURFACE | (screenBits == 8 ? SDL_HWPALETTE : 0) | (fullscreen ? SDL_FULLSCREEN : 0));
+          (usedoublebuffering ? SDL_HWSURFACE | SDL_DOUBLEBUF : 0)
+        | (screenBits == 8 ? SDL_HWPALETTE : 0)
+        | (fullscreen ? SDL_FULLSCREEN : 0));
     if(!screen)
     {
         printf("Unable to set %ix%ix%i video mode: %s\n", screenWidth,
             screenHeight, screenBits, SDL_GetError());
         exit(1);
     }
+    if((screen->flags & SDL_DOUBLEBUF) != SDL_DOUBLEBUF)
+        usedoublebuffering = false;
     SDL_ShowCursor(SDL_DISABLE);
 
     SDL_SetColors(screen, gamepal, 0, 256);
@@ -178,17 +187,17 @@
 
 void VL_FillPalette (int red, int green, int blue)
 {
-	int	i;
-	SDL_Color pal[256];
+    int i;
+    SDL_Color pal[256];
 
-	for(i=0; i<256; i++)
-	{
-	    pal[i].r = red;
-	    pal[i].g = green;
-	    pal[i].b = blue;
-	}
+    for(i=0; i<256; i++)
+    {
+        pal[i].r = red;
+        pal[i].g = green;
+        pal[i].b = blue;
+    }
 
-	VL_SetPalette(pal);
+    VL_SetPalette(pal, true);
 }
 
 //===========================================================================
@@ -212,7 +221,7 @@
     {
         SDL_SetPalette(curSurface, SDL_LOGPAL, &col, color, 1);
         SDL_BlitSurface(curSurface, NULL, screen, NULL);
-        SDL_UpdateRect(screen, 0, 0, 0, 0);
+        SDL_Flip(screen);
     }
 }
 
@@ -244,7 +253,7 @@
 =================
 */
 
-void VL_SetPalette (SDL_Color *palette)
+void VL_SetPalette (SDL_Color *palette, bool forceupdate)
 {
     memcpy(curpal, palette, sizeof(SDL_Color) * 256);
 
@@ -253,8 +262,11 @@
     else
     {
         SDL_SetPalette(curSurface, SDL_LOGPAL, palette, 0, 256);
-        SDL_BlitSurface(curSurface, NULL, screen, NULL);
-        SDL_UpdateRect(screen, 0, 0, 0, 0);
+        if(forceupdate)
+        {
+            SDL_BlitSurface(curSurface, NULL, screen, NULL);
+            SDL_Flip(screen);
+        }
     }
 }
 
@@ -322,8 +334,8 @@
 			newptr++;
 		}
 
-		VL_WaitVBL(1);
-		VL_SetPalette (palette2);
+		if(!usedoublebuffering || screenBits == 8) VL_WaitVBL(1);
+		VL_SetPalette (palette2, true);
 	}
 
 //
@@ -366,14 +378,14 @@
 			palette2[j].b = palette1[j].b + delta * i / steps;
 		}
 
-		VL_WaitVBL(1);
-		VL_SetPalette(palette2);
+		if(!usedoublebuffering || screenBits == 8) VL_WaitVBL(1);
+		VL_SetPalette(palette2, true);
 	}
 
 //
 // final color
 //
-	VL_SetPalette (palette);
+	VL_SetPalette (palette, true);
 	screenfaded = false;
 }
 
diff -urN --exclude .git Wolf4SDL-1.6-src/id_vl.h wolf4sdl/id_vl.h
--- Wolf4SDL-1.6-src/id_vl.h	2008-08-28 19:57:50.000000000 +0200
+++ wolf4sdl/id_vl.h	2011-04-27 19:58:18.551203098 +0200
@@ -13,7 +13,7 @@
 
 extern SDL_Surface *screen, *screenBuffer, *curSurface;
 
-extern  boolean  fullscreen;
+extern  boolean  fullscreen, usedoublebuffering;
 extern  unsigned screenWidth, screenHeight, screenBits, screenPitch, bufferPitch, curPitch;
 extern  unsigned scaleFactor;
 
@@ -36,9 +36,9 @@
 
 void VL_ConvertPalette(byte *srcpal, SDL_Color *destpal, int numColors);
 void VL_FillPalette (int red, int green, int blue);
-void VL_SetColor	(int color, int red, int green, int blue);
-void VL_GetColor	(int color, int *red, int *green, int *blue);
-void VL_SetPalette  (SDL_Color *palette);
+void VL_SetColor    (int color, int red, int green, int blue);
+void VL_GetColor    (int color, int *red, int *green, int *blue);
+void VL_SetPalette  (SDL_Color *palette, bool forceupdate);
 void VL_GetPalette  (SDL_Color *palette);
 void VL_FadeOut     (int start, int end, int red, int green, int blue, int steps);
 void VL_FadeIn      (int start, int end, SDL_Color *palette, int steps);
diff -urN --exclude .git Wolf4SDL-1.6-src/version.h wolf4sdl/version.h
--- Wolf4SDL-1.6-src/version.h	2008-09-01 01:32:28.000000000 +0200
+++ wolf4sdl/version.h	2011-04-27 19:58:18.556203098 +0200
@@ -39,6 +39,7 @@
 //#define USE_STARSKY         // Enables star sky support (see wl_atmos.cpp)
 //#define USE_RAIN            // Enables rain support (see wl_atmos.cpp)
 //#define USE_SNOW            // Enables snow support (see wl_atmos.cpp)
+//#define FIXRAINSNOWLEAKS    // Enables leaking ceilings fix (by Adam Biser, only needed if maps with rain/snow and ceilings exist)
 
 #define DEBUGKEYS             // Comment this out to compile without the Tab debug keys
 #define ARTSEXTERN
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_act2.cpp wolf4sdl/wl_act2.cpp
--- Wolf4SDL-1.6-src/wl_act2.cpp	2008-09-01 02:32:04.000000000 +0200
+++ wolf4sdl/wl_act2.cpp	2011-04-27 19:58:18.557203098 +0200
@@ -3800,10 +3800,12 @@
         return;
     }
 
+    if(usedoublebuffering) VH_UpdateScreen();
+
     gamestate.victoryflag = true;
     unsigned fadeheight = viewsize != 21 ? screenHeight-scaleFactor*STATUSLINES : screenHeight;
     VL_BarScaledCoord (0, 0, screenWidth, fadeheight, bordercol);
-    FizzleFade(screenBuffer, screen, 0, 0, screenWidth, fadeheight, 70, false);
+    FizzleFade(screenBuffer, 0, 0, screenWidth, fadeheight, 70, false);
 
     if (bordercol != VIEWCOLOR)
     {
@@ -3827,6 +3829,7 @@
     }
 
     VW_UpdateScreen ();
+    if(usedoublebuffering) VH_UpdateScreen();
 
     IN_UserInput(300);
 
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_agent.cpp wolf4sdl/wl_agent.cpp
--- Wolf4SDL-1.6-src/wl_agent.cpp	2008-09-01 01:32:28.000000000 +0200
+++ wolf4sdl/wl_agent.cpp	2011-04-27 19:58:18.558203098 +0200
@@ -280,7 +280,10 @@
 void StatusDrawFace(unsigned picnum)
 {
     StatusDrawPic(17, 4, picnum);
-    StatusDrawLCD(picnum);
+
+#ifdef _arch_dreamcast
+    DC_StatusDrawLCD(picnum);
+#endif
 }
 
 
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_atmos.cpp wolf4sdl/wl_atmos.cpp
--- Wolf4SDL-1.6-src/wl_atmos.cpp	2008-02-18 01:54:38.000000000 +0100
+++ wolf4sdl/wl_atmos.cpp	2011-04-27 19:58:18.558203098 +0200
@@ -56,10 +56,11 @@
     int hvwidth = viewwidth >> 1;
 
     byte *ptr = vbuf;
-    for(int i = 0; i < hvheight; i++, ptr += vbufPitch)
+    int i;
+    for(i = 0; i < hvheight; i++, ptr += vbufPitch)
         memset(ptr, 0, viewwidth);
 
-    for(int i = 0; i < MAXPOINTS; i++)
+    for(i = 0; i < MAXPOINTS; i++)
     {
         point3d_t *pt = &points[i];
         int32_t x = pt->x * viewcos + pt->z * viewsin;
@@ -81,12 +82,14 @@
     int32_t yy = hvheight - ((hvheight - (hvheight >> 3)) << 22) / z;
     if(xx > -10 && xx < viewwidth)
     {
-        int stop = 10;
-        int i = 0;
+        int stopx = 10, starty = 0, stopy = 10;
+        i = 0;
         if(xx < 0) i = -xx;
-        if(xx > viewwidth - 11) stop = viewwidth - xx;
-        for(; i < stop; i++)
-            for(int j = 0; j < 10; j++)
+        if(xx > viewwidth - 11) stopx = viewwidth - xx;
+        if(yy < 0) startj = -yy;
+        if(yy > viewheight - 11) stopy = viewheight - yy;
+        for(; i < stopx; i++)
+            for(int j = starty; j < stopy; j++)
                 vbuf[(yy + j) * vbufPitch + xx + i] = moon[j * 10 + i];
     }
 }
@@ -97,6 +100,12 @@
 
 void DrawRain(byte *vbuf, uint32_t vbufPitch)
 {
+#if defined(USE_FLOORCEILINGTEX) && defined(FIXRAINSNOWLEAKS)
+    fixed dist;                                // distance to row projection
+    fixed tex_step;                            // global step per one screen pixel
+    fixed gu, gv, floorx, floory;              // global texture coordinates
+#endif
+
     fixed px = (player->y + FixedMul(0x7900, viewsin)) >> 6;
     fixed pz = (player->x - FixedMul(0x7900, viewcos)) >> 6;
     int32_t ax, az, x, y, z, xx, yy, height, actheight;
@@ -104,7 +113,7 @@
     int hvheight = viewheight >> 1;
     int hvwidth = viewwidth >> 1;
 
-    rainpos -= 1800;            // TODO: make it tics dependent
+    rainpos -= tics * 900;
     for(int i = 0; i < MAXPOINTS; i++)
     {
         point3d_t *pt = &points[i];
@@ -125,8 +134,22 @@
         height = (heightnumerator << 10) / z;
         if(actheight < 0) actheight = -actheight;
         if(actheight < (wallheight[xx] >> 3) && height < wallheight[xx]) continue;
+
         if(xx >= 0 && xx < viewwidth && yy > 0 && yy < viewheight)
         {
+#if defined(USE_FLOORCEILINGTEX) && defined(FIXRAINSNOWLEAKS)
+            // Find the rain's tile coordinate
+            // NOTE: This sometimes goes over the map edges.
+            dist = ((heightnumerator / ((height >> 3) + 1)) << 5);
+            gu =  viewx + FixedMul(dist, viewcos);
+            gv = -viewy + FixedMul(dist, viewsin);
+            floorx = (  gu >> TILESHIFT     ) & 63;
+            floory = (-(gv >> TILESHIFT) - 1) & 63;
+
+            // Is there a ceiling tile?
+            if(MAPSPOT(floorx, floory, 2) >> 8) continue;
+#endif
+
             vbuf[yy * vbufPitch + xx] = shade+15;
             vbuf[(yy - 1) * vbufPitch + xx] = shade+16;
             if(yy > 2)
@@ -141,6 +164,12 @@
 
 void DrawSnow(byte *vbuf, uint32_t vbufPitch)
 {
+#if defined(USE_FLOORCEILINGTEX) && defined(FIXRAINSNOWLEAKS)
+    fixed dist;                                // distance to row projection
+    fixed tex_step;                            // global step per one screen pixel
+    fixed gu, gv, floorx, floory;              // global texture coordinates
+#endif
+
     fixed px = (player->y + FixedMul(0x7900, viewsin)) >> 6;
     fixed pz = (player->x - FixedMul(0x7900, viewcos)) >> 6;
     int32_t ax, az, x, y, z, xx, yy, height, actheight;
@@ -148,7 +177,7 @@
     int hvheight = viewheight >> 1;
     int hvwidth = viewwidth >> 1;
 
-    rainpos -= 512;            // TODO: make it tics dependent
+    rainpos -= tics * 256;
     for(int i = 0; i < MAXPOINTS; i++)
     {
         point3d_t *pt = &points[i];
@@ -171,6 +200,19 @@
         if(actheight < (wallheight[xx] >> 3) && height < wallheight[xx]) continue;
         if(xx > 0 && xx < viewwidth && yy > 0 && yy < viewheight)
         {
+#if defined(USE_FLOORCEILINGTEX) && defined(FIXRAINSNOWLEAKS)
+            // Find the snow's tile coordinate
+            // NOTE: This sometimes goes over the map edges.
+            dist = ((heightnumerator / ((height >> 3) + 1)) << 5);
+            gu =  viewx + FixedMul(dist, viewcos);
+            gv = -viewy + FixedMul(dist, viewsin);
+            floorx = (  gu >> TILESHIFT     ) & 63;
+            floory = (-(gv >> TILESHIFT) - 1) & 63;
+
+            // Is there a ceiling tile?
+            if(MAPSPOT(floorx, floory, 2) >> 8) continue;
+#endif
+
             if(shade < 10)
             {
                 vbuf[yy * vbufPitch + xx] = shade+17;
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_debug.cpp wolf4sdl/wl_debug.cpp
--- Wolf4SDL-1.6-src/wl_debug.cpp	2008-05-14 19:52:28.000000000 +0200
+++ wolf4sdl/wl_debug.cpp	2011-04-27 19:58:18.558203098 +0200
@@ -479,16 +479,10 @@
         VW_UpdateScreen();
         IN_Ack();
         fpscounter ^= 1;
-/*        if (!fpscounter)
-            DrawPlayScreen(); */
         return 1;
     }
     if (Keyboard[sc_E])             // E = quit level
-    {
-        if (param_tedlevel != -1)
-            Quit (NULL);
         playstate = ex_completed;
-    }
 
     if (Keyboard[sc_F])             // F = facing spot
     {
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_def.h wolf4sdl/wl_def.h
--- Wolf4SDL-1.6-src/wl_def.h	2008-09-01 00:42:58.000000000 +0200
+++ wolf4sdl/wl_def.h	2011-04-27 19:58:18.558203098 +0200
@@ -11,7 +11,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #if defined(_arch_dreamcast)
-#	include <kos.h>
+#	include <string.h>
+#	include "dc/dc_main.h"
 #elif !defined(_WIN32)
 #	include <stdint.h>
 #	include <string.h>
@@ -25,6 +26,17 @@
 
 #pragma pack(1)
 
+#if defined(_arch_dreamcast)
+#define YESBUTTONNAME "A"
+#define NOBUTTONNAME  "B"
+#elif defined(GP2X)
+#define YESBUTTONNAME "Y"
+#define NOBUTTONNAME  "B"
+#else
+#define YESBUTTONNAME "Y"
+#define NOBUTTONNAME  "N"
+#endif
+
 #include "foreign.h"
 
 #ifndef SPEAR
@@ -44,17 +56,6 @@
     #include "f_spear.h"
 #endif
 
-#ifdef _arch_dreamcast
-typedef uint8 uint8_t;
-typedef uint16 uint16_t;
-typedef uint32 uint32_t;
-typedef int8 int8_t;
-typedef int16 int16_t;
-typedef int32 int32_t;
-typedef int64 int64_t;
-typedef ptr_t uintptr_t;
-#endif
-
 typedef uint8_t byte;
 typedef uint16_t word;
 typedef int32_t fixed;
@@ -83,10 +84,6 @@
 
 #include "wl_menu.h"
 
-#ifdef SPEAR
-#include "f_spear.h"
-#endif
-
 #define MAPSPOT(x,y,plane) (mapsegs[plane][((y)<<mapshift)+(x)])
 
 #define SIGN(x)         ((x)>0?1:-1)
@@ -915,6 +912,7 @@
 
 extern  boolean  startgame;
 extern  char     str[80];
+extern  char     configdir[256];
 extern  char     configname[13];
 
 //
@@ -1348,43 +1346,17 @@
 /*
 =============================================================================
 
-                            DREAMCAST DEFINITIONS
-
-=============================================================================
-*/
-
-#ifdef _arch_dreamcast
-
-// defined in dc_main.cpp
-void DC_Main(void);
-void DC_CheckParameters(void);
-int DC_MousePresent(void);
-
-// defined in dc_vmu.cpp
-void StatusDrawLCD(int lcd_index);
-int DC_SaveToVMU(char *src, int tp);
-int DC_LoadFromVMU(char *dst);
-
-#else
-
-// ignore calls to this function
-#define StatusDrawLCD(x)
-
-#endif
-
-
-/*
-=============================================================================
-
                                GP2X DEFINITIONS
 
 =============================================================================
 */
 
-#ifdef GP2X
+#if defined(GP2X)
 
-void GP2X_Init();
-void GP2X_Shutdown();
+#if defined(GP2X_940)
+void GP2X_MemoryInit(void);
+void GP2X_Shutdown(void);
+#endif
 void GP2X_ButtonDown(int button);
 void GP2X_ButtonUp(int button);
 
@@ -1424,6 +1396,7 @@
 #ifdef _WIN32
     #define strcasecmp stricmp
     #define strncasecmp strnicmp
+    #define snprintf _snprintf
 #else
     static inline char* itoa(int value, char* string, int radix)
     {
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_draw.cpp wolf4sdl/wl_draw.cpp
--- Wolf4SDL-1.6-src/wl_draw.cpp	2008-09-01 01:32:28.000000000 +0200
+++ wolf4sdl/wl_draw.cpp	2011-04-27 19:58:18.559203098 +0200
@@ -604,121 +604,6 @@
 
 //==========================================================================
 
-
-/*
-====================
-=
-= HitHorizPWall
-=
-= A pushable wall in action has been hit
-=
-====================
-*/
-
-void HitHorizPWall (void)
-{
-    int wallpic;
-    int texture,offset;
-
-    texture = (xintercept>>TEXTUREFROMFIXEDSHIFT)&TEXTUREMASK;
-    offset = pwallpos<<10;
-    if (ytilestep == -1)
-        yintercept += TILEGLOBAL-offset;
-    else
-    {
-        texture = TEXTUREMASK-texture;
-        yintercept += offset;
-    }
-
-    if(lasttilehit==tilehit && lastside==0)
-    {
-        if((pixx&3) && texture == lasttexture)
-        {
-            ScalePost();
-            postx=pixx;
-            wallheight[pixx] = wallheight[pixx-1];
-            return;
-        }
-        ScalePost();
-        wallheight[pixx] = CalcHeight();
-        postsource+=texture-lasttexture;
-        postwidth=1;
-        postx=pixx;
-        lasttexture=texture;
-        return;
-    }
-
-    if(lastside!=-1) ScalePost();
-
-    lastside=0;
-    lasttilehit=tilehit;
-    lasttexture=texture;
-    wallheight[pixx] = CalcHeight();
-    postx = pixx;
-    postwidth = 1;
-
-    wallpic = horizwall[pwalltile&63];
-
-    postsource = PM_GetTexture(wallpic) + texture;
-}
-
-/*
-====================
-=
-= HitVertPWall
-=
-= A pushable wall in action has been hit
-=
-====================
-*/
-
-void HitVertPWall (void)
-{
-    int wallpic;
-    int texture,offset;
-
-    texture = (yintercept>>TEXTUREFROMFIXEDSHIFT)&TEXTUREMASK;
-    offset = pwallpos<<10;
-    if (xtilestep == -1)
-    {
-        xintercept += TILEGLOBAL-offset;
-        texture = TEXTUREMASK-texture;
-    }
-    else
-        xintercept += offset;
-
-    if(lasttilehit==tilehit && lastside==1)
-    {
-        if((pixx&3) && texture == lasttexture)
-        {
-            ScalePost();
-            postx=pixx;
-            wallheight[pixx] = wallheight[pixx-1];
-            return;
-        }
-        ScalePost();
-        wallheight[pixx] = CalcHeight();
-        postsource+=texture-lasttexture;
-        postwidth=1;
-        postx=pixx;
-        lasttexture=texture;
-        return;
-    }
-
-    if(lastside!=-1) ScalePost();
-
-    lastside=1;
-    lasttilehit=tilehit;
-    lasttexture=texture;
-    wallheight[pixx] = CalcHeight();
-    postx = pixx;
-    postwidth = 1;
-
-    wallpic = vertwall[pwalltile&63];
-
-    postsource = PM_GetTexture(wallpic) + texture;
-}
-
 #define HitHorizBorder HitHorizWall
 #define HitVertBorder HitVertWall
 
@@ -1275,6 +1160,7 @@
                     else
                         xintercept = (focaltx << TILESHIFT) - TILEGLOBAL + ((64 - pwallpos) << 10);
                     yintercept = yintbuf;
+                    ytile = (short) (yintercept >> TILESHIFT);
                     tilehit = pwalltile;
                     HitVertWall();
                     continue;
@@ -1291,6 +1177,7 @@
                         yintercept = (focalty << TILESHIFT) + (pwallpos << 10);
                     else
                         yintercept = (focalty << TILESHIFT) - TILEGLOBAL + ((64 - pwallpos) << 10);
+                    xtile = (short) (xintercept >> TILESHIFT);
                     tilehit = pwalltile;
                     HitHorizWall();
                     continue;
@@ -1305,10 +1192,11 @@
 vertentry:
             if((uint32_t)yintercept>mapheight*65536-1 || (word)xtile>=mapwidth)
             {
-                if(xtile<0) xintercept=0;
-                if(xtile>=mapwidth) xintercept=mapwidth<<TILESHIFT;
-                if(yintercept<0) yintercept=0;
-                if(yintercept>=(mapheight<<TILESHIFT)) yintercept=mapheight<<TILESHIFT;
+                if(xtile<0) xintercept=0, xtile=0;
+                else if(xtile>=mapwidth) xintercept=mapwidth<<TILESHIFT, xtile=mapwidth-1;
+                else xtile=(short) (xintercept >> TILESHIFT);
+                if(yintercept<0) yintercept=0, ytile=0;
+                else if(yintercept>=(mapheight<<TILESHIFT)) yintercept=mapheight<<TILESHIFT, ytile=mapheight-1;
                 yspot=0xffff;
                 tilehit=0;
                 HitHorizBorder();
@@ -1327,6 +1215,7 @@
                         goto passvert;
                     yintercept=yintbuf;
                     xintercept=(xtile<<TILESHIFT)|0x8000;
+                    ytile = (short) (yintercept >> TILESHIFT);
                     HitVertDoor();
                 }
                 else
@@ -1357,6 +1246,7 @@
 
                                 xintercept=(xtile<<TILESHIFT)+TILEGLOBAL-(pwallposinv<<10);
                                 yintercept=yintbuf;
+                                ytile = (short) (yintercept >> TILESHIFT);
                                 tilehit=pwalltile;
                                 HitVertWall();
                             }
@@ -1368,6 +1258,7 @@
 
                                 xintercept=(xtile<<TILESHIFT)-(pwallposinv<<10);
                                 yintercept=yintbuf;
+                                ytile = (short) (yintercept >> TILESHIFT);
                                 tilehit=pwalltile;
                                 HitVertWall();
                             }
@@ -1390,6 +1281,7 @@
                                     else
                                         yintercept=(yintercept&0xffff0000)-TILEGLOBAL+(pwallposi<<10);
                                     xintercept=xintercept-((xstep*(64-pwallpos))>>6);
+                                    xtile = (short) (xintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitHorizWall();
                                 }
@@ -1397,6 +1289,7 @@
                                 {
                                     texdelta = -(pwallposi<<10);
                                     xintercept=xtile<<TILESHIFT;
+                                    ytile = (short) (yintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitVertWall();
                                 }
@@ -1407,6 +1300,7 @@
                                 {
                                     texdelta = -(pwallposi<<10);
                                     xintercept=xtile<<TILESHIFT;
+                                    ytile = (short) (yintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitVertWall();
                                 }
@@ -1421,6 +1315,7 @@
                                     else
                                         yintercept=(yintercept&0xffff0000)+((64-pwallpos)<<10);
                                     xintercept=xintercept-((xstep*pwallpos)>>6);
+                                    xtile = (short) (xintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitHorizWall();
                                 }
@@ -1430,6 +1325,7 @@
                     else
                     {
                         xintercept=xtile<<TILESHIFT;
+                        ytile = (short) (yintercept >> TILESHIFT);
                         HitVertWall();
                     }
                 }
@@ -1451,10 +1347,11 @@
 horizentry:
             if((uint32_t)xintercept>mapwidth*65536-1 || (word)ytile>=mapheight)
             {
-                if(ytile<0) yintercept=0;
-                if(ytile>=mapheight) yintercept=mapheight<<TILESHIFT;
-                if(xintercept<0) xintercept=0;
-                if(xintercept>=(mapwidth<<TILESHIFT)) xintercept=mapwidth<<TILESHIFT;
+                if(ytile<0) yintercept=0, ytile=0;
+                else if(ytile>=mapheight) yintercept=mapheight<<TILESHIFT, ytile=mapheight-1;
+                else ytile=(short) (yintercept >> TILESHIFT);
+                if(xintercept<0) xintercept=0, xtile=0;
+                else if(xintercept>=(mapwidth<<TILESHIFT)) xintercept=mapwidth<<TILESHIFT, xtile=mapwidth-1;
                 xspot=0xffff;
                 tilehit=0;
                 HitVertBorder();
@@ -1473,6 +1370,7 @@
                         goto passhoriz;
                     xintercept=xintbuf;
                     yintercept=(ytile<<TILESHIFT)+0x8000;
+                    xtile = (short) (xintercept >> TILESHIFT);
                     HitHorizDoor();
                 }
                 else
@@ -1503,6 +1401,7 @@
 
                                 yintercept=(ytile<<TILESHIFT)+TILEGLOBAL-(pwallposinv<<10);
                                 xintercept=xintbuf;
+                                xtile = (short) (xintercept >> TILESHIFT);
                                 tilehit=pwalltile;
                                 HitHorizWall();
                             }
@@ -1514,6 +1413,7 @@
 
                                 yintercept=(ytile<<TILESHIFT)-(pwallposinv<<10);
                                 xintercept=xintbuf;
+                                xtile = (short) (xintercept >> TILESHIFT);
                                 tilehit=pwalltile;
                                 HitHorizWall();
                             }
@@ -1536,6 +1436,7 @@
                                     else
                                         xintercept=(xintercept&0xffff0000)-TILEGLOBAL+(pwallposi<<10);
                                     yintercept=yintercept-((ystep*(64-pwallpos))>>6);
+                                    ytile = (short) (yintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitVertWall();
                                 }
@@ -1543,6 +1444,7 @@
                                 {
                                     texdelta = -(pwallposi<<10);
                                     yintercept=ytile<<TILESHIFT;
+                                    xtile = (short) (xintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitHorizWall();
                                 }
@@ -1553,6 +1455,7 @@
                                 {
                                     texdelta = -(pwallposi<<10);
                                     yintercept=ytile<<TILESHIFT;
+                                    xtile = (short) (xintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitHorizWall();
                                 }
@@ -1567,6 +1470,7 @@
                                     else
                                         xintercept=(xintercept&0xffff0000)+((64-pwallpos)<<10);
                                     yintercept=yintercept-((ystep*pwallpos)>>6);
+                                    ytile = (short) (yintercept >> TILESHIFT);
                                     tilehit=pwalltile;
                                     HitVertWall();
                                 }
@@ -1576,6 +1480,7 @@
                     else
                     {
                         yintercept=ytile<<TILESHIFT;
+                        xtile = (short) (xintercept >> TILESHIFT);
                         HitHorizWall();
                     }
                 }
@@ -1703,8 +1608,7 @@
 
     if (fizzlein)
     {
-        FizzleFade(screenBuffer, screen, 0, 0,
-            screenWidth, screenHeight, 20, false);
+        FizzleFade(screenBuffer, 0, 0, screenWidth, screenHeight, 20, false);
         fizzlein = false;
 
         lasttimecount = GetTimeCount();          // don't make a big tic count
@@ -1723,7 +1627,7 @@
         }
 #endif
         SDL_BlitSurface(screenBuffer, NULL, screen, NULL);
-        SDL_UpdateRect(screen, 0, 0, 0, 0);
+        SDL_Flip(screen);
     }
 
 #ifndef REMDEBUG
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_floorceiling.cpp wolf4sdl/wl_floorceiling.cpp
--- Wolf4SDL-1.6-src/wl_floorceiling.cpp	2008-02-19 00:25:48.000000000 +0100
+++ wolf4sdl/wl_floorceiling.cpp	2011-04-27 19:58:18.559203098 +0200
@@ -29,7 +29,7 @@
     for(int y = y0, bot_offset = bot_offset0, top_offset = top_offset0;
         y < halfheight; y++, bot_offset += vbufPitch, top_offset -= vbufPitch)
     {
-        dist = (heightnumerator / y) << 5;
+        dist = (heightnumerator / (y + 1)) << 5;
         gu =  viewx + FixedMul(dist, viewcos);
         gv = -viewy + FixedMul(dist, viewsin);
         tex_step = (dist << 8) / viewwidth / 175;
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_game.cpp wolf4sdl/wl_game.cpp
--- Wolf4SDL-1.6-src/wl_game.cpp	2008-09-01 01:32:28.000000000 +0200
+++ wolf4sdl/wl_game.cpp	2011-04-27 19:58:18.559203098 +0200
@@ -1124,6 +1124,7 @@
     SetupGameLevel ();
     StartMusic ();
 
+    if(usedoublebuffering) VH_UpdateScreen();
     fizzlein = true;
 
     PlayLoop ();
@@ -1318,11 +1319,13 @@
     //
     FinishPaletteShifts ();
 
+    if(usedoublebuffering) VH_UpdateScreen();
+
     VL_BarScaledCoord (viewscreenx,viewscreeny,viewwidth,viewheight,4);
 
     IN_ClearKeysDown ();
 
-    FizzleFade(screenBuffer,screen,viewscreenx,viewscreeny,viewwidth,viewheight,70,false);
+    FizzleFade(screenBuffer,viewscreenx,viewscreeny,viewwidth,viewheight,70,false);
 
     IN_UserInput(100);
     SD_WaitSoundDone ();
@@ -1405,9 +1408,10 @@
         if (!died)
             PreloadGraphics ();             // TODO: Let this do something useful!
         else
+        {
             died = false;
-
-        fizzlein = true;
+            fizzlein = true;
+        }
 
         DrawLevel ();
 
@@ -1558,6 +1562,10 @@
                 if(screenHeight % 200 != 0)
                     VL_ClearScreen(0);
 
+#ifdef _arch_dreamcast
+                DC_StatusClearLCD();
+#endif
+
                 ClearMemory ();
 
                 CheckHighScore (gamestate.score,gamestate.mapon+1);
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_inter.cpp wolf4sdl/wl_inter.cpp
--- Wolf4SDL-1.6-src/wl_inter.cpp	2008-05-14 13:45:32.000000000 +0200
+++ wolf4sdl/wl_inter.cpp	2011-04-27 19:58:18.560203098 +0200
@@ -673,8 +673,8 @@
                 Write (x, 7, tempstr);
                 if (!(i % (PAR_AMOUNT / 10)))
                     SD_PlaySound (ENDBONUS1SND);
-                VW_UpdateScreen ();
-                while (SD_SoundPlaying ())
+                if(!usedoublebuffering || !(i % (PAR_AMOUNT / 50))) VW_UpdateScreen ();
+                while(SD_SoundPlaying ())
                     BJ_Breathe ();
                 if (IN_CheckAck ())
                     goto done;
@@ -704,7 +704,7 @@
             Write (x, 14, tempstr);
             if (!(i % 10))
                 SD_PlaySound (ENDBONUS1SND);
-            VW_UpdateScreen ();
+            if(!usedoublebuffering || !(i & 1)) VW_UpdateScreen ();
             while (SD_SoundPlaying ())
                 BJ_Breathe ();
 
@@ -746,10 +746,9 @@
             Write (x, 16, tempstr);
             if (!(i % 10))
                 SD_PlaySound (ENDBONUS1SND);
-            VW_UpdateScreen ();
+            if(!usedoublebuffering || !(i & 1)) VW_UpdateScreen ();
             while (SD_SoundPlaying ())
                 BJ_Breathe ();
-            BJ_Breathe ();
 
             if (IN_CheckAck ())
                 goto done;
@@ -788,7 +787,7 @@
             Write (x, 18, tempstr);
             if (!(i % 10))
                 SD_PlaySound (ENDBONUS1SND);
-            VW_UpdateScreen ();
+            if(!usedoublebuffering || !(i & 1)) VW_UpdateScreen ();
             while (SD_SoundPlaying ())
                 BJ_Breathe ();
             if (IN_CheckAck ())
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_main.cpp wolf4sdl/wl_main.cpp
--- Wolf4SDL-1.6-src/wl_main.cpp	2008-09-01 01:32:28.000000000 +0200
+++ wolf4sdl/wl_main.cpp	2011-04-27 19:58:18.560203098 +0200
@@ -73,7 +73,8 @@
 boolean loadedgame;
 int     mouseadjustment;
 
-char    configname[13]="config.";
+char    configdir[256] = "";
+char    configname[13] = "config.";
 
 //
 // Command line parameter variables
@@ -88,7 +89,7 @@
 int     param_joystickhat = 0;
 int     param_samplerate = 11025;       // higher samplerates result in "out of memory"
 int     param_audiobuffer = 4096 / (44100 / param_samplerate);
-#elif defined(GP2X)
+#elif defined(GP2X_940)
 int     param_joystickhat = -1;
 int     param_samplerate = 11025;       // higher samplerates result in "out of memory"
 int     param_audiobuffer = 128;
@@ -98,7 +99,7 @@
 int     param_audiobuffer = 2048 / (44100 / param_samplerate);
 #endif
 
-int     param_mission = 1;
+int     param_mission = 0;
 boolean param_goodtimes = false;
 boolean param_ignorenumchunks = false;
 
@@ -125,11 +126,18 @@
     SMMode  sm;
     SDSMode sds;
 
+    char configpath[300];
+
 #ifdef _arch_dreamcast
     DC_LoadFromVMU(configname);
 #endif
 
-    const int file = open(configname, O_RDONLY | O_BINARY);
+    if(configdir[0])
+        snprintf(configpath, sizeof(configpath), "%s/%s", configdir, configname);
+    else
+        strcpy(configpath, configname);
+
+    const int file = open(configpath, O_RDONLY | O_BINARY);
     if (file != -1)
     {
         //
@@ -243,11 +251,18 @@
 
 void WriteConfig(void)
 {
+    char configpath[300];
+
 #ifdef _arch_dreamcast
     fs_unlink(configname);
 #endif
 
-    const int file = open(configname, O_CREAT | O_WRONLY | O_BINARY, 0644);
+    if(configdir[0])
+        snprintf(configpath, sizeof(configpath), "%s/%s", configdir, configname);
+    else
+        strcpy(configpath, configname);
+
+    const int file = open(configpath, O_CREAT | O_WRONLY | O_BINARY, 0644);
     if (file != -1)
     {
         word tmp=0xfefa;
@@ -278,7 +293,7 @@
         close(file);
     }
 #ifdef _arch_dreamcast
-    DC_SaveToVMU(configname, 1);
+    DC_SaveToVMU(configname, NULL);
 #endif
 }
 
@@ -665,7 +680,7 @@
     IN_Shutdown ();
     VW_Shutdown ();
     CA_Shutdown ();
-#if defined(GP2X)
+#if defined(GP2X_940)
     GP2X_Shutdown();
 #endif
 }
@@ -1213,6 +1228,10 @@
         exit(1);
     }
 
+#if defined(GP2X_940)
+    GP2X_MemoryInit();
+#endif
+
     SignonScreen ();
 
 #if defined _WIN32
@@ -1284,6 +1303,10 @@
 //
     IntroScreen ();
 
+#ifdef _arch_dreamcast
+    //TODO: VMU Selection Screen
+#endif
+
 //
 // load in and lock down some basic chunks
 //
@@ -1686,6 +1709,11 @@
         }
         else IFARG("--windowed")
             fullscreen = false;
+        else IFARG("--windowed-mouse")
+        {
+            fullscreen = false;
+            forcegrabmouse = true;
+        }
         else IFARG("--res")
         {
             if(i + 2 >= argc)
@@ -1744,6 +1772,25 @@
                 }
             }
         }
+        else IFARG("--nodblbuf")
+            usedoublebuffering = false;
+        else IFARG("--extravbls")
+        {
+            if(++i >= argc)
+            {
+                printf("The extravbls option is missing the vbls argument!\n");
+                hasError = true;
+            }
+            else
+            {
+                extravbls = atoi(argv[i]);
+                if(extravbls < 0)
+                {
+                    printf("Extravbls must be positive!\n");
+                    hasError = true;
+                }
+            }
+        }
         else IFARG("--joystick")
         {
             if(++i >= argc)
@@ -1789,7 +1836,38 @@
                 printf("The mission option is missing the mission argument!\n");
                 hasError = true;
             }
-            else param_mission = atoi(argv[i]);
+            else
+            {
+                param_mission = atoi(argv[i]);
+                if(param_mission < 0 || param_mission > 3)
+                {
+                    printf("The mission option must be between 0 and 3!\n");
+                    hasError = true;
+                }
+            }
+        }
+        else IFARG("--configdir")
+        {
+            if(++i >= argc)
+            {
+                printf("The configdir option is missing the dir argument!\n");
+                hasError = true;
+            }
+            else
+            {
+                size_t len = strlen(argv[i]);
+                if(len + 2 > sizeof(configdir))
+                {
+                    printf("The config directory is too long!\n");
+                    hasError = true;
+                }
+                else
+                {
+                    strcpy(configdir, argv[i]);
+                    if(argv[i][len] != '/' && argv[i][len] != '\\')
+                        strcat(configdir, "/");
+                }
+            }
         }
         else IFARG("--goodtimes")
             param_goodtimes = true;
@@ -1803,7 +1881,7 @@
     {
         if(hasError) printf("\n");
         printf(
-            "Wolf4SDL v1.6 ($Revision: 232 $)\n"
+            "Wolf4SDL v1.7 ($Revision: 255 $)\n"
             "Ported by Chaos-Software (http://www.chaos-software.de.vu)\n"
             "Original Wolfenstein 3D by id Software\n\n"
             "Usage: Wolf4SDL [options]\n"
@@ -1815,7 +1893,7 @@
             " --normal               Sets the difficulty to normal for tedlevel\n"
             " --hard                 Sets the difficulty to hard for tedlevel\n"
             " --nowait               Skips intro screens\n"
-            " --windowed             Starts the game in a window\n"
+            " --windowed[-mouse]     Starts the game in a window [and grabs mouse]\n"
             " --res <width> <height> Sets the screen resolution\n"
             "                        (must be multiple of 320x200 or 320x240)\n"
             " --resf <w> <h>         Sets any screen resolution >= 320x200\n"
@@ -1823,20 +1901,26 @@
             " --bits <b>             Sets the screen color depth\n"
             "                        (use this when you have palette/fading problems\n"
             "                        allowed: 8, 16, 24, 32, default: \"best\" depth)\n"
+            " --nodblbuf             Don't use SDL's double buffering\n"
+            " --extravbls <vbls>     Sets a delay after each frame, which may help to\n"
+            "                        reduce flickering (unit is currently 8 ms, default: 0)\n"
             " --joystick <index>     Use the index-th joystick if available\n"
             "                        (-1 to disable joystick, default: 0)\n"
             " --joystickhat <index>  Enables movement with the given coolie hat\n"
             " --samplerate <rate>    Sets the sound sample rate (given in Hz, default: %i)\n"
             " --audiobuffer <size>   Sets the size of the audio buffer (-> sound latency)\n"
-#ifdef _arch_dreamcast
-            "                        (given in bytes, default: 4096 / (44100 / samplerate))\n"
-#else
             "                        (given in bytes, default: 2048 / (44100 / samplerate))\n"
-#endif
             " --ignorenumchunks      Ignores the number of chunks in VGAHEAD.*\n"
             "                        (may be useful for some broken mods)\n"
+            " --configdir <dir>      Directory where config file and save games are stored\n"
+#if defined(_arch_dreamcast) || defined(_WIN32)
+            "                        (default: current directory)\n"
+#else
+            "                        (default: $HOME/.wolf4sdl)\n"
+#endif
 #if defined(SPEAR) && !defined(SPEARDEMO)
-            " --mission <mission>    Mission number to play (1-3)\n"
+            " --mission <mission>    Mission number to play (0-3)\n"
+            "                        (default: 0 -> .sod, 1-3 -> .sd*)\n"
             " --goodtimes            Disable copy protection quiz\n"
 #endif
             , defaultSampleRate
@@ -1845,11 +1929,7 @@
     }
 
     if(sampleRateGiven && !audioBufferGiven)
-#ifdef _arch_dreamcast
-        param_audiobuffer = 4096 / (44100 / param_samplerate);
-#else
         param_audiobuffer = 2048 / (44100 / param_samplerate);
-#endif
 }
 
 /*
@@ -1863,10 +1943,7 @@
 int main (int argc, char *argv[])
 {
 #if defined(_arch_dreamcast)
-    DC_Main();
-    DC_CheckParameters();
-#elif defined(GP2X)
-    GP2X_Init();
+    DC_Init();
 #else
     CheckParameters(argc, argv);
 #endif
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_menu.cpp wolf4sdl/wl_menu.cpp
--- Wolf4SDL-1.6-src/wl_menu.cpp	2008-09-01 00:42:58.000000000 +0200
+++ wolf4sdl/wl_menu.cpp	2011-04-27 19:58:18.561203098 +0200
@@ -8,9 +8,10 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #ifdef _WIN32
-	#include <io.h>
+    #include <io.h>
+    #include <direct.h>
 #else
-	#include <unistd.h>
+    #include <unistd.h>
 #endif
 
 #include "wl_def.h"
@@ -36,18 +37,8 @@
 #endif
 #endif
 
+// ENDSTRx constants are defined in foreign.h
 char endStrings[9][80] = {
-#ifndef SPEAR
-    {"Dost thou wish to\nleave with such hasty\nabandon?"},
-    {"Chickening out...\nalready?"},
-    {"Press N for more carnage.\nPress Y to be a weenie."},
-    {"So, you think you can\nquit this easily, huh?"},
-    {"Press N to save the world.\nPress Y to abandon it in\nits hour of need."},
-    {"Press N if you are brave.\nPress Y to cower in shame."},
-    {"Heroes, press N.\nWimps, press Y."},
-    {"You are at an intersection.\nA sign says, 'Press Y to quit.'\n>"},
-    {"For guns and glory, press N.\nFor work and worry, press Y."}
-#else
     ENDSTR1,
     ENDSTR2,
     ENDSTR3,
@@ -57,7 +48,6 @@
     ENDSTR7,
     ENDSTR8,
     ENDSTR9
-#endif
 };
 
 CP_itemtype MainMenu[] = {
@@ -400,6 +390,10 @@
 {
     int which;
 
+#ifdef _arch_dreamcast
+    DC_StatusClearLCD();
+#endif
+
     if (ingame)
     {
         if (CP_CheckQuick (scancode))
@@ -1498,7 +1492,7 @@
     FILE *file;
     int which, exit = 0;
     char name[13];
-
+    char loadpath[300];
 
     strcpy (name, SaveName);
 
@@ -1512,10 +1506,17 @@
         if (SaveGamesAvail[which])
         {
             name[7] = which + '0';
+
 #ifdef _arch_dreamcast
             DC_LoadFromVMU(name);
 #endif
-            file = fopen (name, "rb");
+
+            if(configdir[0])
+                snprintf(loadpath, sizeof(loadpath), "%s/%s", configdir, name);
+            else
+                strcpy(loadpath, name);
+
+            file = fopen (loadpath, "rb");
             fseek (file, 32, SEEK_SET);
             loadedgame = true;
             LoadTheGame (file, 0, 0);
@@ -1554,7 +1555,13 @@
 #ifdef _arch_dreamcast
             DC_LoadFromVMU(name);
 #endif
-            file = fopen (name, "rb");
+
+            if(configdir[0])
+                snprintf(loadpath, sizeof(loadpath), "%s/%s", configdir, name);
+            else
+                strcpy(loadpath, name);
+
+            file = fopen (loadpath, "rb");
             fseek (file, 32, SEEK_SET);
 
             DrawLSAction (0);
@@ -1677,9 +1684,9 @@
     int which, exit = 0;
     FILE *file;
     char name[13];
+    char savepath[300];
     char input[32];
 
-
     strcpy (name, SaveName);
 
     //
@@ -1692,19 +1699,24 @@
         if (SaveGamesAvail[which])
         {
             name[7] = which + '0';
-            unlink (name);
-            file = fopen (name, "wb");
+
+            if(configdir[0])
+                snprintf(savepath, sizeof(savepath), "%s/%s", configdir, name);
+            else
+                strcpy(savepath, name);
+
+            unlink (savepath);
+            file = fopen (savepath, "wb");
 
             strcpy (input, &SaveGameNames[which][0]);
 
-//                      _dos_write(handle,(void far *)input,32,&nwritten);
             fwrite (input, 1, 32, file);
             fseek (file, 32, SEEK_SET);
             SaveTheGame (file, 0, 0);
             fclose (file);
 
 #ifdef _arch_dreamcast
-            DC_SaveToVMU (name, 2);
+            DC_SaveToVMU(name, input);
 #endif
 
             return 1;
@@ -1728,6 +1740,7 @@
             // OVERWRITE EXISTING SAVEGAME?
             //
             if (SaveGamesAvail[which])
+            {
 #ifdef JAPAN
                 if (!GetYorN (7, 8, C_JAPSAVEOVERPIC))
 #else
@@ -1743,6 +1756,7 @@
                     PrintLSEntry (which, HIGHLIGHT);
                     VW_UpdateScreen ();
                 }
+            }
 
             ShootSnd ();
 
@@ -1762,9 +1776,13 @@
                 SaveGamesAvail[which] = 1;
                 strcpy (&SaveGameNames[which][0], input);
 
-                unlink (name);
-                file = fopen (name, "wb");
-//                              _dos_write(handle,(void far *)input,32,&nwritten);
+                if(configdir[0])
+                    snprintf(savepath, sizeof(savepath), "%s/%s", configdir, name);
+                else
+                    strcpy(savepath, name);
+
+                unlink (savepath);
+                file = fopen (savepath, "wb");
                 fwrite (input, 32, 1, file);
                 fseek (file, 32, SEEK_SET);
 
@@ -1774,7 +1792,7 @@
                 fclose (file);
 
 #ifdef _arch_dreamcast
-                DC_SaveToVMU (name, 2);
+                DC_SaveToVMU(name, input);
 #endif
 
                 ShootSnd ();
@@ -3143,60 +3161,38 @@
 void SetupSaveGames()
 {
     char name[13];
-
-#ifdef _arch_dreamcast
-    file_t dir;
-    dirent_t *dirent;
-    int x;
-
-    dir = fs_open("/vmu/a1", O_RDONLY | O_DIR);
-    x = 0;
+    char savepath[300];
 
     strcpy(name, SaveName);
-    while((dirent = fs_readdir(dir)) && x < 10)
+    for(int i = 0; i < 10; i++)
     {
-        for(int i=0; i<10; i++)
+        name[7] = '0' + i;
+#ifdef _arch_dreamcast
+        // Try to unpack file
+        if(DC_LoadFromVMU(name))
         {
-            name[7] = '0' + i;
-            if(!strcmp(name, dirent->name))
+#endif
+            if(configdir[0])
+                snprintf(savepath, sizeof(savepath), "%s/%s", configdir, name);
+            else
+                strcpy(savepath, name);
+
+            const int handle = open(savepath, O_RDONLY | O_BINARY);
+            if(handle >= 0)
             {
-                if(DC_LoadFromVMU(name) != -1)
-                {
-                    const int handle = open(name, O_RDONLY);
-                    if (handle >= 0)
-                    {
-                        char temp[32];
+                char temp[32];
 
-                        SaveGamesAvail[i] = 1;
-                        read(handle, temp, 32);
-                        close(handle);
-                        strcpy(&SaveGameNames[i][0], temp);
-                        x++;
-                    }
-                    fs_unlink(name);
-                }
+                SaveGamesAvail[i] = 1;
+                read(handle, temp, 32);
+                close(handle);
+                strcpy(&SaveGameNames[i][0], temp);
             }
+#ifdef _arch_dreamcast
+            // Remove unpacked version of file
+            fs_unlink(name);
         }
-    }
-
-    fs_close(dir);
-#else
-    strcpy(name, SaveName);
-    for(int i=0; i<10; i++)
-    {
-        name[7] = '0' + i;
-        const int handle = open(name, O_RDONLY | O_BINARY);
-        if (handle >= 0)
-        {
-            char temp[32];
-
-            SaveGamesAvail[i] = 1;
-            read(handle, temp, 32);
-            close(handle);
-            strcpy(&SaveGameNames[i][0], temp);
-        }
-    }
 #endif
+    }
 }
 
 ////////////////////////////////////////////////////////////////////
@@ -3993,6 +3989,41 @@
 {
     struct stat statbuf;
 
+    // On Linux like systems, the configdir defaults to $HOME/.wolf4sdl
+#if !defined(_WIN32) && !defined(_arch_dreamcast)
+    if(configdir[0] == 0)
+    {
+        // Set config location to home directory for multi-user support
+        char *homedir = getenv("HOME");
+        if(homedir == NULL)
+        {
+            Quit("Your $HOME directory is not defined. You must set this before playing.");
+        }
+        #define WOLFDIR "/.wolf4sdl"
+        if(strlen(homedir) + sizeof(WOLFDIR) > sizeof(configdir))
+        {
+            Quit("Your $HOME directory path is too long. It cannot be used for saving games.");
+        }
+        snprintf(configdir, sizeof(configdir), "%s" WOLFDIR, homedir);
+    }
+#endif
+
+    if(configdir[0] != 0)
+    {
+        // Ensure config directory exists and create if necessary
+        if(stat(configdir, &statbuf) != 0)
+        {
+#ifdef _WIN32
+            if(_mkdir(configdir) != 0)
+#else
+            if(mkdir(configdir, 0755) != 0)
+#endif
+            {
+                Quit("The configuration directory \"%s\" could not be created.", configdir);
+            }
+        }
+    }
+
 //
 // JAPANESE VERSION
 //
@@ -4066,13 +4097,20 @@
 
 #ifdef SPEAR
 #ifndef SPEARDEMO
-    if(param_mission == 1)
+    if(param_mission == 0)
     {
         if(!stat("vswap.sod", &statbuf))
             strcpy (extension, "sod");
         else
             Quit ("NO SPEAR OF DESTINY DATA FILES TO BE FOUND!");
     }
+    else if(param_mission == 1)
+    {
+        if(!stat("vswap.sd1", &statbuf))
+            strcpy (extension, "sd1");
+        else
+            Quit ("NO SPEAR OF DESTINY DATA FILES TO BE FOUND!");
+    }
     else if(param_mission == 2)
     {
         if(!stat("vswap.sd2", &statbuf))
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_parallax.cpp wolf4sdl/wl_parallax.cpp
--- Wolf4SDL-1.6-src/wl_parallax.cpp	2008-02-18 01:54:38.000000000 +0100
+++ wolf4sdl/wl_parallax.cpp	2011-04-27 19:58:18.561203098 +0200
@@ -21,8 +21,8 @@
     int startTex;
     switch(gamestate.episode * 10 + mapon)
     {
-        case  0: skyID = 20; break;
-        default: skyID =  0; break;
+        case  0: startTex = 20; break;
+        default: startTex =  0; break;
     }
     assert(startTex >= 0 && startTex < PMSpriteStart);
     return startTex;
diff -urN --exclude .git Wolf4SDL-1.6-src/wl_play.cpp wolf4sdl/wl_play.cpp
--- Wolf4SDL-1.6-src/wl_play.cpp	2008-05-27 02:06:56.000000000 +0200
+++ wolf4sdl/wl_play.cpp	2011-04-27 19:58:18.561203098 +0200
@@ -36,7 +36,7 @@
 objtype *newobj, *obj, *player, *lastobj, *objfreelist, *killerobj;
 
 boolean noclip, ammocheat;
-int godmode, singlestep, extravbls = 1; // to remove flicker (gray stuff at the bottom)
+int godmode, singlestep, extravbls = 0;
 
 byte tilemap[MAPSIZE][MAPSIZE]; // wall values only
 byte spotvis[MAPSIZE][MAPSIZE];
@@ -733,7 +733,7 @@
         CA_CacheGrChunk (STARTFONT);
         fontnumber = 0;
         SETFONTCOLOR (0, 15);
-        if (DebugKeys () && viewsize < 18)
+        if (DebugKeys () && viewsize < 20)
             DrawPlayBorder ();       // dont let the blue borders flash
 
         if (MousePresent && IN_IsInputGrabbed())
@@ -1098,17 +1098,17 @@
 
     if (red)
     {
-        VL_SetPalette (redshifts[red - 1]);
+        VL_SetPalette (redshifts[red - 1], false);
         palshifted = true;
     }
     else if (white)
     {
-        VL_SetPalette (whiteshifts[white - 1]);
+        VL_SetPalette (whiteshifts[white - 1], false);
         palshifted = true;
     }
     else if (palshifted)
     {
-        VL_SetPalette (gamepal);        // back to normal
+        VL_SetPalette (gamepal, false);        // back to normal
         palshifted = false;
     }
 }
@@ -1129,7 +1129,7 @@
     if (palshifted)
     {
         palshifted = 0;
-        VL_SetPalette (gamepal);
+        VL_SetPalette (gamepal, true);
     }
 }
 
